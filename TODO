# -*- org -*-

* hkl
** TODO HklAxis degenerated.
   an axis is degenerated if its position have no effect
   on the HklPseudoAxis calculus. Add a degenerated member to the axis.
   that way it would be possible to check a posteriori for this degenerescencence.
** TODO HklAxis method to use min/max to check for the validity
** TODO HklGeometryList different method to help select a solution.
   this select solution can depend on the geometry
   for example the kappa axis must be in one side of the plane.
** TODO add a fit on the Hklaxis offsets. 				
** TODO API to put a detector and a sample on the Geometry. 		
** TODO HklSample add the cell volum computation. 			
** TODO HklEngine "zone" 						
** TODO HklEngine "custom" 						
		for now this pseudoaxis let you select the axis you
		want to use for the computation.
** TODO create a macro to help compare two real the right way 		
   fabs(a-b) < epsilon * max(1, abs(a), abs(b))
** TODO add an hkl_sample_set_lattice_unit() 				
** TODO SOLEIL SIXS 							
*** DONE find the right solutions. 				      :zaxis:
    The cosinus and sinus properties are not enough to find the solution expected by the users.
    The idea is to use the Ewalds construction to generate a valid solution from the first one
    obtain numerically. The basic idea is to rotate the hkl vector around the last axis of the
    sample holder until it intersect again the Ewalds sphere. Then we just need to fit the
    detector position. This way the solution can be entirely generic (not geometry specific).
    Nevertheless it is necessary to propose this only for the hkl pseudo axes. I will add this
    special feature in the Mode. So it will be possible to add thoses special cases easily.
*** TODO Add the DEP diffractometer geometry
    This diffractometer is a Newport one based on the kappa 6 circles ones.
    But instead of a kappa head, they use an Hexapod head.
    This head can be put horizontally or vertically.
** TODO generalisation of the z-axis hkl solver 			
   first we need the degenerated member of the Axis. thaht way it could be possible
   to find the last non degenerated axis for the detector fit.
** TODO investigate the prigo geometry. 				
** TODO augeas/elektra for the plugin configure part. 			
** TODO logging 							
*** gir logging
    It would be nice to generate the library logging using the .gir
    information. So instead of writing the logging code for each
    method, it would be better to have a generic method for this
    purpose.
*** parsable logging information.
    A parsable logging format would help to setup some re-play unit
    test. This way it could help during the developpement process
    (modification of the hkl internals) to be confident that
    computation are ok.
 
** TODO performances 							
   Investigate [[http://liboil.freedesktop.org/wiki/][liboil]] to speed calculation (in HklVector, HklMatrix
   and HklQuaternion)

** TODO rewrite documentation in org-mode
   - asymptote and python code could be embeded directly into the
     documentation.
   - need to check if templates could be generated using the hkl
     python binding for alldiffractometer geometries.
* gui
** TODO change the color of fitparameter cells if they differ from the current
	  sample values
** TODO REPL
   https://github.com/jonathanslenders/python-prompt-toolkit/tree/master/examples/tutorial

* hkl3d
** TODO add a method to find the 3D models in the right directories.

* packaging
** TODO add a .spec file for rpm generation.
