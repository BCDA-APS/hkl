class Sample
!!!185346.cpp!!!	Sample(inout geometry : Geometry, in name : string)
      _parameters.push_back(&_lattice.a());
      _parameters.push_back(&_lattice.b());
      _parameters.push_back(&_lattice.c());
      _parameters.push_back(&_lattice.alpha());
      _parameters.push_back(&_lattice.beta());
      _parameters.push_back(&_lattice.gamma());
!!!185474.cpp!!!	Sample(in source : Sample)
      _parameters.push_back(&_lattice.a());
      _parameters.push_back(&_lattice.b());
      _parameters.push_back(&_lattice.c());
      _parameters.push_back(&_lattice.alpha());
      _parameters.push_back(&_lattice.beta());
      _parameters.push_back(&_lattice.gamma());
!!!188674.cpp!!!	lattice() : Lattice
      return _lattice;
!!!188802.cpp!!!	reflections() : ReflectionList
      return *_reflections;
!!!188930.cpp!!!	operator==(in sample : Sample) : bool
      return Object::operator==(sample)
             && _lattice == sample._lattice
             && *_reflections == *sample._reflections;
!!!189058.cpp!!!	printToStream(inout flux : ostream) : ostream
      unsigned int i;
      
      // Parameters
      flux << "\"" << get_name() << "\"" << std::endl;
      flux.width(9);
      flux << "  Parameters:";
      flux.width(9);
      flux << "value";
      flux.width(9);
      flux << "min";
      flux.width(9);
      flux << "max";
      flux << std::endl;
      for(i=0;i<3;i++)
        {
          FitParameter const & p = *_parameters[i];
          flux.precision(3);
          flux.width(9);
          flux << p.get_name() << "(" << p.get_flagFit() << "):";
          flux.width(9);
          flux << p.get_current().get_value();
          flux.width(9);
          flux << p.get_min().get_value();
          flux.width(9);
          flux << p.get_max().get_value();
          flux << std::endl;
        }
      for(i=3;i<6;i++)
        {
          FitParameter const & p = *_parameters[i];
          flux.precision(3);
          flux.width(9);
          flux << p.get_name() << "(" << p.get_flagFit() << "):";
          flux.width(9);
          flux << p.get_current().get_value()*constant::math::radToDeg;
          flux.width(9);
          flux << p.get_min().get_value()*constant::math::radToDeg;
          flux.width(9);
          flux << p.get_max().get_value()*constant::math::radToDeg;
          flux << std::endl;
        }
      
      //Reflections
      if (_reflections->size())
        {
          flux << std::endl << "  Reflections:" << std::endl
          << "  n";
          flux.width(9);
          flux << "h";
          flux.width(9);
          flux << "k";
          flux.width(9);
          flux << "l";
          flux << "  ";
          hkl::AxeList const & axeList = (*_reflections)[0]->get_geometry().get_axes();
          unsigned int n = axeList.size();
          for(i=0;i<n;i++)
            {
              flux.width(9);
              flux << axeList[i]->get_name();
            }
          flux << "  ";
          flux.width(9);
          flux << "lambda";
          flux << std::endl;
          std::vector<Reflection *>::const_iterator iter = _reflections->begin();
          std::vector<Reflection *>::const_iterator end = _reflections->end();
          n = 1;
          while(iter != end)
            {
              flux << "  " << n << **iter << std::endl;
              ++iter;
              ++n;
            }
        }
      else
        flux << std::endl << "  No reflection" << std::endl;
      return flux;
!!!189186.cpp!!!	toStream(inout flux : ostream) : ostream
      Object::toStream(flux);
      _lattice.toStream(flux);
      _reflections->toStream(flux);
      
      return flux;
!!!189314.cpp!!!	fromStream(inout flux : istream) : istream
      Object::fromStream(flux);
      _lattice.fromStream(flux);
      _reflections->fromStream(flux);
      
      return flux;
