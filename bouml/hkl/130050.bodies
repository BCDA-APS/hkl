class Axe
!!!153218.cpp!!!	Axe(in name : string, in description : string, in min : Value, in current : Value, in max : Value, in axe : svector, in direction : int)
  if ( !(axe == svector()) )
    _axe = axe;
  else
    HKLEXCEPTION("Can not create an Axe with a null axe vector.", "Please set a correct axe for this axe.");
  
  if (direction == 0)
    HKLEXCEPTION("Can not describe an Axe with a null direction", "chose between 1 or -1");
  if (direction > 0) _direction = 1;
  if (direction < 0) _direction = -1;
!!!155778.cpp!!!	get_axe() : svector
  return _axe;
!!!155906.cpp!!!	get_direction() : int
  return _direction;
!!!155522.cpp!!!	operator==(in axe : Axe) : bool
  return Parameter::operator==(axe)
    && _axe == axe._axe
    && _direction == axe._direction;
!!!155650.cpp!!!	asQuaternion() : Quaternion
  double const & angle = get_current().get_value() * _direction / 2.;
  double s_angle = sin(angle) / _axe.norm2();
  
  return Quaternion(cos(angle), s_angle * _axe.x(), s_angle * _axe.y(), s_angle * _axe.z());
!!!156034.cpp!!!	getDistance(in axe : Axe) : double
  double v1 = fmod(get_current().get_value(), 2 * constant::math::pi);
  double v2 = fmod(axe.get_current().get_value(), 2 * constant::math::pi);
  
  return acos(cos(v1-v2));
!!!156162.cpp!!!	printToStream(inout flux : ostream) : ostream
  flux << "\"" << get_name() << "\"";
  flux << " \"" << get_description() << "\"";
  flux << " " << _axe << ", ";
  flux << showpoint << showpos;
  flux << "Sens de rotation: " << _direction << ", "
       << "Minimum: " << get_min().get_value() *  constant::math::radToDeg << ", "
       << "Current: " << get_current().get_value() * constant::math::radToDeg << ", "
       << "Maximum: " << get_max().get_value() * constant::math::radToDeg << endl;
  flux << noshowpoint << noshowpos << dec;
  
  return flux;
!!!156290.cpp!!!	toStream(inout flux : ostream) : ostream
  Parameter::toStream(flux);
  _axe.toStream(flux);
  flux << " " << _direction << endl;
  
  return flux;
!!!156418.cpp!!!	fromStream(inout flux : istream) : istream
  Parameter::fromStream(flux);
  _axe.fromStream(flux);
  flux >> _direction;
  
  return flux;
