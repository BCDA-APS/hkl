format 29
"twoC" // geometry::twoC
  revision 4
  modified_by 2 "picca"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default shadow default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default shadow default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default drawing_language default shadow default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default shadow default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default shadow default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default shadow default
  show_activities default region_horizontally default drawing_language default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default shadow default
  show_infonote default drawing_language default
  
  cpp_h_dir "include/hkl/"
  cpp_src_dir "src/"
  cpp_namespace "hkl::geometry::twoC"
  classview 128258 "Class view5"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default shadow default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default shadow default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default shadow default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default drawing_language default shadow default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default shadow default
    show_activities default region_horizontally default drawing_language default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default shadow default
    show_infonote default drawing_language default
    
    associated_deployment_view deploymentview_ref 128386 // Deployment geometry::twoC
    class 132482 "Vertical"cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 133250 // <generalisation>
	relation 132866 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 133250 // <generalisation>
	  b parent class_ref 131714 // Geometry
      end

      attribute 134530 "_omega"
	protected type class_ref 130050 // Axe
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 134914 "_tth"
	protected type class_ref 130050 // Axe
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      operation 173058 "Vertical"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} :
  Geometry(\"2 circles\", \"The Cristal beamline (synchrotron-soleil) france diffractometer.\") 
{
  ${body}}
"
	
	
	comment "/**
 *  @brief Default constructor
 */"
      end

      operation 173186 "Vertical"
	public explicit_return_type ""
	nparams 2
	  param in name "omega" explicit_type "double"
	  param in name "tth" explicit_type "double"
	cpp_decl "    ${description}${inline}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${volatile}${throw} :
  Geometry(\"2 circles\", \"The Cristal beamline (synchrotron-soleil) france diffractometer.\") 
{
  ${body}}
"
	
	
	comment "/**
 *  @brief Another constructor.
 *  @param ${p0} the first angle value.
 *  @param ${p1} the second angle value.
 */"
      end

      operation 213762 "~Vertical"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} 
{
  ${body}}
"
	
	
      end

      operation 173314 "Vertical"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "geometry" type class_ref 132482 // Vertical
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} :
  Geometry(geometry)
{
  ${body}}
"
	
	
	comment "/**
 * @brief Copy Constructor.
 */"
      end

      operation 173442 "operator="
	public return_type class_ref 132482 // Vertical
	nparams 1
	  param in name "geometry" type class_ref 132482 // Vertical
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Assign a geometry to another one.
 * @param ${p0} The ${t0} to assign.
 * @return the assigned ${class}.
 */"
      end

      operation 173570 "omega"
	public return_type class_ref 130050 // Axe
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the _${name} Axe.
 * @return A pointer on the _${name} Axe.
 */"
      end

      operation 173954 "tth"
	public return_type class_ref 130050 // Axe
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the _${name} Axe.
 * @return A pointer on the _${name} Axe.
 */"
      end

      operation 174082 "omega"
	const public return_type class_ref 130050 // Axe
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the _${name} Axe.
 * @return A pointer on the _${name} Axe.
 */"
      end

      operation 174466 "tth"
	const public return_type class_ref 130050 // Axe
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the _${name} Axe.
 * @return A pointer on the _${name} Axe.
 */"
      end

      operation 174594 "setAngles"
	public explicit_return_type "void"
	nparams 2
	  param in name "omega" explicit_type "double"
	  param in name "tth" explicit_type "double"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Set the angles of the eulerian4CD::Vertical geometry. 
 * @param ${p0} The value of the \"omega\" Axe.
 * @param ${p1} The value of the \"2theta\" Axe.
 */"
      end

      operation 174722 "setFromGeometry"
	public explicit_return_type "void"
	nparams 2
	  param in name "geometry" type class_ref 131842 // Vertical
	  param in name "strict" explicit_type "bool"
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Set an eulerian4C::Vertical Geometry from another Geometry.
 * @param ${p0} The ${t0}.
 * @param ${p1} false or true if we must not care of the strictness of the conversion.
 * @throw HKLException
 */"
      end

      operation 174850 "setFromGeometry"
	public explicit_return_type "void"
	nparams 2
	  param in name "geometry" type class_ref 132610 // Vertical
	  param in name "strict" explicit_type "bool"
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Set an eulerian4C::Vertical Geometry from another Geometry.
 * @param ${p0} The ${t0}.
 * @param ${p1} false or true if we must not care of the strictness of the conversion.
 * @throw HKLException
 */"
      end

      operation 174978 "setFromGeometry"
	public explicit_return_type "void"
	nparams 2
	  param in name "geometry" explicit_type "Eulerian6C"
	  param in name "strict" explicit_type "bool"
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Set an eulerian4C::Vertical Geometry from another Geometry.
 * @param ${p0} The ${t0}.
 * @param ${p1} false or true if we must not care of the strictness of the conversion.
 * @throw HKLException
 */"
      end

      operation 175106 "setFromGeometry"
	public explicit_return_type "void"
	nparams 2
	  param in name "geometry" explicit_type "Kappa6C"
	  param in name "strict" explicit_type "bool"
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Set an eulerian4C::Vertical Geometry from another Geometry.
 * @param ${p0} The ${t0}.
 * @param ${p1} false or true if we must not care of the strictness of the conversion.
 * @throw HKLException
 */"
      end
    end
  end

  deploymentview 128386 "Deployment geometry::twoC"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default
    artifact 130946 "geometry_twoC"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
#include \"geometry_eulerian4C.h\"
#include \"geometry_kappa4C.h\"
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 132482 // Vertical
      end
    end
  end
end
