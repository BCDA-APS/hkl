class Th2th
!!!204290.cpp!!!	Th2th(inout geometry : Geometry)
  // add all the PseudoAxes
    _th2th = new hkl::PseudoAxe("th2th", "domega = 1/2 * d2theta.", this);
    _pseudoAxes.push_back(_th2th);

    // add observer to observable
    _omega->add_observer(this);
    _tth->add_observer(this);

    // fill the relatedAxes;
    _relatedAxes.push_back(_omega);
    _relatedAxes.push_back(_tth);

    Th2th::connect();
    Th2th::update();
!!!204418.cpp!!!	~Th2th()
      delete _th2th;
!!!204546.cpp!!!	initialize() : void
      _omega0 = _omega->get_current().get_value();
      _tth0 = _tth->get_current().get_value();
      _initialized = true;
      Th2th::update();
!!!204674.cpp!!!	update() : void
    if (_connected)
      {
        // this pseudoAxe is always readable
        // Compute the min and max part of the PseudoAxe.
        double omega_min = _omega->get_min().get_value();
        double omega_max = _omega->get_max().get_value();

        double min = _tth->get_min().get_value();
        if ((_omega0 - omega_min) < (_tth0 - min) / 2.)
            min = _tth0 + (omega_min - _omega0) * 2.;

        double max = _tth->get_max().get_value();
        if ((omega_max - _omega0) < (max - _tth0) / 2.)
            max = _tth0 + (omega_max - _omega0) * 2.;

        // compute the new current and consign value
        double current = _tth->get_current().get_value();
        double consign = _tth->get_consign().get_value();

        this->set_pseudoAxe(_th2th, min, current, consign, max);

        //now compute the writabilility
        double omega_c = _omega->get_consign().get_value();
        double tth_c = _tth->get_consign().get_value();
        if (_initialized && fabs(omega_c - _omega0 - (tth_c - _tth0) / 2) < constant::math::epsilon)
            _writable = true;
        else
            _writable = false;
      }
!!!204802.cpp!!!	set() : void
      if (_initialized)
        {
          // get the write part of the pseudoAxa and set the real axes.
          double const & tth = _th2th->get_consign().get_value();
          double omega = _omega0 + (tth - _tth0) / 2.;

          // unconnect the update function to avoid computation for each set_current
          Th2th::unconnect();
          _omega->set_consign(omega);
          _tth->set_consign(tth);
          Th2th::connect();
          Th2th::update();
        }
      else
        {
          HKLEXCEPTION("Can not write on un uninitialized pseudoAxe", "Please initialize it.");
        }
!!!204930.cpp!!!	toStream(inout flux : ostream) : ostream
      PseudoAxeEngineTemp<hkl::twoC::vertical::Geometry>::toStream(flux);
      flux << " " << _omega0;
      flux << " " << _tth0;
      
      return flux;
!!!205058.cpp!!!	fromStream(inout flux : istream) : istream
      PseudoAxeEngineTemp<hkl::twoC::vertical::Geometry>::fromStream(flux);
      flux >> _omega0 >> _tth0;
      
      return flux;
