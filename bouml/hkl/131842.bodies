class Geometry
!!!170754.cpp!!!	Geometry()
    _source.setDirection(svector(1,0,0));

    // add the sample holder
    hkl::Holder * holder = _holders.add();
    _omega = holder->add_rotation("omega", svector(0., -1., 0.));
    _chi = holder->add_rotation("chi", svector(1, 0., 0.));
    _phi = holder->add_rotation("phi", svector(0., -1., 0.));

    // add the detector holder;
    holder = _holders.add();
    _tth = holder->add_rotation("tth", svector(0., -1., 0.));
!!!171266.cpp!!!	Geometry(in omega : double, in chi : double, in phi : double, in tth : double)
    _source.setDirection(svector(1,0,0));

    // add the sample holder
    hkl::Holder * holder = _holders.add();
    _omega = holder->add_rotation("omega", svector(0., -1., 0.));
    _chi = holder->add_rotation("chi", svector(1, 0., 0.));
    _phi = holder->add_rotation("phi", svector(0., -1., 0.));

    // add the detector holder;
    holder = _holders.add();
    _tth = holder->add_rotation("tth", svector(0., -1., 0.));

    _omega->set_current(omega);
    _chi->set_current(chi);
    _phi->set_current(phi);
    _tth->set_current(tth);

    _omega->set_consign(omega);
    _chi->set_consign(chi);
    _phi->set_consign(phi);
    _tth->set_consign(tth);
!!!171010.cpp!!!	Geometry(in geometry : Geometry)
    _omega = static_cast<hkl::axe::Rotation *>(_holders.axes()["omega"]);
    _chi = static_cast<hkl::axe::Rotation *>(_holders.axes()["chi"]);
    _phi = static_cast<hkl::axe::Rotation *>(_holders.axes()["phi"]);
    _tth = static_cast<hkl::axe::Rotation *>(_holders.axes()["tth"]);
!!!171394.cpp!!!	omega() : Rotation
    return _omega;
!!!171522.cpp!!!	chi() : Rotation
    return _chi;
!!!171650.cpp!!!	phi() : Rotation
    return _phi;
!!!171778.cpp!!!	tth() : Rotation
    return _tth;
!!!172546.cpp!!!	omega() : Rotation
    return _omega;
!!!172674.cpp!!!	chi() : Rotation
    return _chi;
!!!172802.cpp!!!	phi() : Rotation
    return _phi;
!!!172930.cpp!!!	tth() : Rotation
    return _tth;
!!!171906.cpp!!!	setAngles(in omega : double, in chi : double, in phi : double, in tth : double) : void
    _omega->set_current(omega);
    _chi->set_current(chi);
    _phi->set_current(phi);
    _tth->set_current(tth);
!!!172034.cpp!!!	setFromGeometry(in geometry : Geometry, in strict : bool) : void
    // update the source
    _source = geometry.get_source();

    if (strict)
      {
        _chi->set_current(0);
        _phi->set_current(0);

        _chi->set_consign(0);
        _phi->set_consign(0);
      }
    _omega->set_current(geometry.omega()->get_current());
    _tth->set_current(geometry.tth()->get_current());

    _omega->set_consign(geometry.omega()->get_consign());
    _tth->set_consign(geometry.tth()->get_consign());
!!!172162.cpp!!!	setFromGeometry(in geometry : Geometry, in strict : bool) : void
  // update the source
    _source = geometry.get_source();

    double const & alpha = geometry.get_alpha();

    // the current part
    double const & komega = geometry.komega()->get_current().get_value();
    double const & kappa = geometry.kappa()->get_current().get_value();
    double const & kphi = geometry.kphi()->get_current().get_value();
    double omega, chi, phi;
    hkl::kappa_to_eulerian(komega, kappa, kphi, alpha, omega, chi, phi);

    _omega->set_current(omega);
    _chi->set_current(chi);
    _phi->set_current(phi);
    _tth->set_current(geometry.tth()->get_current());

    // the consign part
    double const & komega_c = geometry.komega()->get_consign().get_value();
    double const & kappa_c = geometry.kappa()->get_consign().get_value();
    double const & kphi_c = geometry.kphi()->get_consign().get_value();
    hkl::kappa_to_eulerian(komega_c, kappa_c, kphi_c, alpha, omega, chi, phi);

    _omega->set_consign(omega);
    _chi->set_consign(chi);
    _phi->set_consign(phi);
    _tth->set_consign(geometry.tth()->get_consign());
!!!172290.cpp!!!	setFromGeometry(in geometry : Geometry, in strict : bool) : void
    if(strict)
      {
        if (geometry.gamma()->get_current() != 0
            || geometry.mu()->get_current() != 0)
          {
            HKLEXCEPTION("\"gamma\" and/or \"mu\" current values are wrong",
                         "\"gamma\" = \"mu\" current values must be set to zero");
          }
        else
          {
            if (geometry.gamma()->get_consign() != 0
                || geometry.mu()->get_consign() != 0)
              {
                HKLEXCEPTION("\"gamma\" and/or \"mu\" consign values are wrong",
                             "\"gamma\" = \"mu\" consign values must be set to zero");
              }
          }
      }
    _source = geometry.get_source();

    _omega->set_current(geometry.omega()->get_current());
    _chi->set_current(geometry.chi()->get_current());
    _phi->set_current(geometry.phi()->get_current());
    _tth->set_current(geometry.delta()->get_current());

    _omega->set_consign(geometry.omega()->get_consign());
    _chi->set_consign(geometry.chi()->get_consign());
    _phi->set_consign(geometry.phi()->get_consign());
    _tth->set_consign(geometry.delta()->get_consign());
!!!172418.cpp!!!	setFromGeometry(in geometry : Geometry, in strict : bool) : void
    if(strict)
      {
        if (geometry.gamma()->get_current() != 0
            || geometry.mu()->get_current() != 0)
          {
            HKLEXCEPTION("\"gamma\" and/or \"mu\" current values are wrong",
                         "\"gamma\" = \"mu\" current values must be set to zero");
          }
        else
          {
            if (geometry.gamma()->get_consign() != 0
                || geometry.mu()->get_consign() != 0)
              {
                HKLEXCEPTION("\"gamma\" and/or \"mu\" consign values are wrong",
                             "\"gamma\" = \"mu\" consign values must be set to zero");
              }
          }
      }
    _source = geometry.get_source();

    // update the current values
    double const & alpha = geometry.get_alpha();
    double const & komega = geometry.komega()->get_current().get_value();
    double const & kappa = geometry.kappa()->get_current().get_value();
    double const & kphi = geometry.kphi()->get_current().get_value();
    double omega, chi, phi;
    hkl::kappa_to_eulerian(komega, kappa, kphi, alpha, omega, chi, phi);

    _omega->set_current(omega);
    _chi->set_current(chi);
    _phi->set_current(phi);
    _tth->set_current(geometry.delta()->get_current());

    // update the consign values
    double const & komega_c = geometry.komega()->get_consign().get_value();
    double const & kappa_c = geometry.kappa()->get_consign().get_value();
    double const & kphi_c = geometry.kphi()->get_consign().get_value();
    hkl::kappa_to_eulerian(komega_c, kappa_c, kphi_c, alpha, omega, chi, phi);

    _omega->set_consign(omega);
    _chi->set_consign(chi);
    _phi->set_consign(phi);
    _tth->set_consign(geometry.delta()->get_consign());
