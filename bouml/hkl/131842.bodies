class Geometry
!!!170754.cpp!!!	Geometry()
    _source.setDirection(svector(1,0,0));

    // add the sample holder
    hkl::Holder * holder = _holders.add();
    _omega = holder->add_rotation("omega", svector(0., -1., 0.));
    _chi = holder->add_rotation("chi", svector(1, 0., 0.));
    _phi = holder->add_rotation("phi", svector(0., -1., 0.));

    // add the detector holder;
    holder = _holders.add();
    _tth = holder->add_rotation("tth", svector(0., -1., 0.));
!!!171266.cpp!!!	Geometry(in omega : double, in chi : double, in phi : double, in tth : double)
    _source.setDirection(svector(1,0,0));

    // add the sample holder
    hkl::Holder * holder = _holders.add();
    _omega = holder->add_rotation("omega", svector(0., -1., 0.));
    _chi = holder->add_rotation("chi", svector(1, 0., 0.));
    _phi = holder->add_rotation("phi", svector(0., -1., 0.));

    // add the detector holder;
    holder = _holders.add();
    _tth = holder->add_rotation("tth", svector(0., -1., 0.));

    _omega->set_current(omega);
    _chi->set_current(chi);
    _phi->set_current(phi);
    _tth->set_current(tth);
!!!171010.cpp!!!	Geometry(in geometry : Geometry)
    _omega = static_cast<hkl::axe::Rotation *>(_holders.axes()["omega"]);
    _chi = static_cast<hkl::axe::Rotation *>(_holders.axes()["chi"]);
    _phi = static_cast<hkl::axe::Rotation *>(_holders.axes()["phi"]);
    _tth = static_cast<hkl::axe::Rotation *>(_holders.axes()["tth"]);
!!!171394.cpp!!!	omega() : Rotation
    return _omega;
!!!171522.cpp!!!	chi() : Rotation
    return _chi;
!!!171650.cpp!!!	phi() : Rotation
    return _phi;
!!!171778.cpp!!!	tth() : Rotation
    return _tth;
!!!172546.cpp!!!	omega() : Rotation
    return _omega;
!!!172674.cpp!!!	chi() : Rotation
    return _chi;
!!!172802.cpp!!!	phi() : Rotation
    return _phi;
!!!172930.cpp!!!	tth() : Rotation
    return _tth;
!!!171906.cpp!!!	setAngles(in omega : double, in chi : double, in phi : double, in tth : double) : void
    _omega->set_current(omega);
    _chi->set_current(chi);
    _phi->set_current(phi);
    _tth->set_current(tth);
!!!172034.cpp!!!	setFromGeometry(in geometry : Geometry, in strict : bool) : void
      // update the source
      _source = geometry.get_source();
      
      if (strict)
        {
          _chi->set_current(0);
          _phi->set_current(0);
        }
      _omega->set_current(geometry.omega()->get_current().get_value());
      _tth->set_current(geometry.tth()->get_current().get_value());
!!!172162.cpp!!!	setFromGeometry(in geometry : Geometry, in strict : bool) : void
      // update the source
      _source = geometry.get_source();
     
      double const & alpha = geometry.get_alpha();
      double const & komega = geometry.komega()->get_current().get_value();
      double const & kappa = geometry.kappa()->get_current().get_value();
      double const & kphi = geometry.kphi()->get_current().get_value();
      double omega, chi, phi;
      hkl::kappa_to_eulerian(komega, kappa, kphi, alpha, omega, chi, phi);
      
      _omega->set_current(omega);
      _chi->set_current(chi);
      _phi->set_current(phi);
      _tth->set_current(geometry.tth()->get_current());
!!!172290.cpp!!!	setFromGeometry(in geometry : Geometry, in strict : bool) : void
      // update the source
      _source = geometry.get_source();
      
      if ((fabs(geometry.gamma()->get_current().get_value()) < constant::math::epsilon
           && fabs(geometry.mu()->get_current().get_value()) < constant::math::epsilon) || !strict)
        {
          _omega->set_current(geometry.omega()->get_current());
          _chi->set_current(geometry.chi()->get_current());
          _phi->set_current(geometry.phi()->get_current());
          _tth->set_current(geometry.delta()->get_current());
        }
      else
        HKLEXCEPTION("\"gamma\" and/or \"mu\" axe(s) are wrong",
                     "\"gamma\" = \"mu\" must be set to zero");
!!!172418.cpp!!!	setFromGeometry(in geometry : Geometry, in strict : bool) : void
      // update the source
      _source = geometry.get_source();
      
      if ((fabs(geometry.gamma()->get_current().get_value()) < constant::math::epsilon
           && fabs(geometry.mu()->get_current().get_value()) < constant::math::epsilon) || !strict)
        {
          double const & alpha = geometry.get_alpha();
          double const & komega = geometry.komega()->get_current().get_value();
          double const & kappa = geometry.kappa()->get_current().get_value();
          double const & kphi = geometry.kphi()->get_current().get_value();
          double omega, chi, phi;
          hkl::kappa_to_eulerian(komega, kappa, kphi, alpha, omega, chi, phi);

          _omega->set_current(omega);
          _chi->set_current(chi);
          _phi->set_current(phi);
          _tth->set_current(geometry.delta()->get_current());
        }
      else
        HKLEXCEPTION("\"gamma\" and/or \"mu\" axe(s) are wrong",
                     "\"gamma\" = \"mu\" must be set to zero");
