class Geometry
!!!170754.cpp!!!	Geometry()
      _source.setDirection(svector(1,0,0));
     
      _omega = new hkl::axe::Rotation("omega", "1st sample axe", -180 * constant::math::degToRad, 0, 180 * constant::math::degToRad, svector(0., -1., 0.));
      _chi = new hkl::axe::Rotation("chi", "2nd sample axe", -180 * constant::math::degToRad, 0, 180 * constant::math::degToRad, svector(1., 0., 0.));
      _phi = new hkl::axe::Rotation("phi", "3rd sample axe", -180 * constant::math::degToRad, 0, 180 * constant::math::degToRad, svector(0., -1., 0.));
      _tth = new hkl::axe::Rotation("2theta", "Detector axe", -180 * constant::math::degToRad, 0, 180 * constant::math::degToRad, svector(0., -1., 0.));
  
      this->addSampleAxe(_omega);
      this->addSampleAxe(_chi);
      this->addSampleAxe(_phi);
      this->addDetectorAxe(_tth);
!!!171266.cpp!!!	Geometry(in omega : double, in chi : double, in phi : double, in tth : double)
      _source.setDirection(svector(1,0,0));
      
      _omega = new hkl::axe::Rotation("omega", "1st sample axe", -180 * constant::math::degToRad, omega, 180 * constant::math::degToRad, svector(0., -1., 0.));
      _chi = new hkl::axe::Rotation("chi", "2nd sample axe", -180 * constant::math::degToRad, chi, 180 * constant::math::degToRad, svector(1., 0., 0.));
      _phi = new hkl::axe::Rotation("phi", "3rd sample axe", -180 * constant::math::degToRad, phi, 180 * constant::math::degToRad, svector(0., -1., 0.));
      _tth = new hkl::axe::Rotation("2theta", "Detector axe", -180 * constant::math::degToRad, tth, 180 * constant::math::degToRad, svector(0., -1., 0.));
  
      this->addSampleAxe(_omega);
      this->addSampleAxe(_chi);
      this->addSampleAxe(_phi);
      this->addDetectorAxe(_tth);
!!!213634.cpp!!!	~Geometry()
    delete _omega;
    delete _chi;
    delete _phi;
    delete _tth;
!!!171010.cpp!!!	Geometry(in geometry : Geometry)
      _omega = static_cast<hkl::axe::Rotation *>(geometry._omega);
      _chi = static_cast<hkl::axe::Rotation *>(geometry._chi);
      _phi = static_cast<hkl::axe::Rotation *>(geometry._phi);
      _tth = static_cast<hkl::axe::Rotation *>(geometry._tth);
  
      this->addSampleAxe(_omega);
      this->addSampleAxe(_chi);
      this->addSampleAxe(_phi);
      this->addDetectorAxe(_tth);
!!!171394.cpp!!!	omega() : Rotation
      return _omega;
!!!171522.cpp!!!	chi() : Rotation
      return _chi;
!!!171650.cpp!!!	phi() : Rotation
      return _phi;
!!!171778.cpp!!!	tth() : Rotation
      return _tth;
!!!172546.cpp!!!	omega() : Rotation
      return _omega;
!!!172674.cpp!!!	chi() : Rotation
      return _chi;
!!!172802.cpp!!!	phi() : Rotation
      return _phi;
!!!172930.cpp!!!	tth() : Rotation
      return _tth;
!!!171906.cpp!!!	setAngles(in omega : double, in chi : double, in phi : double, in tth : double) : void
      _omega->set_current(omega);
      _chi->set_current(chi);
      _phi->set_current(phi);
      _tth->set_current(tth);
!!!172034.cpp!!!	setFromGeometry(in geometry : Geometry, in strict : bool) : void
      // update the source
      _source = geometry.get_source();
      
      if (strict)
        {
          _chi->set_current(0);
          _phi->set_current(0);
        }
      _omega->set_current(geometry.omega()->get_current().get_value());
      _tth->set_current(geometry.tth()->get_current().get_value());
!!!172162.cpp!!!	setFromGeometry(in geometry : Geometry, in strict : bool) : void
      // update the source
      _source = geometry.get_source();
      
      double const & alpha = geometry.get_alpha();
      double const & komega = geometry.komega()->get_current().get_value();
      double const & kappa = geometry.kappa()->get_current().get_value();
      double const & kphi = geometry.kphi()->get_current().get_value();
      double p = atan(tan(kappa/2.) * cos(alpha));
      
      _omega->set_current(komega + p + constant::math::pi/2.);
      _chi->set_current(-2 * asin(sin(kappa/2.) * sin(alpha)));
      _phi->set_current(kphi + p - constant::math::pi/2.);
      _tth->set_current(geometry.tth()->get_current());
!!!172290.cpp!!!	setFromGeometry(in geometry : Geometry, in strict : bool) : void
      // update the source
      _source = geometry.get_source();
      
      if ((fabs(geometry.gamma()->get_current().get_value()) < constant::math::epsilon
           && fabs(geometry.mu()->get_current().get_value()) < constant::math::epsilon) || !strict)
        {
          _omega->set_current(geometry.omega()->get_current());
          _chi->set_current(geometry.chi()->get_current());
          _phi->set_current(geometry.phi()->get_current());
          _tth->set_current(geometry.delta()->get_current());
        }
      else
        HKLEXCEPTION("\"gamma\" and/or \"mu\" axe(s) are wrong",
                     "\"gamma\" = \"mu\" must be set to zero");
!!!172418.cpp!!!	setFromGeometry(in geometry : Geometry, in strict : bool) : void
      // update the source
      _source = geometry.get_source();
      
      if ((fabs(geometry.gamma()->get_current().get_value()) < constant::math::epsilon
           && fabs(geometry.mu()->get_current().get_value()) < constant::math::epsilon) || !strict)
        {
          double const & alpha = geometry.get_alpha();
          double const & komega = geometry.komega()->get_current().get_value();
          double const & kappa = geometry.kappa()->get_current().get_value();
          double const & kphi = geometry.kphi()->get_current().get_value();
      
          _omega->set_current(komega + atan(tan(kappa/2.) * cos(alpha)) + constant::math::pi/2.);
          _chi->set_current(-2 * asin(sin(kappa/2.) * sin(alpha)));
          _phi->set_current(kphi + atan(tan(kappa/2.) * cos(alpha)) - constant::math::pi/2.);
          _tth->set_current(geometry.delta()->get_current());
        }
      else
        HKLEXCEPTION("\"gamma\" and/or \"mu\" axe(s) are wrong",
                     "\"gamma\" = \"mu\" must be set to zero");
