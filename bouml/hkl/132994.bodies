class Geometry
!!!180866.cpp!!!	Geometry(in alpha : double)
      _source.setDirection(svector(1,0,0));
     
      // add the sample holder
      hkl::Holder * holder = _holders.add();
      _mu = holder->add_rotation("mu", hkl::svector(0., 0., 1.));
      _komega = holder->add_rotation("komega", hkl::svector(0., -1., 0.));
      _kappa = holder->add_rotation("kappa", hkl::svector(0., -cos(_alpha), -sin(_alpha)));
      _kphi = holder->add_rotation("kphi", hkl::svector(0., -1., 0.));

      // add the detector holder
      holder = _holders.add();
      _gamma = holder->add_rotation("gamma", hkl::svector(0., 0., 1.));
      _delta = holder->add_rotation("delta", hkl::svector(0., -1., 0.));
!!!180994.cpp!!!	Geometry(in alpha : double, in mu : double, in komega : double, in kappa : double, in kphi : double, in gamma : double, in delta : double)
      _source.setDirection(svector(1,0,0));
     
      // add the sample holder
      hkl::Holder * holder = _holders.add();
      _mu = holder->add_rotation("mu", hkl::svector(0., 0., 1.));
      _komega = holder->add_rotation("komega", hkl::svector(0., -1., 0.));
      _kappa = holder->add_rotation("kappa", hkl::svector(0., -cos(_alpha), -sin(_alpha)));
      _kphi = holder->add_rotation("kphi", hkl::svector(0., -1., 0.));

      // add the detector holder
      holder = _holders.add();
      _gamma = holder->add_rotation("gamma", hkl::svector(0., 0., 1.));
      _delta = holder->add_rotation("delta", hkl::svector(0., -1., 0.));

      this->set_angles(mu, komega, kappa, kphi, gamma, delta);
      this->set_angles_consign(mu, komega, kappa, kphi, gamma, delta);
!!!181122.cpp!!!	Geometry(in geometry : Geometry)
      _mu = static_cast<hkl::axe::Rotation *>(_holders.axes()["mu"]);
      _komega = static_cast<hkl::axe::Rotation *>(_holders.axes()["komega"]);
      _kappa = static_cast<hkl::axe::Rotation *>(_holders.axes()["kappa"]);
      _kphi = static_cast<hkl::axe::Rotation *>(_holders.axes()["kphi"]);
      _gamma = static_cast<hkl::axe::Rotation *>(_holders.axes()["gamma"]);
      _delta = static_cast<hkl::axe::Rotation *>(_holders.axes()["delta"]);
!!!181378.cpp!!!	mu() : Rotation
      return _mu;
!!!181506.cpp!!!	komega() : Rotation
      return _komega;
!!!181634.cpp!!!	kappa() : Rotation
      return _kappa;
!!!181762.cpp!!!	kphi() : Rotation
      return _kphi;
!!!181890.cpp!!!	gamma() : Rotation
      return _gamma;
!!!182018.cpp!!!	delta() : Rotation
      return _delta;
!!!182146.cpp!!!	mu() : Rotation
      return _mu;
!!!182274.cpp!!!	komega() : Rotation
      return _komega;
!!!182402.cpp!!!	kappa() : Rotation
      return _kappa;
!!!182530.cpp!!!	kphi() : Rotation
      return _kphi;
!!!182658.cpp!!!	gamma() : Rotation
      return _gamma;
!!!182786.cpp!!!	delta() : Rotation
      return _delta;
!!!182914.cpp!!!	set_angles(in mu : double, in komega : double, in kappa : double, in kphi : double, in gamma : double, in delta : double) : void
      _mu->set_current(mu);
      _komega->set_current(komega);
      _kappa->set_current(kappa);
      _kphi->set_current(kphi);
      _gamma->set_current(gamma);
      _delta->set_current(delta);
!!!265218.cpp!!!	set_angles_consign(in mu : double, in komega : double, in kappa : double, in kphi : double, in gamma : double, in delta : double) : void
    _mu->set_consign(mu);
    _komega->set_consign(komega);
    _kappa->set_consign(kappa);
    _kphi->set_consign(kphi);
    _gamma->set_consign(gamma);
    _delta->set_consign(delta);
!!!183042.cpp!!!	setFromGeometry(in geometry : Geometry, in strict : bool) : void
  // update the source
    _source = geometry.get_source();

    if (strict)
      {
        _mu->set_current(0);
        _gamma->set_current(0);
        _kappa->set_current(0);
        _kphi->set_current(0);

        _mu->set_consign(0);
        _gamma->set_consign(0);
        _kappa->set_consign(0);
        _kphi->set_consign(0);
      }
    _komega->set_current(geometry.omega()->get_current());
    _delta->set_current(geometry.tth()->get_current());

    _komega->set_consign(geometry.omega()->get_consign());
    _delta->set_consign(geometry.tth()->get_consign());
!!!183170.cpp!!!	setFromGeometry(in geometry : Geometry, in strict : bool) : void
    double const & omega = geometry.omega()->get_current().get_value();
    double const & chi = geometry.chi()->get_current().get_value();
    double const & phi = geometry.phi()->get_current().get_value();
    double komega, kappa, kphi;
    // the next line can throw an exception so the geometry modification must me deport after.
    hkl::eulerian_to_kappa(omega, chi, phi, _alpha, komega, kappa, kphi); 

    double const & omega_c = geometry.omega()->get_consign().get_value();
    double const & chi_c = geometry.chi()->get_consign().get_value();
    double const & phi_c = geometry.phi()->get_consign().get_value();
    double komega_c, kappa_c, kphi_c;
    // the next line can throw an exception so the geometry modification must me deport after.
    hkl::eulerian_to_kappa(omega_c, chi_c, phi_c, _alpha, komega_c, kappa_c, kphi_c); 

    // update the source
    _source = geometry.get_source();

    if (strict)
      {
        _mu->set_current(0);
        _gamma->set_current(0);

        _mu->set_consign(0);
        _gamma->set_consign(0);
      }
    _komega->set_current(komega);
    _kappa->set_current(kappa);
    _kphi->set_current(kphi);
    _delta->set_current(geometry.tth()->get_current());

    _komega->set_consign(komega_c);
    _kappa->set_consign(kappa_c);
    _kphi->set_consign(kphi_c);
    _delta->set_consign(geometry.tth()->get_consign());
!!!183298.cpp!!!	setFromGeometry(in geometry : Geometry, in strict : bool) : void
  // update the source
    _source = geometry.get_source();

    if (strict)
      {
        _mu->set_current(0);
        _gamma->set_current(0);

        _mu->set_consign(0);
        _gamma->set_consign(0);
      }
    _komega->set_current(geometry.komega()->get_current());
    _kappa->set_current(geometry.kappa()->get_current());
    _kphi->set_current(geometry.kphi()->get_current());
    _delta->set_current(geometry.tth()->get_current());

    _komega->set_consign(geometry.komega()->get_consign());
    _kappa->set_consign(geometry.kappa()->get_consign());
    _kphi->set_consign(geometry.kphi()->get_consign());
    _delta->set_consign(geometry.tth()->get_consign());
!!!183426.cpp!!!	setFromGeometry(in geometry : Geometry, in strict : bool) : void
      double const & omega = geometry.omega()->get_current().get_value();
      double const & phi = geometry.phi()->get_current().get_value();
      double const & chi = geometry.chi()->get_current().get_value();
      double komega, kappa, kphi;
      hkl::eulerian_to_kappa(omega, chi, phi, _alpha, komega, kappa, kphi); 

      double const & omega_c = geometry.omega()->get_consign().get_value();
      double const & phi_c = geometry.phi()->get_consign().get_value();
      double const & chi_c = geometry.chi()->get_consign().get_value();
      double komega_c, kappa_c, kphi_c;
      hkl::eulerian_to_kappa(omega_c, chi_c, phi_c, _alpha, komega_c, kappa_c, kphi_c); 

      // update the source
      _source = geometry.get_source();

      _mu->set_current(geometry.mu()->get_current());
      _komega->set_current(komega);
      _kappa->set_current(kappa);
      _kphi->set_current(kphi);
      _gamma->set_current(geometry.gamma()->get_current());
      _delta->set_current(geometry.delta()->get_current());

      _mu->set_consign(geometry.mu()->get_consign());
      _komega->set_consign(komega_c);
      _kappa->set_consign(kappa_c);
      _kphi->set_consign(kphi_c);
      _gamma->set_consign(geometry.gamma()->get_consign());
      _delta->set_consign(geometry.delta()->get_consign());
