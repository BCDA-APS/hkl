class PseudoAxe
!!!229762.cpp!!!	relatedAxes() : AxeList
      return _engine->relatedAxes();
!!!195458.cpp!!!	initialize() : void
      _engine->initialize();
!!!195586.cpp!!!	uninitialize() : void
      _engine->uninitialize();
!!!195714.cpp!!!	is_initialized() : bool
      return _engine->is_initialized();
!!!195842.cpp!!!	is_readable() : bool
      return _engine->is_readable();
!!!195970.cpp!!!	is_writable() : bool
      return _engine->is_writable();
!!!196098.cpp!!!	get_min() : Value
      if (_engine->is_readable())
        return _min;
      else
        {
          std::ostringstream reason;
          reason << "\"" << this->get_name() << "\" minimum value unreadable";
          HKLEXCEPTION(reason.str(), "initialize it");
        }
!!!196226.cpp!!!	get_current() : Value
      if (_engine->is_readable())
          return _current;
      else
        {
          std::ostringstream reason;
          reason << "\"" << this->get_name() << "\" current value unreadable";
          HKLEXCEPTION(reason.str(), "initialize it");
        }
!!!231426.cpp!!!	get_consign() : Value
      if(_engine->is_readable())
          return _consign;
      else
        {
          std::ostringstream reason;
          reason << "\"" << this->get_name() << "\" consign value unreadable";
          HKLEXCEPTION(reason.str(), "initialize it");
        }
!!!196354.cpp!!!	get_max() : Value
    if (_engine->is_readable())
        return _max;
    else
      {
        std::ostringstream reason;
          reason << "\"" << this->get_name() << "\" maximum value unreadable";
        HKLEXCEPTION(reason.str(), "initialize it");
      }
!!!196482.cpp!!!	set_consign(in value : Value) : void
  // get the _read min and max then check if writting the value is OK.
    if (_engine->is_writable())
      {
        if (value >= _min && value <= _max)
          {
            _consign.set_value(value.get_value());
            _engine->set();
          }
        else
          {
            std::ostringstream reason;
            reason << "\"" << this->get_name() << "\" can not set this consign " << value << " [" << _min << ", " << _max << "]";
            HKLEXCEPTION(reason.str(), "set a correct consign");
          }
      }
    else
      {
        std::ostringstream reason;
        reason << "\"" << this->get_name() << "\" unwritable";
        HKLEXCEPTION(reason.str(), "initialize it");
      }
!!!196610.cpp!!!	set_engine(inout engine : PseudoAxeEngine) : void
      _engine = engine;
!!!196738.cpp!!!	parameters() : ParameterList
      return _engine->parameters();
!!!196866.cpp!!!	operator==(in pseudoAxe : PseudoAxe) : bool
      return ObjectReadOnly::operator==(pseudoAxe)
             && _engine == pseudoAxe._engine;
!!!196994.cpp!!!	printToStream(inout flux : ostream) : ostream
      flux << "\"" << this->get_name() << "\" " << _current << ", " << _consign << " [" << _min << " : " << _max << "] " 
           << " (init : " << _engine->is_initialized() << ", readable : " << _engine->is_readable() << ", writable : " << _engine->is_writable() << ")";
      return flux;
