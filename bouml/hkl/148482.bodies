class Holder
!!!243714.cpp!!!	add(inout axe : Axe) : Axe
  std::string const & name = axe->get_name();

  // Is the axe in the axeList ?
  hkl::AxeList::iterator iter = _axes.begin();
  hkl::AxeList::iterator end = _axes.end();
  bool found_in_axeList = false;
  unsigned int idx = 0;
  while(iter != end && !found_in_axeList )
  {
    if ( (*iter)->get_name() == name) // same name -> check if axes are compatible
    {
      if ( **iter == *axe) // same axe -> check if axe in the holder ( in _axes)
      {
        std::vector<hkl::HolderRow>::iterator it = _rows.begin();
        std::vector<hkl::HolderRow>::iterator it_end = _rows.end();
        while(it != it_end)
        {
          if ( it->axe->get_name() == name) // yes -> exception
          {
              std::ostringstream description;
              description << "The axe \"" << name << "\" is already present in the holder";
              HKLEXCEPTION("Can not add two times the same axe",
                           description.str());
          }
          else // no -> add it
            ++it;
        }
        // not in the holder -> add it and check for memory leak
        hkl::HolderRow row = {NULL, idx};
        if (*iter == axe) // same pointer -> only add to the _axes.
          row.axe = axe;
        else // different pointer -> keep the one from the holder.
          row.axe = *iter;
        _rows.push_back(row);
        return row.axe;
      }
      else // different axe with the same name -> throw exception
      {
        std::ostringstream description;
        description << "Same name but different axe." << endl
          << "holder axe : " << **iter;
        description << "Axe to add : " << *axe;
        HKLEXCEPTION("Can not add this Axe to the sample axe list",
            description.str());
      }
    }
    else // not same name -> next axe in the axeList
    {
      ++idx; // compute the index of the next axe in the _axeList.
      ++iter;
    }
  }
  // Axe not present in the axeList so add it to the axeList and the _axes.
  hkl::HolderRow row = { axe, _axes.size() };
  _axes.push_back(axe);
  _rows.push_back(row);
  return row.axe;
!!!245250.cpp!!!	apply(inout q : Quaternion) : Quaternion
  std::vector<hkl::HolderRow>::const_iterator iter = _rows.begin();
  std::vector<hkl::HolderRow>::const_iterator end = _rows.begin();
  while (iter != end)
  {
    iter->axe->apply(q);
    ++iter;
  }

  return q;
!!!245122.cpp!!!	set_axes(inout axeList : AxeList) : void
  std::vector<hkl::HolderRow>::iterator iter = _rows.begin();
  std::vector<hkl::HolderRow>::iterator end = _rows.end();
  while(iter != end)
  {
    iter->axe = _axes[iter->idx];
    ++iter;
  }
!!!249986.cpp!!!	operator==(in holder : Holder) : bool
  if(_axes == holder._axes)
  {
    if (_rows.size() == holder._rows.size())
    {
      std::vector<hkl::HolderRow>::const_iterator iter = _rows.begin();
      std::vector<hkl::HolderRow>::const_iterator iter2 = holder._rows.begin();
      std::vector<hkl::HolderRow>::const_iterator end = _rows.end();
      while(iter != end)
      {
        if ( iter->axe != iter2->axe || iter->idx != iter2->idx)
          return false;
        ++iter;
      }
      return true;
    }
  }
  return false;
!!!245890.cpp!!!	printToStream(inout flux : ostream) : ostream
  flux << "  Axe List : " << &_axes << std::endl;
  flux << _axes << std::endl;
  flux << "  holder: (" << _rows.size() << ")" << endl;
  std::vector<hkl::HolderRow>::const_iterator iter = _rows.begin();
  std::vector<hkl::HolderRow>::const_iterator end = _rows.end();
  while(iter != end)
  {
    flux << *(iter->axe) << std::endl;
    ++iter;
  }

  return flux;
!!!249474.cpp!!!	toStream(inout flux : ostream) : ostream
  unsigned int size = _rows.size();
  flux << " " << size << std::endl;
  for(unsigned int i=0;i<_rows.size();i++)
    flux << " " << _rows[i].idx;
  flux << std::endl;
  return flux;
!!!249602.cpp!!!	fromStream(inout flux : istream) : istream
  // read the size of the _row whene the holder was save.
  unsigned int size;
  flux >> size;
  // check if size is compatible with the size of the actual holder.
  _rows.clear();
  for(unsigned int i=0;i<size;i++)
  {
    unsigned int idx;
    flux >> idx;
    // now update the row in the Axe Row
    hkl::HolderRow row = {_axes[idx], idx};
    _rows.push_back(row);
  }
  return flux;
