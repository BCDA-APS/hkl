class AxeList
!!!237954.cpp!!!	push_back(inout axe : Axe) : void
  _axes.push_back(axe);
!!!254338.cpp!!!	has_axe(in name : string) : bool
  for(unsigned int i=0; i<_axes.size(); i++)
  {
    if (_axes[i]->get_name() == name)
      return true;
  }
  return false;
!!!238210.cpp!!!	size() : uint
      return _axes.size();
!!!248962.cpp!!!	get_distance(in axeList : AxeList) : double
  double distance = 0;
  std::vector<hkl::Axe *>::const_iterator iter1 = _axes.begin();
  std::vector<hkl::Axe *>::const_iterator end = _axes.end();
  std::vector<hkl::Axe *>::const_iterator iter2 = axeList.begin();
  while(iter1 != end)
  {
    distance += (*iter1)->get_distance(**iter2);
    ++iter1;
    ++iter2;
  }
  return distance;
!!!262146.cpp!!!	get_distance_consign(in axeList : AxeList) : double
    double distance = 0;
    std::vector<hkl::Axe *>::const_iterator iter1 = _axes.begin();
    std::vector<hkl::Axe *>::const_iterator end = _axes.end();
    std::vector<hkl::Axe *>::const_iterator iter2 = axeList.begin();
    while(iter1 != end)
    {
      distance += (*iter1)->get_distance_consign(**iter2);
      ++iter1;
      ++iter2;
    }
    return distance;
!!!238466.cpp!!!	operator[](in name : string) : Axe
      hkl::AxeList::iterator iter = _axes.begin();
      hkl::AxeList::iterator end = _axes.end();
      while(iter != end)
        {
          if ((*iter)->get_name() == name)
              return *iter;
          ++iter;
        }
  
      std::ostringstream reason;
      std::ostringstream description;
  
      reason << "Cannot find the hkl::Axe named : " << name << " in the hkl::AxeList";
      description << "Available axes are :";
      iter = _axes.begin();
      while(iter != end)
        {
          description << " \"" << (*iter)->get_name() << "\"";
          ++iter;
        }
  
      HKLEXCEPTION(reason.str(), description.str());
!!!242178.cpp!!!	operator[](in name : string) : Axe
      hkl::AxeList::const_iterator iter = _axes.begin();
      hkl::AxeList::const_iterator end = _axes.end();
      while(iter != end)
        {
          if ((*iter)->get_name() == name)
              return *iter;
          ++iter;
        }
  
      std::ostringstream reason;
      std::ostringstream description;
  
      reason << "Cannot find the hkl::Axe named : " << name << " in the hkl::AxeList";
      description << "Available axes are :";
      iter = _axes.begin();
      while(iter != end)
        {
          description << " \"" << (*iter)->get_name() << "\"";
          ++iter;
        }
  
      HKLEXCEPTION(reason.str(), description.str());
!!!241794.cpp!!!	operator[](in idx : uint) : Axe
  return _axes[idx];
!!!241922.cpp!!!	operator[](in idx : uint) : Axe
  return _axes[idx];
!!!238594.cpp!!!	begin() : iterator
        return _axes.begin();
!!!238722.cpp!!!	end() : iterator
        return _axes.end();
!!!239618.cpp!!!	begin() : const_iterator
          return _axes.begin();
!!!239746.cpp!!!	end() : const_iterator
    return _axes.end();
!!!253186.cpp!!!	clear() : void
  _axes.clear();
!!!238850.cpp!!!	operator==(in axeList : AxeList) : bool
  if (_axes.size() != axeList._axes.size())
    return false;
  else
  {
    hkl::AxeList::const_iterator iter = _axes.begin();
    hkl::AxeList::const_iterator end = _axes.end();
    hkl::AxeList::const_iterator iter2 = axeList._axes.begin();
    while(iter != end)
    {
      if (!(**iter == **iter2))
        return false;
      ++iter;
      ++iter2;
    }
  }
  return true;
!!!238978.cpp!!!	printToStream(inout flux : ostream) : ostream
      hkl::AxeList::const_iterator iter = _axes.begin();
      hkl::AxeList::const_iterator end = _axes.end();
      while(iter != end)
        {
          flux << **iter << std::endl;
          ++iter;
        }
      return flux;
!!!239106.cpp!!!	toStream(inout flux : ostream) : ostream
      unsigned int nb_axes = _axes.size();
      flux << nb_axes << std::endl;
  
      hkl::AxeList::const_iterator iter = _axes.begin();
      hkl::AxeList::const_iterator end = _axes.end();
      while(iter != end)
        {
          (*iter)->toStream(flux);
          ++iter;
        }
  
      return flux;
!!!239234.cpp!!!	fromStream(inout flux : istream) : istream
      // check that both samples have the same size.
      unsigned int nb_axes;
      flux >> nb_axes;
      if (nb_axes != _axes.size())
          HKLEXCEPTION("Can not restore this AxeList", "Not the same number of Sample.");
      else
        {
          iterator iter = _axes.begin();
          iterator end = _axes.end();
          while(iter != end)
            {
              (*iter)->fromStream(flux);
              ++iter;
            }
        }
      return flux;
