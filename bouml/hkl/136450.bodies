class Q
!!!206082.cpp!!!	Q(inout geometry : Geometry)
      
      // add all the PseudoAxes
      _q = new PseudoAxe( "q", "domega = 1/2 * d2theta.", this);
      _pseudoAxes.push_back(_q);
      
      // add observer to observable
      _tth->add_observer(this);
      
      // fill the relatedAxes
      _relatedAxes.push_back(_tth);
      
      Q::connect();
      Q::update();
      
      // update the write part from the read part for the first time.
      _q->set_write_from_read();
!!!206210.cpp!!!	~Q()
      delete _q;
!!!206338.cpp!!!	initialize() : void
      _initialized = true;
      _writable = true;
      _q->set_write_from_read();
!!!206466.cpp!!!	update() : void
      if (_connected)
        {
          double lambda = _geometry.get_source().get_waveLength().get_value();
          double min = -2 * constant::physic::tau / lambda;
          double max = 2 * constant::physic::tau / lambda;
          double theta = _tth->get_current().get_value() / 2.;
          double q = 2 * constant::physic::tau * sin(theta) / lambda;
          this->set_pseudoAxe_read_part(_q, min, q, max);
        }
!!!206594.cpp!!!	set() : void
      if (_initialized)
        {
          double lambda = _geometry.get_source().get_waveLength().get_value();
          double tth = 2 * asin(_q->get_current_write().get_value() * lambda / (2 * constant::physic::tau));
          Q::unconnect();
          _tth->set_current(tth);
          Q::connect();
          Q::update();
        }
      else
        {
          HKLEXCEPTION("Can not write on un uninitialized pseudoAxe", "Please initialize it.");
        }
!!!206722.cpp!!!	toStream(inout flux : ostream) : ostream
      PseudoAxeEngineTemp<hkl::twoC::vertical::Geometry>::toStream(flux);
      
      return flux;
!!!206850.cpp!!!	fromStream(inout flux : istream) : istream
      PseudoAxeEngineTemp<hkl::twoC::vertical::Geometry>::fromStream(flux);
      
      return flux;
