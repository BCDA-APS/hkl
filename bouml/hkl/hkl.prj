format 29
"hkl"
  revision 8
  modified_by 2 "picca"
  cpp_root_dir "/home/picca/Projets/hkl/"


  
  // class settings
  default_attribute_visibility protected default_relation_visibility protected default_operation_visibility public
  //class diagram settings
  draw_all_relations yes hide_attributes no hide_operations no show_members_full_definition yes show_members_visibility yes package_name_in_tab yes class_drawing_mode class drawing_language uml show_context_mode namespace auto_label_position yes shadow yes
  //use case diagram settings
  package_name_in_tab no show_context no auto_label_position yes shadow yes
  //sequence diagram settings
  show_full_operations_definition no write_horizontally yes drawing_language uml shadow yes
  //collaboration diagram settings
  show_full_operations_definition no show_hierarchical_rank no write_horizontally yes drawing_language uml package_name_in_tab no show_context no shadow yes
  //object diagram settings
   write_horizontally yes package_name_in_tab no show_context no auto_label_position yes shadow yes
  //component diagram settings
  package_name_in_tab no show_context no auto_label_position yes shadow yes
  draw_component_as_icon no show_component_req_prov no show_component_rea no
  //deployment diagram settings
  package_name_in_tab no show_context no write_horizontally yes auto_label_position yes shadow yes
  draw_component_as_icon no show_component_req_prov no show_component_rea no
  //state diagram settings
  package_name_in_tab no show_context no auto_label_position yes write_trans_label_horizontally yes show_trans_definition no shadow yes
  show_activities yes region_horizontally yes drawing_language uml
  //activity diagram settings
  package_name_in_tab no show_context no show_opaque_action_definition no auto_label_position yes write_flow_label_horizontally no shadow yes
  show_infonote yes drawing_language c++
  
  class_color yellow duration_color transparent continuation_color gray note_color blue fragment_color transparent subject_color transparent usecase_color yellow package_color transparent component_color green artifact_color green deploymentnode_color gray state_color yellow stateaction_color transparent activity_color transparent activityregion_color transparent activityaction_color transparent parameterpin_color white 
  font_size 10
  diagram_format A4

  mark_for_import
  
  cpp_h_dir "include/hkl/"
  cpp_src_dir "src/"
  cpp_namespace "hkl"
  classview 128117 "class view hkl"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default shadow default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default shadow default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default shadow default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default drawing_language default shadow default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default shadow default
    show_activities default region_horizontally default drawing_language default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default shadow default
    show_infonote default drawing_language default
    
    associated_deployment_view deploymentview_ref 128060 // Deployment hkl
    comment "*
  @the base class of the hkl library"
    classdiagram 128188 "Diagram3"
      draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default shadow default
      size A0-Landscape
    end

    classdiagram 128002 "Diagram_source"
      draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default shadow default
      size A4
    end

    class 130050 "Axe"cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 130946 // <generalisation>
	relation 130690 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 130946 // <generalisation>
	  b parent class_ref 130178 // FitParameter
      end

      attribute 131202 "_axe"
	protected type class_ref 128002 // svector
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
	comment "/**
 * @brief the coordinates of the axe of rotation in a othonormal base.
 */ "
      end

      attribute 131330 "_direction"
	protected explicit_type "int"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
	comment "//!< rotation direction of the axe"
      end

      operation 153218 "Axe"
	public explicit_return_type ""
	nparams 7
	  param in name "name" type class_ref 129026 // string
	  param in name "description" type class_ref 129026 // string
	  param in name "min" type class_ref 128060 // Value
	  param in name "current" type class_ref 128060 // Value
	  param in name "max" type class_ref 128060 // Value
	  param in name "axe" type class_ref 128002 // svector
	  param in name "direction" explicit_type "int"
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}, const ${t4} & ${p4}, const ${t5} & ${p5}, ${t6} ${p6}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}, const ${t4} & ${p4}, const ${t5} & ${p5}, ${t6} ${p6}${)}${volatile}${throw} :
  FitParameter(${p0}, ${p1} , ${p2} , ${p3}, ${p4}, true, constant::math::epsilon) 
{
  ${body}}
"
	
	
	comment "/**
 * @brief constructor
 * @param ${p0} The name of the ${class}.
 * @param ${p1} The description of the ${class}.
 * @param ${p2} The minimum of the ${class}.
 * @param ${p3} The current position of the ${class}.
 * @param ${p4} The maximum value of the ${class}.
 * @param ${p5} The ${t5} ${class} rotation axe coordinates.
 * @param ${p6} +1 or -1 if the axe is a direct one or not.
 */
"
      end

      operation 155778 "get_axe"
	const public return_type class_ref 128002 // svector
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Return the ${class} axe of rotation coordinates.
 * @return The axe coordinates as a 3 elements vector.
 */"
      end

      operation 155906 "get_direction"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Return the axe rotation direction
 * \\return +1 if the sens of rotation is direct
 * -1 otherwise
 */"
      end

      operation 155522 "operator=="
	const public explicit_return_type "bool"
	nparams 1
	  param in name "axe" type class_ref 130050 // Axe
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * \\brief Are two ${class} equals ?
 * \\param ${p0} the ${class} to compare with.
 * \\return The comparison of the two ${class}.
 */"
      end

      operation 155650 "asQuaternion"
	const public return_type class_ref 128770 // Quaternion
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * @brief Get the ${class} as a Quaternion.
 * @return The Quaternion corresponding to the ${class}.
 */"
      end

      operation 156034 "getDistance"
	const public explicit_return_type "double"
	nparams 1
	  param in name "axe" type class_ref 130050 // Axe
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Compute the distance between two Axes.
 * @param axe The Axe to compute the distance from. 
 * @return The distance between the two axes.
 */"
      end

      operation 156162 "printToStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief print the ${class} into a flux
 * \\param flux The stream to print into.
 */"
      end

      operation 156290 "toStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Save the ${class} into a stream.
 * \\param flux the stream to save the ${class} into.
 * \\return The stream with the ${class}.
 */"
      end

      operation 156418 "fromStream"
	public explicit_return_type "istream"
	nparams 1
	  param inout name "flux" explicit_type "istream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Restore a ${class} from a stream.
 * \\param flux The stream containing the ${class} to restore.
 * @todo call update_observers or not ?
 */"
      end
    end

    class 130818 "AxeList"
       stereotype "typedef"
       explicit_base_type "vector"
      cpp_decl "${description}typedef ${type}<Axe *> ${name};
"
      java_decl ""
      idl_decl "${comment}typedef ${type} ${name};
"
      explicit_switch_type ""
      
    end

    class 130690 "AxeMap"
       stereotype "typedef"
       base_type class_ref 130306 // MyMap
      cpp_decl "${description}typedef ${type}<Axe> ${name};
"
      java_decl ""
      idl_decl "${comment}typedef ${type} ${name};
"
      explicit_switch_type ""
      
    end

    class 128130 "constant"cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 128258 "math"
	visibility public
	cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 128386 "epsilon"
	  class_attribute package explicit_type "double"
	  init_value "= 1e-6"
	  cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  idl_decl ""
	end

	attribute 130306 "tiny"
	  class_attribute package explicit_type "double"
	  init_value "= 1e-7"
	  cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  idl_decl ""
	end

	attribute 129666 "precision"
	  class_attribute package explicit_type "int"
	  init_value "= 7"
	  cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  idl_decl ""
	end

	attribute 130050 "pi"
	  class_attribute package explicit_type "double"
	  init_value "= 3.14159265358979323846"
	  cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  idl_decl ""
	end

	attribute 129794 "degToRad"
	  class_attribute package explicit_type "double"
	  init_value "= 0.01745329251994330"
	  cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  idl_decl ""
	end

	attribute 129922 "radToDeg"
	  class_attribute package explicit_type "double"
	  init_value "= 57.2957795130823208"
	  cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  idl_decl ""
	end
      end

      class 128386 "physic"
	visibility public
	cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 130178 "tau"
	  class_attribute package explicit_type "double"
	  init_value "= 2 * 3.14159265358979323846"
	  cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  idl_decl ""
	end
      end
    end

    class 128310 "Error"cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 128211 "reason"
	public explicit_type "string"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 128339 "desc"
	public explicit_type "string"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 128467 "origin"
	public explicit_type "string"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 128595 "severity"
	public explicit_type "int"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      operation 128339 "Error"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} :
  reason (\"unknown\"),
  desc (\"unknown error\"),
  origin (\"unknown\"),
  severity (ERR)
{
  ${body}}
"
	
	
      end

      operation 128467 "Error"
	public explicit_return_type ""
	nparams 4
	  param in name "_reason" explicit_type "char"
	  param in name "_desc" explicit_type "char"
	  param in name "_origin" explicit_type "char"
	  param in name "_severity" explicit_type "int"
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} * ${p0}, const ${t1} * ${p1}, const ${t2} * ${p2}, ${t3} ${p3} = ERR${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} * ${p0}, const ${t1} * ${p1}, const ${t2} * ${p2}, ${t3} ${p3}${)}${volatile}${throw} :
  reason (_reason),
  desc (_desc),
  origin (_origin),
  severity (_severity)
{
  ${body}}
"
	
	
      end

      operation 128595 "Error"
	public explicit_return_type ""
	nparams 4
	  param in name "_reason" explicit_type "string"
	  param in name "_desc" explicit_type "string"
	  param in name "_origin" explicit_type "string"
	  param in name "_severity" explicit_type "int"
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, ${t3} ${p3} = ERR${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, ${t3} ${p3}${)}${volatile}${throw} : 
  reason (_reason),
  desc (_desc),
  origin (_origin),
  severity (_severity)
{
  ${body}}
"
	
	
      end

      operation 128723 "Error"
	public explicit_return_type ""
	nparams 1
	  param in name "error" type class_ref 128310 // Error
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} :
    reason (error.reason),
    desc (error.desc),
    origin (error.origin),
    severity (error.severity)
{
  ${body}}
"
	
	
      end

      operation 128851 "~Error"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} 
{
  ${body}}
"
	
	
      end

      operation 128979 "operator="
	public return_type class_ref 128310 // Error
	nparams 1
	  param in name "error" type class_ref 128310 // Error
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end
    end

    class 128211 "ErrorList"
       stereotype "typedef"
       explicit_base_type "vector<Error>"
      cpp_decl "${description}typedef ${type} ${name};
"
      java_decl ""
      idl_decl "${comment}typedef ${type} ${name};
"
      explicit_switch_type ""
      
    end

    class 128438 "ErrorSeverity"
       stereotype "enum"
      cpp_decl "${description}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${public}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      idl_decl "${comment}enum ${name} {
${items}};
"
      explicit_switch_type ""
      
      attribute 128054 "WARN"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	idl_decl ""
      end

      attribute 128182 "ERR"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	idl_decl ""
      end

      attribute 128310 "PANIC"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	idl_decl ""
      end
    end

    class 128182 "HKLException"
       stereotype "exception"
      cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl "${comment}exception ${name} {
${members}};
"
      explicit_switch_type ""
      
      classrelation 128130 // errors (<directional aggregation by value>)
	relation 128130 *-->
	  a role_name "errors" multiplicity "1" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 128130 // errors (<directional aggregation by value>)
	  b parent class_ref 128211 // ErrorList
      end

      operation 129107 "HKLException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} :
  errors(0)
{
  ${body}}
"
	
	
      end

      operation 128386 "HKLException"
	public explicit_return_type ""
	nparams 4
	  param in name "_reason" explicit_type "char"
	  param in name "_desc" explicit_type "char"
	  param in name "_origin" explicit_type "char"
	  param in name "_severity" explicit_type "int"
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} * ${p0}, const ${t1} * ${p1}, const ${t2} * ${p2}, ${t3} ${p3} = ERR${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} * ${p0}, const ${t1} * ${p1}, const ${t2} * ${p2}, ${t3} ${p3}${)}${volatile}${throw} :
  errors(0) 
{
  ${body}}
"
	
	
      end

      operation 128514 "HKLException"
	public explicit_return_type ""
	nparams 4
	  param in name "_reason" explicit_type "string"
	  param in name "_desc" explicit_type "string"
	  param in name "_origin" explicit_type "string"
	  param in name "_severity" explicit_type "int"
	    defaultvalue "ERR"
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, ${t3} ${p3} = ERR${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, ${t3} ${p3}${)}${volatile}${throw} :
  errors(0)
{
  ${body}}
"
	
	
      end

      operation 128130 "HKLException"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "_src" type class_ref 128182 // HKLException
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} :
  errors(0)
{
  ${body}}
"
	
	
      end

      operation 128002 "~HKLException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} 
{
  ${body}}
"
	
	
      end

      operation 128258 "operator="
	public return_type class_ref 128182 // HKLException
	nparams 1
	  param in name "_src" type class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 128642 "push_error"
	public explicit_return_type "void"
	nparams 4
	  param in name "_reason" explicit_type "char"
	  param in name "_desc" explicit_type "char"
	  param in name "_origin" explicit_type "char"
	  param in name "_severity" explicit_type "int"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}, ${t1} * ${p1}, ${t2} * ${p2}, ${t3} ${p3} = ERR${)}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}, ${t2} * ${p2}, ${t3} ${p3}${)}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 128770 "push_error"
	public explicit_return_type "void"
	nparams 4
	  param in name "_reason" explicit_type "string"
	  param in name "_desc" explicit_type "string"
	  param in name "_origin" explicit_type "string"
	  param in name "_severity" explicit_type "int"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3} = ERR${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 128898 "push_error"
	public explicit_return_type "void"
	nparams 1
	  param in name "_error" type class_ref 128310 // Error
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end
    end

    class 130178 "FitParameter"cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 130690 // <generalisation>
	relation 130434 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 130690 // <generalisation>
	  b parent class_ref 129922 // Parameter
      end

      operation 153346 "FitParameter"
	public explicit_return_type ""
	nparams 7
	  param in name "name" type class_ref 129026 // string
	  param in name "description" type class_ref 129026 // string
	  param in name "min" type class_ref 128060 // Value
	  param in name "current" type class_ref 128060 // Value
	  param in name "max" type class_ref 128060 // Value
	  param in name "toFit" explicit_type "bool"
	  param in name "precision" explicit_type "double"
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}, const ${t4} & ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}, const ${t4} & ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${volatile}${throw}  :
  Parameter(name, description, min, current, max),
  _flagFit(toFit),
  _precision(precision),
  _chi2(0)
{
  ${body}}
"
	
	
	comment "/**
 * @brief Constructor
 * @param ${p0] of the ${class}.
 * @param ${p1} The description of the ${class}.
 * @param ${p2} the minimum of the ${class}.
 * @param ${p3} the current value of the ${class}.
 * @param ${p4} the maximum of the ${class}.
 * @param ${p5} is a fit parameter or not
 * @param ${p6} to fullfill for the fit.
 */"
      end

      attribute 131458 "_flagFit"
	protected explicit_type "bool"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
	comment "/**
 * @brief This flag is true if this ${class} must be fit.
 */"
      end

      attribute 131586 "_precision"
	protected type class_ref 128060 // Value
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
	comment "/**
 * @brief The precision for the fit we expect on this ${class}.
 */"
      end

      attribute 131714 "_chi2"
	protected type class_ref 128060 // Value
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
	comment "/**
 * @brief The \\f$\\chi^2\\f$ obtained after the fit.
 */"
      end

      operation 153602 "get_flagFit"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the flag of the ${class} class.
 * @return The _flagFit bool member.
 */"
      end

      operation 153730 "get_precision"
	const public return_type class_ref 128060 // Value
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the precision of the ${class} class.
 * @return A constant Value ref on the _precision member.
 */"
      end

      operation 153858 "get_chi2"
	const public return_type class_ref 128060 // Value
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the _chi2 of the ${class} class.
 * @return A constant Value ref on the _chi2 member.
 */"
      end

      operation 153986 "set_flagFit"
	public explicit_return_type "void"
	nparams 1
	  param in name "flagFit" explicit_type "bool"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Set the _flagFit member of the ${class} class.
 * @param flagFit The bool to set. 
 */"
      end

      operation 154114 "set_precision"
	public explicit_return_type "void"
	nparams 1
	  param in name "precision" type class_ref 128060 // Value
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Set the _${p0} member of the ${class} class.
 * @param ${p0} The ${t0} to set. 
 */"
      end

      operation 154754 "set_chi2"
	public explicit_return_type "void"
	nparams 1
	  param in name "chi2" type class_ref 128060 // Value
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Set the _${p0} member of the ${class} class.
 * @param ${p0} The ${t0} to set. 
 */"
      end

      operation 154882 "operator=="
	const public explicit_return_type "bool"
	nparams 1
	  param in name "fitParameter" type class_ref 130178 // FitParameter
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * \\brief Are two ${class} equals ?
 * \\param ${p0} the ${class} to compare with.
 * \\return The comparison of the two ${class}.
 */"
      end

      operation 155010 "randomize"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief shuffle the ${class}.
 */"
      end

      operation 155138 "printToStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief print the ${class} into a flux
 * \\param flux The stream to print into.
 */"
      end

      operation 155266 "toStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Save the ${class} into a stream.
 * \\param flux the stream to save the ${class} into.
 * \\return The stream with the ${class}.
 */"
      end

      operation 155394 "fromStream"
	public explicit_return_type "istream"
	nparams 1
	  param inout name "flux" explicit_type "istream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Restore a ${class} from a stream.
 * \\param flux The stream containing the ${class} to restore.
 * @todo call update_observers or not ?
 */"
      end
    end

    class 131330 "FitParameterList"
      abstract 
      cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 132482 // _parameters (<directional aggregation>)
	relation 132098 o-->
	  stereotype "vector"
	  a role_name "_parameters" multiplicity "*" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type} *> ${name}${value};
"
	    classrelation_ref 132482 // _parameters (<directional aggregation>)
	  b parent class_ref 130178 // FitParameter
      end

      operation 160130 "size"
	const public explicit_return_type "uint"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the size of the ${class}.
 * @return the number of element in the ${class}.
 */"
      end

      operation 161410 "size_to_fit"
	const public explicit_return_type "uint"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the number of Parameter to fit in the ${class}.
 * @return The number of Parameter with the fitFlag set to true.
 */"
      end

      operation 160258 "operator[]"
	public return_type class_ref 130178 // FitParameter
	nparams 1
	  param in name "name" type class_ref 129026 // string
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} * ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @return the ${t0} * named
 * @param ${p0} The name of the ${t0} we are looking for in the ${class}.
 * @return A ${t0} pointer.
 * @throw HKLException if the ${t0} is not present n the ${class}.
 */"
      end

      operation 160386 "begin"
	public explicit_return_type "vector<FitParameter *>::iterator"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get an iterator on the first element of the ${class}.
 * @return The iterator.
 */"
      end

      operation 160514 "end"
	public explicit_return_type "vector<FitParameter *>::iterator"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get an iterator on the end of the ${class}.
 * @return The iterator.
 */"
      end

      operation 160642 "begin"
	const public explicit_return_type "vector<FitParameter *>::const_iterator"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get an const_iterator on the first element of the ${class}.
 * @return The const_iterator.
 */"
      end

      operation 160770 "end"
	const public explicit_return_type "vector<FitParameter *>::const_iterator"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get an const_iterator on the end of the ${class}.
 * @return The const_iterator.
 */"
      end

      operation 161538 "ready_to_fit"
	abstract const cpp_virtual public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	comment "/**
 * @brief check if their is enought data to compute an affinement.
 * @return true if computation is possible.
 */"
      end

      operation 161666 "randomize"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	comment "/**
 * @brief Randomize all the FitParameters in the ${class}.
 */"
      end

      operation 161794 "fitness"
	abstract cpp_virtual public explicit_return_type "double"
	nparams 0
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	comment "/**
 * @brief Calculation of the fitness.
 * @return the fitness calculated from the fitParameters.
 * @throw HKLException if their is not enought data to perform the fitness calculus.
 */"
      end

      operation 161922 "fitness"
	abstract cpp_virtual public explicit_return_type "bool"
	nparams 1
	  param inout name "fitness" explicit_type "double"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	comment "/**
 * @brief Calculation of the fitness.
 * @param fitness A double use to store the fitness calculation.
 * @return True if the calculation if valid, false otherwise.
 *
 * this method is use in the simplex Affinement method, and do not throw Exception if the compuation is not valid.
 */"
      end

      operation 162050 "update"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	comment "/**
 * @brief update the fitparameterList.
 *
 * The fitparameters can be changed from the fitParameterList but some
 * other members can depend of these Parameter. So after an update you
 * can be sure that the object is completly coherant.
 */"
      end

      operation 162178 "operator=="
	const public explicit_return_type "bool"
	nparams 1
	  param in name "fitParameterList" type class_ref 131330 // FitParameterList
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Are two ${class} equals ?
 * \\param ${p0} the ${t0} to compare with.
 */
"
      end

      operation 161026 "printToStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief print the ${class} into a flux
 * \\param flux The stream to print into.
 */"
      end

      operation 161154 "toStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Save the ${class} into a stream.
 * \\param flux the stream to save the ${class} into.
 * \\return The stream with the ${class}.
 */"
      end

      operation 161282 "fromStream"
	public explicit_return_type "istream"
	nparams 1
	  param inout name "flux" explicit_type "istream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Restore a ${class} from a stream.
 * \\param flux The stream containing the ${class} to restore.
 * @todo call update_observers or not ?
 */"
      end

    end

    class 130306 "MyMap"nformals 1
      formal name "T" type "class" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 130562 // map
        rank 0 value class_ref 129026 // string
      actual class class_ref 130562 // map
        rank 1 explicit_value "T"
      cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 131074 // <generalisation>
	relation 130818 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 131074 // <generalisation>
	  b parent class_ref 130562 // map
      end

      operation 156674 "operator[]"
	public explicit_return_type "T"
	nparams 1
	  param in name "name" type class_ref 129026 // string
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Overload of the [] operator.
 * @param ${p0} The name of the element to return.
 * @throw HKLException the element named ${p0} is not in the ${class}.
 * @return The element named ${p0}.
 */"
      end

      operation 156802 "operator[]"
	const public explicit_return_type "T"
	nparams 1
	  param in name "name" type class_ref 129026 // string
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Overload of the [] operator.
 * @param ${p0} The name of the element to return.
 * @throw HKLException the element named ${p0} is not in the ${class}.
 * @return The element named ${p0}.
 */"
      end

      operation 156930 "add"
	public explicit_return_type "bool"
	nparams 1
	  param in name "object" explicit_type "T"
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Add a ${t0} to the ${class}.
 * @param ${p0} The ${t0} to add.
 * @throw HKLException The ${p0} is already in the ${class}.
 * @return True if ok false otherwise.
 */"
      end

      operation 157058 "remove"
	public explicit_return_type "bool"
	nparams 1
	  param in name "name" type class_ref 129026 // string
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief remove the ${t0} named ${p0} from the ${class}
 * @param ${p0} The name of the ${t0}.
 * @throw HKLException The object names ${p0} is no present in the ${class}.
 * @return True if object removed.
 */"
      end

      operation 157186 "getNames"
	const public explicit_return_type "vector<string>"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 157314 "printToStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief print the ${class} into a flux
 * \\param flux The stream to print into.
 */"
      end

      operation 157442 "toStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Save the ${class} into a stream.
 * \\param flux the stream to save the ${class} into.
 * \\return The stream with the ${class}.
 */"
      end

      operation 157570 "fromStream"
	public explicit_return_type "istream"
	nparams 1
	  param inout name "flux" explicit_type "istream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Restore a ${class} from a stream.
 * \\param flux The stream containing the ${class} to restore.
 * @todo call update_observers or not ?
 */"
      end
    end

    class 128898 "MyString"cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${public}interface ${name}${extends} {
${members}}
"
      idl_decl "${comment}${abstract}${local}interface ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      
      comment "/**
  * @brief the class use to store a double with an unit.
  */"
      operation 141442 "MyString"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} :
  string()
{
  ${body}}
"
	
	
	comment "/**
 * @brief The default constructor.
 */"
      end

      operation 141570 "MyString"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "char"
	cpp_decl "    ${description}${inline}${name}${(}${t0} const * ${p0}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${t0} const * ${p0}${)}${volatile}${throw} :
  string(s)
{
  ${body}}
"
	
	
	comment "/**
 * @brief A constructor from a double
 */"
      end

      operation 144002 "MyString"
	public explicit_return_type ""
	nparams 1
	  param in name "s" type class_ref 129026 // string
	cpp_decl "    ${description}${inline}${name}${(}${t0} const & ${p0}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${t0} const & ${p0}${)}${volatile}${throw} :
  string(s)
{
  ${body}}
"
	
	
	comment "/**
 * @brief A constructor from a double
 */"
      end

      operation 144130 "MyString"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "s" type class_ref 128898 // MyString
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} :
  string(s) 
{
  ${body}}
"
	
	
	comment "/**
 * @brief A constructor from a double
 */"
      end

      operation 143746 "toStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief print on a stream the content of the MyString
 * @param flux the ostream to modify.
 * @return the modified ostream
 */"
      end

      operation 143874 "fromStream"
	public explicit_return_type "istream"
	nparams 1
	  param inout name "flux" explicit_type "istream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief restore the content of the MyString from an istream
 * @param flux the istream.
 * @return the modified istream.
 * @todo problem of security here.
 */"
      end

      classrelation 128514 // <generalisation>
	relation 128514 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 128514 // <generalisation>
	  b parent class_ref 129026 // string
      end
    end

    class 129154 "ObjectBase"cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 128642 // _name (<directional aggregation by value>)
	relation 128642 *-->
	  a role_name "_name" multiplicity "1" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 128642 // _name (<directional aggregation by value>)
	  b parent class_ref 128898 // MyString
      end

      classrelation 128898 // _description (<directional aggregation by value>)
	relation 128770 *-->
	  a role_name "_description" multiplicity "1" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 128898 // _description (<directional aggregation by value>)
	  b parent class_ref 128898 // MyString
      end

      operation 144642 "ObjectBase"
	public explicit_return_type ""
	nparams 2
	  param in name "name" type class_ref 129026 // string
	  param in name "description" type class_ref 129026 // string
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile}${throw} 
{
  ${body}}
"
	
	
	comment "/**
 * @brief Another constructor
 * @param ${p0} The name of the Object
 * @param ${p1} The description of the Object
 * @throw HKLException if the name or the description is empty.
 */"
      end

      operation 144386 "ObjectBase"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 129154 // ObjectBase
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} :
  _name(source._name),
  _description(source._description) 
{
  ${body}}
"
	
	
	comment "/**
 * @brief Copy constructor
 * @param ${p0} the ${class} to copy.
 */"
      end

      operation 145282 "operator=="
	const public explicit_return_type "bool"
	nparams 1
	  param in name "object" type class_ref 129154 // ObjectBase
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * \\brief Are two Object equals ?
 * \\param ${p0} the Object to compare with.
 * \\return true if both are equals flase otherwise.
 */"
      end

      operation 147714 "_get_name"
	const protected return_type class_ref 129026 // string
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the name of the ${class}.
 * @return a string ref with the name of the ${class}.
 */"
      end

      operation 145410 "_set_name"
	protected explicit_return_type "void"
	nparams 1
	  param in name "name" type class_ref 129026 // string
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Set the name of the BaseObject.
 * @param name The new name of the BaseObject.
 */"
      end

      operation 147842 "_get_description"
	const protected return_type class_ref 129026 // string
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the description of the ${class}.
 * @return a string ref with the name of the ${class}.
 */"
      end

      operation 145538 "_set_description"
	protected explicit_return_type "void"
	nparams 1
	  param in name "description" type class_ref 129026 // string
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Set the description of the Object.
 * @param description The new BaseObject description.
 */"
      end

      operation 145922 "printToStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief print the ${class} into a flux
 * @param ${p0} The stream to print into.
 * @return The modified flux.
 */"
      end

      operation 145666 "toStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief print on a stream the content of the ${class}
 * @param flux the ostream to modify.
 * @return the modified ostream
 */"
      end

      operation 145794 "fromStream"
	public explicit_return_type "istream"
	nparams 1
	  param inout name "flux" explicit_type "istream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief restore the content of the ${class} from an istream
 * @param flux the istream.
 * @return the modified istream.
 * @todo problem of security here.
 */"
      end
    end

    class 129282 "ObjectReadOnly"cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 129154 // <generalisation>
	relation 128898 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 129154 // <generalisation>
	  b parent class_ref 129154 // ObjectBase
      end

      operation 146050 "ObjectReadOnly"
	public explicit_return_type ""
	nparams 2
	  param in name "name" type class_ref 129026 // string
	  param in name "description" type class_ref 129026 // string
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile}${throw} :
  ObjectBase(name, description) 
{
  ${body}}
"
	
	
	comment "/**
 * @brief The default constructor.
 * @param ${p0} The name of the Object
 * @param ${p1} The description of the Object
 * @throw HKLException if the name or the description is empty.
 */"
      end

      operation 146306 "ObjectReadOnly"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 129282 // ObjectReadOnly
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} :
  ObjectBase(source) 
{
  ${body}}
"
	
	
	comment "/**
 * @brief Copy constructor
 * @param ${p0} the ${class} to copy.
 */"
      end

      operation 146434 "get_name"
	const public return_type class_ref 129026 // string
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the name of the ${class}.
 * @return a string reference with the name of the ${class}.
 */"
      end

      operation 146562 "get_description"
	const public return_type class_ref 129026 // string
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the description of the ${class}.
 * @return a string reference with the description of the ${class}.
 */"
      end
    end

    class 129410 "Object"cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 129538 // <generalisation>
	relation 129282 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 129538 // <generalisation>
	  b parent class_ref 129282 // ObjectReadOnly
      end

      operation 147330 "Object"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} :
  ObjectReadOnly(\"unknown\", \"unknown\") 
{
  ${body}}
"
	
	
	comment "/**
 * @brief The default constructor.
 */"
      end

      operation 146690 "Object"
	public explicit_return_type ""
	nparams 2
	  param in name "name" type class_ref 129026 // string
	  param in name "description" type class_ref 129026 // string
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile}${throw} :
  ObjectReadOnly(name, description) 
{
  ${body}}
"
	
	
	comment "/**
 * @brief The default constructor.
 * @param ${p0} The name of the ${class}
 * @param ${p1} The description of the ${class}
 * @throw HKLException if the name or the description is empty.
 */"
      end

      operation 146946 "Object"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 129410 // Object
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} :
  ObjectReadOnly(source) 
{
  ${body}}
"
	
	
	comment "/**
 * @brief Copy constructor
 * @param ${p0} the ${class} to copy.
 */"
      end

      operation 147074 "set_name"
	public explicit_return_type "void"
	nparams 1
	  param in name "name" type class_ref 129026 // string
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Set the name of the ${class}.
 * @param ${p0}
 */"
      end

      operation 147458 "set_description"
	public explicit_return_type "void"
	nparams 1
	  param in name "description" type class_ref 129026 // string
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Set the name of the ${class}.
 * @param ${p0}
 */"
      end
    end

    class 129666 "Observable"cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 131074 "_changed"
	protected explicit_type "bool"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      classrelation 129666 // _observers (<directional aggregation>)
	relation 129410 o-->
	  stereotype "vector"
	  a role_name "_observers" multiplicity "*" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type} *> ${name}${value};
"
	    classrelation_ref 129666 // _observers (<directional aggregation>)
	  b parent class_ref 129538 // Observer
      end

      operation 148866 "Observable"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} :
  _changed(false)
{
  ${body}}
"
	
	
	comment "/**
 * @brief The default constructor.
 */"
      end

      operation 148994 "add_observer"
	public explicit_return_type "void"
	nparams 1
	  param in name "observer" type class_ref 129538 // Observer
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Add an ${t0} to the ${class}.
 * @param ${p0} The ${t0} pointer to add.
 */"
      end

      operation 149122 "del_observer"
	public explicit_return_type "void"
	nparams 1
	  param in name "observer" type class_ref 129538 // Observer
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Delete an ${t0} from the ${class}.
 * @param ${p0} The ${t0} pointer to remove.
 */"
      end

      operation 149250 "update_observers"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Update all the Observer looking for this ${class}.
 */"
      end

      operation 149378 "set_changed"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Set the changed state of the ${class}.
 *
 * If the changed state is not on, no Observer update is possible.
 */"
      end
    end

    class 129538 "Observer"
      abstract 
      cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 130946 "_connected"
	protected explicit_type "bool"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      operation 148354 "Observer"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} :
  _connected(false)
{
  ${body}}
"
	
	
      end

      operation 148226 "update"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
      end

      operation 148610 "connect"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 148738 "unconnect"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end
    end

    class 129922 "Parameter"cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 130434 // <generalisation>
	relation 130178 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 130434 // <generalisation>
	  b parent class_ref 129282 // ObjectReadOnly
      end

      classrelation 130562 // <generalisation>
	relation 130306 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 130562 // <generalisation>
	  b parent class_ref 129794 // Range
      end

      operation 152322 "Parameter"
	public explicit_return_type ""
	nparams 5
	  param in name "name" type class_ref 129026 // string
	  param in name "description" type class_ref 129026 // string
	  param in name "min" type class_ref 128060 // Value
	  param in name "current" type class_ref 128060 // Value
	  param in name "max" type class_ref 128060 // Value
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}, const ${t4} & ${p4}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}, const ${t4} & ${p4}${)}${volatile}${throw} :
   ObjectReadOnly(name, description),
  Range(min, current, max)
{
  ${body}}
"
	
	
	comment "/**
 * @brief The default constructor
 * @param ${p0} The name ${t0} of the Parameter.
 * @param ${p1} The description ${t1} of the Parameter.
 * @param ${p2} the minimum ${t2} of the Parameter.
 * @param ${p3} The current ${t3} of the Parameter.
 * @param ${p4} The maximum ${t4} of the Parameter.
 * @throw HKLException if the min <= current <= max is not verify.
 */"
      end

      operation 152706 "operator=="
	const public explicit_return_type "bool"
	nparams 1
	  param in name "parameter" type class_ref 129922 // Parameter
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Are two ${class} equals ?
 * \\param ${p0} the ${t0} to compare with.
 */
"
      end

      operation 152834 "printToStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief print the ${class} into a flux
 * \\param flux The stream to print into.
 */"
      end

      operation 152962 "toStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Save the ${class} into a stream.
 * \\param flux the stream to save the ${class} into.
 * \\return The stream with the ${class}.
 */"
      end

      operation 153090 "fromStream"
	public explicit_return_type "istream"
	nparams 1
	  param inout name "flux" explicit_type "istream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Restore a ${class} from a stream.
 * \\param flux The stream containing the ${class} to restore.
 * @todo call update_observers or not ?
 */"
      end
    end

    class 131074 "ParameterList"cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 131714 // _parameters (<directional aggregation>)
	relation 131458 o-->
	  stereotype "vector"
	  a role_name "_parameters" multiplicity "*" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type} *> ${name}${value};
"
	    classrelation_ref 131714 // _parameters (<directional aggregation>)
	  b parent class_ref 129922 // Parameter
      end

      operation 158338 "add"
	public explicit_return_type "bool"
	nparams 1
	  param in name "parameter" type class_ref 129922 // Parameter
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Add a ${t0} to the ${class}.
 * @param ${p0} The ${t0} to add.
 */"
      end

      operation 158466 "size"
	const public explicit_return_type "uint"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the size of the ${class}.
 * @return the number of element in the ${class}.
 */"
      end

      operation 158594 "operator[]"
	public return_type class_ref 129922 // Parameter
	nparams 1
	  param in name "name" type class_ref 129026 // string
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} * ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @return the ${t0} * named
 * @param ${p0} The name of the ${t0} we are looking for in the ${class}.
 * @return A ${t0} pointer.
 * @throw HKLException if the ${t0} is not present n the ${class}.
 */"
      end

      operation 158722 "begin"
	public explicit_return_type "vector<Parameter *>::iterator"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get an iterator on the first element of the ${class}.
 * @return The iterator.
 */"
      end

      operation 158850 "end"
	public explicit_return_type "vector<Parameter *>::iterator"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get an iterator on the end of the ${class}.
 * @return The iterator.
 */"
      end

      operation 158978 "begin"
	const public explicit_return_type "vector<Parameter *>::const_iterator"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get an const_iterator on the first element of the ${class}.
 * @return The const_iterator.
 */"
      end

      operation 159106 "end"
	const public explicit_return_type "vector<Parameter *>::const_iterator"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get an const_iterator on the end of the ${class}.
 * @return The const_iterator.
 */"
      end

      operation 157826 "operator=="
	const public explicit_return_type "bool"
	nparams 1
	  param in name "parameterList" type class_ref 131074 // ParameterList
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Are two ${class} equals ?
 * \\param ${p0} the ${t0} to compare with.
 */
"
      end

      operation 157954 "printToStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief print the ${class} into a flux
 * \\param flux The stream to print into.
 */"
      end

      operation 158082 "toStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Save the ${class} into a stream.
 * \\param flux the stream to save the ${class} into.
 * \\return The stream with the ${class}.
 */"
      end

      operation 158210 "fromStream"
	public explicit_return_type "istream"
	nparams 1
	  param inout name "flux" explicit_type "istream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Restore a ${class} from a stream.
 * \\param flux The stream containing the ${class} to restore.
 * @todo call update_observers or not ?
 */"
      end
    end

    class 128770 "Quaternion"cpp_decl "${description}${template}class ${name}${inherit} {
  friend class smatrix;
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 130434 "_a"
	protected explicit_type "double"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 130562 "_b"
	protected explicit_type "double"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 130690 "_c"
	protected explicit_type "double"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 130818 "_d"
	protected explicit_type "double"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      operation 135682 "Quaternion"
	stereotype "constructor"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} :
  _a(1),
  _b(0),
  _c(0),
  _d(0)
{
  ${body}}
"
	
	
	comment " /*!
  * \\brief Default constructor
  * 
  * Create a new quaternion and set all its components to 0.0
  */"
      end

      operation 135810 "Quaternion"
	stereotype "constructor"
	public explicit_return_type ""
	nparams 4
	  param in name "a" explicit_type "double"
	  param in name "b" explicit_type "double"
	  param in name "c" explicit_type "double"
	  param in name "d" explicit_type "double"
	cpp_decl "    ${description}${inline}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${volatile}${throw} :
  _a(a),
  _b(b),
  _c(c),
  _d(d) 
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief This constructor creates a quaternion and populates it
 * \\param a
 * \\param b
 * \\param c
 * \\param d
 * 
 * Create a new quaternion with a, b, c and d as coordinates.
 */"
      end

      operation 140034 "Quaternion"
	stereotype "constructor"
	public explicit_return_type ""
	nparams 1
	  param in name "v" type class_ref 128002 // svector
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} 
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief This constructor creates a quaternion and populates it
 * \\param v
 * 
 * Create a new quaternion from a svector.
 */"
      end

      operation 140162 "Quaternion"
	stereotype "constructor"
	public explicit_return_type ""
	nparams 2
	  param in name "angle" explicit_type "double"
	  param in name "v" type class_ref 128002 // svector
	cpp_decl "    ${description}${inline}${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${volatile}${throw} 
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief This constructor creates a quaternion from an angle and a vector
 * \\param angle the rotation angle.
 * \\param v the axe of the rotation.
 */"
      end

      operation 135938 "Quaternion"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 128770 // Quaternion
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} :
  _a(source._a),
  _b(source._b),
  _c(source._c),
  _d(source._d)
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Copy constructor.
 * \\param q The Quaternion to copy from.
 */"
      end

      operation 136322 "a"
	public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 136450 "b"
	public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 136578 "c"
	public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 140290 "d"
	public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 136706 "a"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} const & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} const & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 136834 "b"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} const & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} const & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 136962 "c"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} const & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} const & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 140418 "d"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} const & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} const & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 137090 "operator=="
	const public explicit_return_type "bool"
	nparams 1
	  param in name "q" type class_ref 128770 // Quaternion
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 141186 "operator+="
	public return_type class_ref 128770 // Quaternion
	nparams 1
	  param in name "q" type class_ref 128770 // Quaternion
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Add a Quaternion to another one.
 * \\param q The Quaternion to add.
 * \\return A reference to the Quaternion which was added.
 */"
      end

      operation 141314 "operator-="
	public return_type class_ref 128770 // Quaternion
	nparams 1
	  param in name "q" type class_ref 128770 // Quaternion
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Substract a Quaternion to another one.
 * \\param q The Quaternion to substract.
 * \\return A reference to the Quaternion which was substracted.
 */"
      end

      operation 137218 "operator*="
	public return_type class_ref 128770 // Quaternion
	nparams 1
	  param in name "q" type class_ref 128770 // Quaternion
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Multiply a Quaternion to another one.
 * \\param q The Quaternion to multiply.
 * \\return A reference to the Quaternion which was multiplyed.
 */"
      end

      operation 137602 "operator/="
	public return_type class_ref 128770 // Quaternion
	nparams 1
	  param in name "d" explicit_type "double"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Divide a Quaternion by a double.
 * \\param d The double to divide by.
 * \\return A reference to the Quaternion which was modified.
 */"
      end

      operation 138626 "norm2"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Compute de norm of the Quaternion.
 * \\return The norme of the Quaternion.
 */"
      end

      operation 140546 "conjugate"
	const public return_type class_ref 128770 // Quaternion
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Compute the conjugated Quaternion.
 * \\return The conjugate Quaternion.
 */"
      end

      operation 140674 "dotProduct"
	const public explicit_return_type "double"
	nparams 1
	  param in name "q" type class_ref 128770 // Quaternion
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Compute the dot product of a Quaternion.
 * \\param q The Quaternion.
 * \\return The dot Product.
 */"
      end

      operation 140802 "invert"
	const public return_type class_ref 128770 // Quaternion
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Compute the invert Quaternion.
 * \\return The invert Quaternion.
 */"
      end

      operation 140930 "asMatrix"
	const public return_type class_ref 128514 // smatrix
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Compute the rotation matrix of a Quaternion.
 * \\return The rotation matrix of a Quaternion.
 *
 * to convert a quaternion to a Matrix:
 * \\f$ q = a + b \\cdot i + c \\cdot j + d \\cdot k \\f$
 * 
 * \\f$
 * \\left(
 *   \\begin{array}{ccc}
 *     a^2+b^2-c^2-d^2 & 2bc-2ad         & 2ac+2bd\\\\
 *     2ad+2bc         & a^2-b^2+c^2-d^2 & 2cd-2ab\\\\
 *     2bd-2ac         & 2ab+2cd         & a^2-b^2-c^2+d^2
 *   \\end{array}
 * \\right)
 * \\f$
 */"
      end

      operation 137858 "getAngleAndAxe"
	const public explicit_return_type "void"
	nparams 2
	  param inout name "angle" explicit_type "double"
	  param inout name "axe" type class_ref 128002 // svector
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Decompose a Quaternion into a rotation angle and an Axe of rotation.
 * \\param[out] angle The angle of the rotation will be strore in this variable.
 * \\param[out] axe The axe of rotation will be store in this variable.
 */"
      end

      operation 141058 "getAxe"
	const public return_type class_ref 128002 // svector
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the rotating axe of the Quaternion.
 * @return The rotating axe of the Quaternion.
 */"
      end

      operation 139522 "printToStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 139650 "toStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 139778 "fromStream"
	public explicit_return_type "istream"
	nparams 1
	  param inout name "flux" explicit_type "istream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Restore a ${class} from a stream.
 * \\param flux The stream containing the ${class} to restore.
 */"
      end
    end

    class 129794 "Range"cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 130178 // <generalisation>
	relation 129922 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 130178 // <generalisation>
	  b parent class_ref 129666 // Observable
      end

      classrelation 129794 // _min (<directional aggregation by value>)
	relation 129538 *-->
	  a role_name "_min" multiplicity "1" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 129794 // _min (<directional aggregation by value>)
	  b parent class_ref 128060 // Value
	get_oper operation_ref 150402 // get_min
      end

      classrelation 129922 // _current (<directional aggregation by value>)
	relation 129666 *-->
	  a role_name "_current" multiplicity "1" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 129922 // _current (<directional aggregation by value>)
	  b parent class_ref 128060 // Value
      end

      classrelation 130050 // _max (<directional aggregation by value>)
	relation 129794 *-->
	  a role_name "_max" multiplicity "1" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 130050 // _max (<directional aggregation by value>)
	  b parent class_ref 128060 // Value
      end

      operation 149506 "Range"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} :
  Observable(),
  _min(Value()),
  _current(Value()),
  _max(Value())
{
  ${body}}
"
	
	
	comment "/**
 * @brief The default constructor.
 */"
      end

      operation 150018 "Range"
	public explicit_return_type ""
	nparams 3
	  param in name "min" type class_ref 128060 // Value
	  param in name "current" type class_ref 128060 // Value
	  param in name "max" type class_ref 128060 // Value
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${volatile}${throw} :
  Observable()
{
  ${body}}
"
	
	
	comment "/**
 * @brief constructor of the ${class} class.
 * 
 * @param ${p0} The minimum value of the ${class}.
 * @param ${p1} The current value of the ${class}.
 * @param ${p2} The maximum value of the ${class}.
 * @throw HKLException if not min < current < max; 
 */"
      end

      operation 149762 "Range"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 129794 // Range
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} :
  Observable(source),
  _min(source._min),
  _current(source._current),
  _max(source._max) 
{
  ${body}}
"
	
	
      end

      operation 150402 "get_min"
	const cpp_inline public return_type class_ref 128060 // Value
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return _min;
}
"
	cpp_name_spec "get${name}"
	final 
	java_name_spec "get_${name}"
	
	idl_name_spec "get_${name}"
	get_of_relation classrelation_ref 129794 // _min (<directional aggregation by value>)
	comment "/*!
 * \\brief Get the _min Value of the ${class} class.
 * \\return The minimum Value.
 */"
      end

      operation 150530 "get_current"
	const cpp_inline public return_type class_ref 128060 // Value
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return _current;
}
"
	final 
	
	comment "/*!
 * \\brief Get the _current Value of the ${class} class.
 * \\return The current Value.
 */"
      end

      operation 150658 "get_max"
	const cpp_inline public return_type class_ref 128060 // Value
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return _max;
}
"
	final 
	
	comment "/*!
 * \\brief Get the _max Value of the ${class} class.
 * \\return The maximum Value.
 */"
      end

      operation 150274 "set_current"
	public explicit_return_type "void"
	nparams 1
	  param in name "current" type class_ref 128060 // Value
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Set the _current ${t0} of the ${class} class.
 * @param ${p0} The ${t0} to set.
 * @throw An HKLException if the current ${t0} in not between min and max.
 */"
      end

      operation 150786 "set_current"
	public explicit_return_type "void"
	nparams 1
	  param in name "current" explicit_type "double"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Set the _current ${t0} of the ${class} class.
 * @param ${p0} The ${t0} to set.
 *
 * This method do not check for the validity of the ${class}. This method
 * is requiered by the simplex affinement.
 */"
      end

      operation 150914 "set_range"
	public explicit_return_type "void"
	nparams 2
	  param in name "min" type class_ref 128060 // Value
	  param in name "max" type class_ref 128060 // Value
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Set the minimum and the maximum of the ${class} class.
 * @param ${p0} The minimum ${t0} to set.
 * @param ${p1} The maximum ${t1} to set.
 * @throw HKLException if the new ${class} is not valid.
 *
 * this method check that the new minimun is not bigger than the current
 * value of the ${class} and greater than the maximum.
 */"
      end

      operation 151042 "set"
	public explicit_return_type "void"
	nparams 3
	  param in name "min" explicit_type "double"
	  param in name "current" explicit_type "double"
	  param in name "max" explicit_type "double"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Set the minimum and the maximum of the ${class} class.
 * @param ${p0} The minimum ${t0} to set.
 * @param ${p1} The current ${t1} to set.
 * @param ${p2} The maximum ${t2} to set.
 * @throw HKLException if the new ${class} is not valid.
 *
 * this method do not check that the new minimun is not bigger than the current
 * value of the range and greater than the maximum.
 */"
      end

      operation 151170 "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "range" type class_ref 129794 // Range
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Set a ${class} from another one.
 * @param ${p0} The ${t0} to set.
 *
 * this method set only the _min, _current, _max Value of the ${class}.
 */"
      end

      operation 151298 "operator*="
	public return_type class_ref 129794 // Range
	nparams 1
	  param in name "range" type class_ref 129794 // Range
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Multiply a ${class} by another one.
 * @param ${p0} The ${class} to multiply by.
 * @return A ${class} ref on the ${class} after the multiplication.
 *
 * This method modify min, current and max to reflect the multiplication.
 */
"
      end

      operation 151426 "operator*="
	public return_type class_ref 129794 // Range
	nparams 1
	  param in name "d" explicit_type "double"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Multiply a ${class} by a ${t0} value.
 * @param ${p0} The ${t0} value.
 * @return The ${class} after the multiplication.
 *
 * This method modify min, current and max to reflect the multiplication.
 */
"
      end

      operation 151554 "contain_zero"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief check if the ${class} contain zero.
 * @return true if zero is include in between min, max.
 */
"
      end

      operation 151682 "operator=="
	const public explicit_return_type "bool"
	nparams 1
	  param in name "range" type class_ref 129794 // Range
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Are two ${class} equals ?
 * \\param ${p0} the ${t0} to compare with.
 */
"
      end

      operation 151810 "printToStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief print the ${class} into a flux
 * \\param flux The stream to print into.
 */"
      end

      operation 151938 "toStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Save the ${class} into a stream.
 * \\param flux the stream to save the ${class} into.
 * \\return The stream with the ${class}.
 */"
      end

      operation 152066 "fromStream"
	public explicit_return_type "istream"
	nparams 1
	  param inout name "flux" explicit_type "istream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Restore a ${class} from a stream.
 * \\param flux The stream containing the ${class} to restore.
 * @todo call update_observers or not ?
 */"
      end
    end

    class 128514 "smatrix"cpp_decl "${description}${template}class ${name}${inherit} {
  friend class svector;
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 128514 "_m11"
	protected explicit_type "double"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 128642 "_m12"
	protected explicit_type "double"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 128770 "_m13"
	protected explicit_type "double"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 128898 "_m21"
	protected explicit_type "double"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 129026 "_m22"
	protected explicit_type "double"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 129154 "_m23"
	protected explicit_type "double"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 129282 "_m31"
	protected explicit_type "double"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 129410 "_m32"
	protected explicit_type "double"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 129538 "_m33"
	protected explicit_type "double"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      operation 130690 "smatrix"
	stereotype "constructor"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} :
  _m11(0), _m12(0), _m13(0),
  _m21(0), _m22(0), _m23(0),
  _m31(0), _m32(0), _m33(0)
{
  ${body}}
"
	
	
      end

      operation 134402 "smatrix"
	stereotype "constructor"
	public explicit_return_type ""
	nparams 9
	  param in name "m11" explicit_type "double"
	  param in name "m12" explicit_type "double"
	  param in name "m13" explicit_type "double"
	  param in name "m21" explicit_type "double"
	  param in name "m22" explicit_type "double"
	  param in name "m23" explicit_type "double"
	  param in name "m31" explicit_type "double"
	  param in name "m32" explicit_type "double"
	  param in name "m33" explicit_type "double"
	cpp_decl "    ${description}${inline}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${volatile}${throw} :
  _m11(m11), _m12(m12), _m13(m13),
  _m21(m21), _m22(m22), _m23(m23),
  _m31(m31), _m32(m32), _m33(m33)
{
  ${body}}
"
	
	
      end

      operation 134530 "smatrix"
	stereotype "constructor"
	public explicit_return_type ""
	nparams 3
	  param in name "euler_x" explicit_type "double"
	  param in name "euler_y" explicit_type "double"
	  param in name "euler_z" explicit_type "double"
	cpp_decl "    ${description}${inline}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${volatile}${throw} 
{
  ${body}}
"
	
	
      end

      operation 130946 "smatrix"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 128514 // smatrix
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} :
  _m11(source._m11), _m12(source._m12), _m13(source._m13),
  _m21(source._m21), _m22(source._m22), _m23(source._m23),
  _m31(source._m31), _m32(source._m32), _m33(source._m33)
{
  ${body}}
"
	
	
      end

      operation 134658 "operator=="
	const public explicit_return_type "bool"
	nparams 1
	  param in name "M" type class_ref 128514 // smatrix
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 134786 "operator*="
	public return_type class_ref 128514 // smatrix
	nparams 1
	  param in name "M" type class_ref 128514 // smatrix
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 133250 "set"
	public explicit_return_type "void"
	nparams 9
	  param in name "m11" explicit_type "double"
	  param in name "m12" explicit_type "double"
	  param in name "m13" explicit_type "double"
	  param in name "m21" explicit_type "double"
	  param in name "m22" explicit_type "double"
	  param in name "m23" explicit_type "double"
	  param in name "m31" explicit_type "double"
	  param in name "m32" explicit_type "double"
	  param in name "m33" explicit_type "double"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 135426 "set"
	public explicit_return_type "void"
	nparams 3
	  param in name "euler_x" explicit_type "double"
	  param in name "euler_y" explicit_type "double"
	  param in name "euler_z" explicit_type "double"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 134274 "get"
	const public explicit_return_type "double"
	nparams 2
	  param in name "i" explicit_type "uint"
	  param in name "j" explicit_type "uint"
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 133890 "printToStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 134018 "toStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 134146 "fromStream"
	public explicit_return_type "istream"
	nparams 1
	  param inout name "flux" explicit_type "istream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Restore a ${class} from a stream.
 * \\param flux The stream containing the ${class} to restore.
 */"
      end

      operation 134914 "operator*"
	const public return_type class_ref 128514 // smatrix
	nparams 1
	  param in name "M" type class_ref 128514 // smatrix
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 135042 "operator*"
	const public return_type class_ref 128002 // svector
	nparams 1
	  param in name "v" type class_ref 128002 // svector
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 135170 "asEulerian"
	const public return_type class_ref 128002 // svector
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 135298 "transpose"
	public return_type class_ref 128514 // smatrix
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end
    end

    class 128002 "svector"cpp_decl "${description}${template}class ${name}${inherit} {
  friend class smatrix;
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 128002 "_x"
	protected explicit_type "double"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 128130 "_y"
	protected explicit_type "double"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 128258 "_z"
	protected explicit_type "double"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      operation 129026 "svector"
	stereotype "constructor"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} :
  _x(0),
  _y(0),
  _z(0)
{
  ${body}}
"
	
	
      end

      operation 129538 "svector"
	stereotype "constructor"
	public explicit_return_type ""
	nparams 3
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "z" explicit_type "double"
	cpp_decl "    ${description}${inline}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${volatile}${throw} :
  _x(x),
  _y(y),
  _z(z)
{
  ${body}}
"
	
	
      end

      operation 129282 "svector"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 128002 // svector
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} :
  _x(source._x),
  _y(source._y),
  _z(source._z)
{
  ${body}}
"
	
	
      end

      operation 129666 "x"
	public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 129794 "y"
	public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 129922 "z"
	public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 130050 "x"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} const & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} const & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 130178 "y"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} const & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} const & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 130306 "z"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} const & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} const & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 130434 "operator=="
	const public explicit_return_type "bool"
	nparams 1
	  param in name "v" type class_ref 128002 // svector
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 130562 "operator*="
	public return_type class_ref 128002 // svector
	nparams 1
	  param in name "v" type class_ref 128002 // svector
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 131202 "operator*="
	public return_type class_ref 128002 // svector
	nparams 1
	  param in name "M" type class_ref 128514 // smatrix
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 131330 "operator*="
	public return_type class_ref 128002 // svector
	nparams 1
	  param in name "d" explicit_type "double"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 131458 "operator/="
	public return_type class_ref 128002 // svector
	nparams 1
	  param in name "d" explicit_type "double"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 131586 "operator-="
	public return_type class_ref 128002 // svector
	nparams 1
	  param in name "v" type class_ref 128002 // svector
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 131714 "sum"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 131842 "set"
	public explicit_return_type "void"
	nparams 3
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "z" explicit_type "double"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 131970 "scalar"
	const public explicit_return_type "double"
	nparams 1
	  param in name "v" type class_ref 128002 // svector
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 132098 "vectorialProduct"
	const public return_type class_ref 128002 // svector
	nparams 1
	  param in name "v" type class_ref 128002 // svector
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 132226 "angle"
	const public explicit_return_type "double"
	nparams 1
	  param in name "v" type class_ref 128002 // svector
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 132354 "axisSystem"
	const public return_type class_ref 128514 // smatrix
	nparams 1
	  param in name "v" type class_ref 128002 // svector
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 132482 "norm2"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 132610 "normalize"
	const public return_type class_ref 128002 // svector
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 132738 "isColinear"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "v" type class_ref 128002 // svector
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 132866 "randomize"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 132994 "randomize"
	public return_type class_ref 128002 // svector
	nparams 1
	  param in name "v" type class_ref 128002 // svector
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 133122 "randomize"
	public return_type class_ref 128002 // svector
	nparams 2
	  param in name "v1" type class_ref 128002 // svector
	  param in name "v2" type class_ref 128002 // svector
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 133378 "rotatedAroundVector"
	const public return_type class_ref 128002 // svector
	nparams 2
	  param in name "axe" type class_ref 128002 // svector
	  param in name "angle" explicit_type "double"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * \\brief rotate a vector around another one with an angle.
 * \\param axe The svector corresponding to the rotation axe.
 * \\param angle the angle of rotation.
 * \\return The new vector.
 */"
      end

      operation 133506 "printToStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 133634 "toStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 133762 "fromStream"
	public explicit_return_type "istream"
	nparams 1
	  param inout name "flux" explicit_type "istream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Restore a ${class} from a stream.
 * \\param flux The stream containing the ${class} to restore.
 */"
      end

      operation 135554 "norminf"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end
    end

    class 128060 "Value"cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${public}interface ${name}${extends} {
${members}}
"
      idl_decl "${comment}${abstract}${local}interface ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      
      comment "/**
  * @brief the class use to store a double with an unit.
  */"
      attribute 128060 "_value"
	protected explicit_type "double"
	init_value "0."
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
	get_oper operation_ref 128107 // get_value
	set_oper operation_ref 128235 // set_value
      end

      operation 128188 "Value"
	stereotype "constructor"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} :
  _value(0)
{
  ${body}}
"
	
	
	comment "/**
 * @brief The default constructor.
 */"
      end

      operation 128054 "Value"
	stereotype "constructor"
	public explicit_return_type ""
	nparams 1
	  param in name "value" explicit_type "double"
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} :
  _value(value)
{
  ${body}}
"
	
	
	comment "/**
 * @brief A constructor from a double
 */"
      end

      operation 147970 "Value"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 128060 // Value
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} :
 _value(source._value) 
{
  ${body}}
"
	
	
      end

      operation 128107 "get_value"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return _value;
}
"
	cpp_name_spec "get${name}"
	final 
	java_name_spec "get_${name}"
	
	idl_name_spec "get_${name}"
	get_of_attribute attribute_ref 128060 // _value
	comment "/**
 *  @brief The get accessor.
 */"
      end

      operation 128235 "set_value"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "double"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  _value = ${p0};
}
"
	cpp_name_spec "set${name}"
	
	java_name_spec "set_${name}"
	
	idl_name_spec "set_${name}"
	set_of_attribute attribute_ref 128060 // _value
	comment "/**
 *  @brief The set accessor
 *  @param ${p0} the ${class} to set.
 */"
      end

      operation 128363 "operator=="
	const public explicit_return_type "bool"
	nparams 1
	  param in name "value" type class_ref 128060 // Value
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 128004 "operator<="
	const public explicit_return_type "bool"
	nparams 1
	  param in name "value" type class_ref 128060 // Value
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 152194 "operator>="
	const public explicit_return_type "bool"
	nparams 1
	  param in name "value" type class_ref 128060 // Value
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 128260 "operator<"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "value" type class_ref 128060 // Value
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 128388 "operator>"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "value" type class_ref 128060 // Value
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 128516 "operator+="
	public return_type class_ref 128060 // Value
	nparams 1
	  param in name "value" type class_ref 128060 // Value
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 128644 "operator-="
	public return_type class_ref 128060 // Value
	nparams 1
	  param in name "value" type class_ref 128060 // Value
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 128772 "operator*="
	public return_type class_ref 128060 // Value
	nparams 1
	  param in name "value" type class_ref 128060 // Value
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 128900 "operator/="
	public return_type class_ref 128060 // Value
	nparams 1
	  param in name "value" type class_ref 128060 // Value
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 129028 "operator+"
	const public return_type class_ref 128060 // Value
	nparams 1
	  param in name "value" type class_ref 128060 // Value
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 129156 "operator-"
	const public return_type class_ref 128060 // Value
	nparams 1
	  param in name "value" type class_ref 128060 // Value
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 129284 "operator*"
	const public return_type class_ref 128060 // Value
	nparams 1
	  param in name "value" type class_ref 128060 // Value
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 129412 "operator/"
	const public return_type class_ref 128060 // Value
	nparams 1
	  param in name "value" type class_ref 128060 // Value
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 129540 "printToStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief print the ${class} into a flux
 * \\param flux The stream to print into.
 */"
      end

      operation 128182 "toStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Save the ${class} into a stream.
 * \\param flux the stream to save the ${class} into.
 * \\return The stream with the ${class}.
 */"
      end

      operation 128310 "fromStream"
	public explicit_return_type "istream"
	nparams 1
	  param inout name "flux" explicit_type "istream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Restore a ${class} from a stream.
 * \\param flux The stream containing the ${class} to restore.
 */"
      end
    end

    class 130562 "map"nformals 2
      formal name "C" type "class" explicit_default_value ""
        explicit_extends ""
      formal name "T" type "class" explicit_default_value ""
        explicit_extends ""
      cpp_external cpp_decl "${name}
#include <${name}>
"
      java_decl "${comment}${@}${public}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      
    end

    class 129026 "string"cpp_external cpp_decl "${name}
#include <${name}>
"
      java_decl "${comment}${@}${public}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      
    end

    class 131202 "HKLObject"cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 132098 // <generalisation>
	relation 131714 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 132098 // <generalisation>
	  b parent class_ref 129282 // ObjectReadOnly
      end

      classrelation 131970 // _parameters (<directional aggregation by value>)
	relation 131586 *-->
	  a role_name "_parameters" multiplicity "1" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 131970 // _parameters (<directional aggregation by value>)
	  b parent class_ref 131074 // ParameterList
      end

      operation 159234 "HKLObject"
	public explicit_return_type ""
	nparams 2
	  param in name "name" type class_ref 129026 // string
	  param in name "description" type class_ref 129026 // string
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile}${throw}:
  ObjectReadOnly(name, description)  
{
  ${body}}
"
	
	
	comment "/**
 * @brief The default constructor
 * @param ${p0} The name of the ${class}.
 * @param ${p1} The description of the ${class}.
 * @throw HKLException if the ${p0} and/or the ${p1} are wrong. 
 */"
      end

      operation 159362 "parameters"
	public return_type class_ref 131074 // ParameterList
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 159490 "operator=="
	const public explicit_return_type "bool"
	nparams 1
	  param in name "hklObject" type class_ref 131202 // HKLObject
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * \\brief Are two ${class} equals ?
 * \\param ${p0} the ${t0} to compare with.
 * \\return true if both are equals flase otherwise.
 */"
      end

      operation 159618 "printToStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief print the ${class} into a flux
 * @param ${p0} The stream to print into.
 * @return The modified flux.
 */"
      end

      operation 159746 "toStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief print on a stream the content of the ${class}
 * @param flux the ostream to modify.
 * @return the modified ostream
 */"
      end

      operation 159874 "fromStream"
	public explicit_return_type "istream"
	nparams 1
	  param inout name "flux" explicit_type "istream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief restore the content of the ${class} from an istream
 * @param flux the istream.
 * @return the modified istream.
 * @todo problem of security here.
 */"
      end
    end

    class 131458 "Source"cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 132610 // _waveLength (<directional aggregation by value>)
	relation 132226 *-->
	  a role_name "_waveLength" multiplicity "1" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 132610 // _waveLength (<directional aggregation by value>)
	  b parent class_ref 128060 // Value
	get_oper operation_ref 162562 // get_waveLength
      end

      classrelation 132738 // _direction (<directional aggregation by value>)
	relation 132354 *-->
	  a role_name "_direction" multiplicity "" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 132738 // _direction (<directional aggregation by value>)
	  b parent class_ref 128002 // svector
	get_oper operation_ref 162690 // get_direction
      end

      classrelation 132866 // _qi (<directional aggregation by value>)
	relation 132482 *-->
	  a role_name "_qi" multiplicity "" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 132866 // _qi (<directional aggregation by value>)
	  b parent class_ref 128770 // Quaternion
	get_oper operation_ref 162818 // get_qi
      end

      operation 162306 "Source"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} :
  _waveLength(1.54),
  _direction(svector(1,0,0)) 
{
  ${body}}
"
	
	
	comment "/**
 * @brief Default Constructor.
 *
 * Create a new ${class} with all is privates parameters set to zero.
 * After this you must set the waveLength before using it, with the
 * setWaveLength method.
 */"
      end

      operation 162434 "Source"
	public explicit_return_type ""
	nparams 2
	  param in name "waveLength" type class_ref 128060 // Value
	  param in name "direction" type class_ref 128002 // svector
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile}${throw} 
{
  ${body}}
"
	
	
	comment "/**
 * @brief Constructor from parameters
 * @param ${p0} the wavelength of the beam.
 * @param ${p1} the X-rays beam direction. This parameter is normalize.
 *
 * Create a new ${class} from the parameters.
 * <b>_waveLength unit must be consistent with the crystal length units</b>.
 */"
      end

      operation 162562 "get_waveLength"
	const cpp_inline public return_type class_ref 128060 // Value
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return _waveLength;
}
"
	cpp_name_spec "get${name}"
	final 
	java_name_spec "get${name}"
	
	idl_name_spec "get${name}"
	get_of_relation classrelation_ref 132610 // _waveLength (<directional aggregation by value>)
      end

      operation 162690 "get_direction"
	const cpp_inline public return_type class_ref 128002 // svector
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return _direction;
}
"
	cpp_name_spec "get${name}"
	final 
	java_name_spec "get${name}"
	
	idl_name_spec "get${name}"
	get_of_relation classrelation_ref 132738 // _direction (<directional aggregation by value>)
      end

      operation 162818 "get_qi"
	const cpp_inline public return_type class_ref 128770 // Quaternion
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return _qi;
}
"
	cpp_name_spec "get${name}"
	final 
	java_name_spec "get${name}"
	
	idl_name_spec "get${name}"
	get_of_relation classrelation_ref 132866 // _qi (<directional aggregation by value>)
      end

      operation 162946 "setWaveLength"
	public explicit_return_type "void"
	nparams 1
	  param in name "waveLength" type class_ref 128060 // Value
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief set the wavelength
 * @param ${p0} the wavelength to set.
 * @exception HKLException if ${p0} == 0.
 *
 * Set the _p{0} of the source
 * <b>wl unit must be consistent with the crystal length units</b>.
 */"
      end

      operation 163074 "setDirection"
	public explicit_return_type "void"
	nparams 1
	  param in name "direction" type class_ref 128002 // svector
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Set the _{p0} of the ${class}.
 * @param ${p0} to set
 *
 * The ${p0} is normalize.
 */"
      end

      operation 163202 "getKi"
	const public return_type class_ref 128002 // svector
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the ki vector
 */"
      end

      operation 163330 "setKi"
	public explicit_return_type "void"
	nparams 1
	  param in name "ki" type class_ref 128002 // svector
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief set the ki vector
 */"
      end

      operation 163458 "operator=="
	const public explicit_return_type "bool"
	nparams 1
	  param in name "source" type class_ref 131458 // Source
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * \\brief Are two ${class} equals ?
 * \\param ${p0} the ${t0} to compare with.
 * \\return true if both are equals flase otherwise.
 */"
      end

      operation 163586 "printToStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief print the ${class} into a flux
 * @param ${p0} The stream to print into.
 * @return The modified flux.
 */"
      end

      operation 163714 "toStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief print on a stream the content of the ${class}
 * @param flux the ostream to modify.
 * @return the modified ostream
 */"
      end

      operation 163842 "fromStream"
	public explicit_return_type "istream"
	nparams 1
	  param inout name "flux" explicit_type "istream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief restore the content of the ${class} from an istream
 * @param flux the istream.
 * @return the modified istream.
 * @todo problem of security here.
 */"
      end
    end
  end

  deploymentview 128060 "Deployment hkl"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default
    artifact 129410 "axe"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}

/**
 * \\brief Overload of the << operator for the Axe class
 */
inline ostream &
operator<<(ostream & flux, hkl::Axe const & axe)
{
  return axe.printToStream(flux);
}
#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}"
      idl_src "#ifndef _${NAME}_H
#define _${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_classes
	class_ref 130050 // Axe
	class_ref 130690 // AxeMap
	class_ref 130818 // AxeList
      end
    end

    artifact 128258 "constant"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 128130 // constant
      end
    end

    artifact 128642 "convenience"
      stereotype "source"
      cpp_h "#ifndef _CONVENIENCE_H
#define _CONVENIENCE_H

#include <HKLException.h>

namespace hkl
  {
  namespace convenience
    {

    /**
     * @brief return the right angle in between[_pi,pi]
     * @param angle The angle to normalize.
     * @return The angle.
     */
    double normalizeAngle(double angle);

    /*!
     * \\brief Compute the atan2 function.
     * \\param s The y coordinate of the point P in the xOy plan.
     * \\param c The x coordinate of the point P in the xOy plan.
     * \\return the angle between Ox and OP.
     */
    double atan2(double s, double c);

    /*!
     * Compute the asin function.
     * \\param s The sinus of the angle.
     * \\throw HKLException if \\f$ /abs(s) > 1\\f$.
     * \\return The asinus of the angle.
     */
    double asin(double s) throw (HKLException);

  } // namespace convenience
} // namespace hkl

#endif //_CONVENIENCE_H
"
      cpp_src "#include \"portability.h\"

#include <cmath>

#include \"constant.h\"
#include \"convenience.h\"

namespace hkl
  {
  namespace convenience
    {

    double
    normalizeAngle(double angle)
    {
      double res = ::atan2(::sin(angle), ::cos(angle));
      if (fabs(res - constant::math::pi) < constant::math::epsilon
          && angle < 0)
        res = -res;

      return res;
    }

    double
    atan2(double s, double c)
    {
      double angle;

      if (fabs(s) < constant::math::epsilon) s = 0.;
      if (fabs(c) < constant::math::epsilon) c = 0.;
      angle = ::atan2(s, c);
      if (fabs(angle) < constant::math::epsilon) angle = 0.;
      return angle;
    }

    double
    asin(double s) throw (HKLException)
    {
      double angle;
      if (fabs(s) - 1. > constant::math::epsilon)
        HKLEXCEPTION(\"sinus bigger than 1.\", \"\");
      else
        angle = ::asin(s);

      if (fabs(angle) < constant::math::epsilon) angle = 0.;

      return angle;
    }

  } // namespace convenience
} // namespace hkl
"
      associated_classes
      end
    end

    artifact 129538 "fitparameter"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}

/*!
 * \\brief Overload of the << operator for the FitParameter class
 * \\param flux
 * \\param fitParameter
 * \\return The flux modified.
 */
inline ostream &
operator<<(ostream & flux, hkl::FitParameter const & fitParameter)
{
  return fitParameter.printToStream(flux);
}

#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 130178 // FitParameter
      end
    end

    artifact 128182 "HKLException"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
#include <sstream>

#define HKLEXCEPTION(a,b)  do {\\
    std::ostringstream location;\\
    location << __FILE__ << \" line : \" << __LINE__;\\
    throw HKLException((a),(b),location.str());\\
} while(0)

${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}"
      idl_src "#ifndef _${NAME}_H
#define _${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_classes
	class_ref 128438 // ErrorSeverity
	class_ref 128310 // Error
	class_ref 128211 // ErrorList
	class_ref 128182 // HKLException
      end
    end

    artifact 129666 "mymap"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      associated_classes
	class_ref 130306 // MyMap
      end
    end

    artifact 128770 "mystring"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      idl_src "#ifndef _${NAME}_H
#define _${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_classes
	class_ref 128898 // MyString
      end
    end

    artifact 128898 "object"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
/**
 * \\brief Surcharge de l'operateur << pour la class BaseObject
 * @param flux 
 * @param m 
 * @return 
 */
static std::ostream & operator << (std::ostream & flux, hkl::ObjectBase const & object)
{
  return object.printToStream(flux);
}
#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 129154 // ObjectBase
	class_ref 129282 // ObjectReadOnly
	class_ref 129410 // Object
      end
    end

    artifact 129026 "observer"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 129538 // Observer
	class_ref 129666 // Observable
      end
    end

    artifact 129282 "parameter"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}

/*!
 * \\brief Overload of the << operator for the Parameter class
 * \\param flux The ostream to modify.
 * \\param parameter The Parameter to print.
 * \\return the modified ostream 
 */
inline ostream &
operator<<(ostream & flux, hkl::Parameter const & parameter)
{
  return parameter.printToStream(flux);
}
#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 129922 // Parameter
      end
    end

    artifact 129794 "parameterlist"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
#include \"parameter.h\"
${declarations}
${namespace_start}
${definition}
${namespace_end}
/*!
 * @brief Overload of the << operator for the %ParameterList class
 * @param flux
 * @param parameterList
 * @return the modified flux.
 */
inline ostream &
operator<<(ostream & flux, hkl::ParameterList const & parameterList)
{
  return parameterList.printToStream(flux);
}

#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 131074 // ParameterList
      end
    end

    artifact 128386 "quaternion"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
#include \"convenience.h\"
${declarations}
${namespace_start}
${definition}
${namespace_end}

/**
 * \\brief Surcharge de l'operateur << pour la class Quaternion
 * @param flux 
 * @param m 
 * @return 
 */
static std::ostream & operator << (std::ostream & flux, hkl::Quaternion const & q)
{
  return q.printToStream(flux);
}
#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 128770 // Quaternion
      end
    end

    artifact 129154 "range"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}

/*!
 * \\brief Overload of the << operator for the Range clas
 * \\param flux The ostream to modify.
 * \\param range The range to print.
 * 
 * \\return the modified ostream 
 */
inline ostream &
operator<<(ostream & flux, hkl::Range const & range)
{
  return range.printToStream(flux);
}

inline hkl::Range cos(hkl::Range const & range)
{
  hkl::Range res;

  double min = range.get_min().get_value();
  double current = range.get_current().get_value();
  double max = range.get_max().get_value();

  if (max - min >= 2 * hkl::constant::math::pi)
    res.set(-1, cos(current), 1);
  else
    {
      int quad_min = (int)floor(2 * min / hkl::constant::math::pi) % 4;
      if (quad_min < 0)
        quad_min += 4;

      int quad_max = (int)floor(2 * max / hkl::constant::math::pi) % 4;
      if (quad_max < 0)
        quad_max += 4;

      //cout << \"quadrant : \" << quad_min << \", \" << quad_max << endl;
      switch (quad_max)
        {
        case 0:
          switch (quad_min)
            {
            case 0:
              res.set(cos(max), cos(current), cos(min));
              break;
            case 1:
              res.set(-1, cos(current), 1);
              break;
            case 2:
              res.set(cos(min), cos(current), 1);
              break;
            case 3:
              if (cos(min) < cos(max))
                res.set(cos(min), cos(current), 1);
              else
                res.set(cos(max), cos(current), 1);
              break;
            }
          break;
        case 1:
          switch (quad_min)
            {
            case 0:
            case 1:
              res.set(cos(max), cos(current), cos(min));
              break;
            case 2:
              if (cos(min) < cos(max))
                res.set(cos(min), cos(current), 1);
              else
                res.set(cos(max), cos(current), 1);
              break;
            case 3:
              res.set(cos(max), cos(current), 1);
              break;
            }
          break;
        case 2:
          switch (quad_min)
            {
            case 0:
              res.set(-1, cos(current), cos(min));
              break;
            case 1:
              if (cos(min) < cos(max))
                res.set(-1, cos(current), cos(max));
              else
                res.set(-1, cos(current), cos(min));
              break;
            case 2:
              res.set(cos(min), cos(current), cos(max));
              break;
            case 3:
              res.set(-1, cos(current), 1);
              break;
            }
          break;
        case 3:
          switch (quad_min)
            {
            case 0:
              if (cos(min) < cos(max))
                res.set(-1, cos(current), cos(max));
              else
                res.set(-1, cos(current), cos(min));
              break;
            case 1:
              res.set(-1, cos(current), cos(max));
              break;
            case 2:
            case 3:
              res.set(cos(min), cos(current), cos(max));
              break;
            }
          break;
        }
    }
  //cout << \"cos   : \" << res << endl;
  return res;
}

inline hkl::Range acos(hkl::Range const & range)
{
  double min = acos(range.get_max().get_value());
  double current = acos(range.get_current().get_value());
  double max = acos(range.get_min().get_value());

  return hkl::Range(min, current, max);
}
#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 129794 // Range
      end
    end

    artifact 128130 "svector"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
#include <math.h>
#include <cstdlib>
#include <iomanip>
#include \"HKLException.h\"
#include \"constant.h\"

${declarations}
${namespace_start}

//forward declaration
class smatrix;

${definition}
${namespace_end}

/**
 * \\brief Surcharge de l'operateur << pour la class svector
 * @param flux 
 * @param m 
 * @return 
 */
static std::ostream & operator << (std::ostream & flux, hkl::svector const & v)
{
  return v.printToStream(flux);
}

/**
 * \\brief Surcharge de l'operateur << pour la class smatrix
 * @param flux 
 * @param m 
 * @return 
 */
static std::ostream & operator << (std::ostream & flux, hkl::smatrix const & m)
{
  return m.printToStream(flux);
}

#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}
"
      associated_classes
	class_ref 128002 // svector
	class_ref 128514 // smatrix
      end
    end

    artifact 128060 "value"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
#include <cmath>
#include <iomanip>
#include \"constant.h\"
${declarations}
${namespace_start}
${definition}
${namespace_end}

/**
 * \\brief Surcharge de l'operateur << pour la class Value
 * @param flux 
 * @param m 
 * @return 
 */
static std::ostream & operator << (std::ostream & flux, hkl::Value const & value)
{
  return value.printToStream(flux);
}

inline hkl::Value
fabs(hkl::Value const & value)
{
  hkl::Value res(fabs(value.get_value()));
  return res;
}

inline hkl::Value
cos(hkl::Value const & value)
{
  hkl::Value res(cos(value.get_value()));
  return res;
}

inline double
operator/(double d, hkl::Value const & value)
{
  return d / value.get_value();
}

inline double
operator*(double d, hkl::Value const & value)
{
  return d * value.get_value();
}
#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      idl_src "#ifndef _${NAME}_H
#define _${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_classes
	class_ref 128060 // Value
      end
    end

    artifact 129922 "hklobject"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
/*!
 * @brief Overload of the << operator for the HKLObject class
 * @param flux
 * @param hklObject
 * @return the modified flux.
 */
inline ostream &
operator << (ostream & flux, hkl::HKLObject const & hklObject)
{
  return hklObject.printToStream(flux);
}

#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 131202 // HKLObject
      end
    end

    artifact 130050 "fitparameterlist"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
#include \"fitparameter.h\"
${declarations}
${namespace_start}
${definition}
${namespace_end}
/*!
 * @brief Overload of the << operator for the %FitParameterList class
 * @param flux
 * @param fitParameterList
 * @return the modified flux.
 */
ostream & operator<<(ostream & flux, hkl::FitParameterList const & fitParameterList);
#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 131330 // FitParameterList
      end
    end

    artifact 130178 "source"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
#include \"value.h\"
#include \"svector.h\"
#include \"quaternion.h\"
${declarations}
${namespace_start}
${definition}
${namespace_end}
/**
 * @brief Surcharge de l'operateur << pour la class Source
 * @param flux The ostream to print into.
 * @param source The Source to print. 
 * @return the modified flux.
 */
inline ostream &
operator << (ostream & flux, hkl::Source const & source)
{
  return source.printToStream(flux);
}
#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 131458 // Source
      end
    end
  end
end
