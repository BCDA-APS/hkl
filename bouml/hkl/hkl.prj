format 29
"hkl"
  revision 24
  modified_by 2 "picca"
  cpp_root_dir "/home/picca/Projets/hkl/"


  
  // class settings
  default_attribute_visibility protected default_relation_visibility protected default_operation_visibility public
  //class diagram settings
  draw_all_relations yes hide_attributes no hide_operations no show_members_full_definition yes show_members_visibility yes package_name_in_tab yes class_drawing_mode class drawing_language uml show_context_mode namespace auto_label_position yes shadow yes
  //use case diagram settings
  package_name_in_tab no show_context no auto_label_position yes shadow yes
  //sequence diagram settings
  show_full_operations_definition no write_horizontally yes drawing_language uml shadow yes
  //collaboration diagram settings
  show_full_operations_definition no show_hierarchical_rank no write_horizontally yes drawing_language uml package_name_in_tab no show_context no shadow yes
  //object diagram settings
   write_horizontally yes package_name_in_tab no show_context no auto_label_position yes shadow yes
  //component diagram settings
  package_name_in_tab no show_context no auto_label_position yes shadow yes
  draw_component_as_icon no show_component_req_prov no show_component_rea no
  //deployment diagram settings
  package_name_in_tab no show_context no write_horizontally yes auto_label_position yes shadow yes
  draw_component_as_icon no show_component_req_prov no show_component_rea no
  //state diagram settings
  package_name_in_tab no show_context no auto_label_position yes write_trans_label_horizontally yes show_trans_definition no shadow yes
  show_activities yes region_horizontally yes drawing_language uml
  //activity diagram settings
  package_name_in_tab no show_context no show_opaque_action_definition no auto_label_position yes write_flow_label_horizontally no shadow yes
  show_infonote yes drawing_language c++
  
  class_color yellow duration_color transparent continuation_color gray note_color blue fragment_color transparent subject_color transparent usecase_color yellow package_color transparent component_color green artifact_color green deploymentnode_color gray state_color yellow stateaction_color transparent activity_color transparent activityregion_color transparent activityaction_color transparent parameterpin_color white 
  font_size 10
  diagram_format A4

  mark_for_import
  
  cpp_h_dir "include/hkl/"
  cpp_src_dir "src/"
  cpp_namespace "hkl"
  classview 128117 "class view hkl"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default shadow default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default shadow default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default shadow default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default drawing_language default shadow default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default shadow default
    show_activities default region_horizontally default drawing_language default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default shadow default
    show_infonote default drawing_language default
    
    associated_deployment_view deploymentview_ref 128060 // Deployment hkl
    comment "*
  @the base class of the hkl library"
    classdiagram 128188 "Diagram_1"
      draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default shadow default
      size A0-Landscape
    end

    classdiagram 128002 "Diagram_2"
      draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default shadow default
      comment "Source
Lattice
Geometries"
      size A0
    end

    classdiagram 128130 "Diagram_3"
      draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default shadow default
      comment "PseudoAxes"
      size A0
    end

    classdiagram 128898 "Diagram_4"
      draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default shadow default
      comment "Mode"
      size A0
    end

    class 130050 "Axe"cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 130946 // <generalisation>
	relation 130690 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 130946 // <generalisation>
	  b parent class_ref 130178 // FitParameter
      end

      attribute 131202 "_axe"
	protected type class_ref 128002 // svector
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
	comment "/**
 * @brief the coordinates of the axe of rotation in a othonormal base.
 */ "
      end

      attribute 131330 "_direction"
	protected explicit_type "int"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
	comment "//!< rotation direction of the axe"
      end

      operation 153218 "Axe"
	public explicit_return_type ""
	nparams 7
	  param in name "name" type class_ref 129026 // string
	  param in name "description" type class_ref 129026 // string
	  param in name "min" type class_ref 128060 // Value
	  param in name "current" type class_ref 128060 // Value
	  param in name "max" type class_ref 128060 // Value
	  param in name "axe" type class_ref 128002 // svector
	  param in name "direction" explicit_type "int"
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}, const ${t4} & ${p4}, const ${t5} & ${p5}, ${t6} ${p6}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}, const ${t4} & ${p4}, const ${t5} & ${p5}, ${t6} ${p6}${)}${volatile}${throw} :
  FitParameter(${p0}, ${p1} , ${p2} , ${p3}, ${p4}, true, constant::math::epsilon) 
{
  ${body}}
"
	
	
	comment "/**
 * @brief constructor
 * @param ${p0} The name of the ${class}.
 * @param ${p1} The description of the ${class}.
 * @param ${p2} The minimum of the ${class}.
 * @param ${p3} The current position of the ${class}.
 * @param ${p4} The maximum value of the ${class}.
 * @param ${p5} The ${t5} ${class} rotation axe coordinates.
 * @param ${p6} +1 or -1 if the axe is a direct one or not.
 */
"
      end

      operation 155778 "get_axe"
	const public return_type class_ref 128002 // svector
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Return the ${class} axe of rotation coordinates.
 * @return The axe coordinates as a 3 elements vector.
 */"
      end

      operation 155906 "get_direction"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Return the axe rotation direction
 * \\return +1 if the sens of rotation is direct
 * -1 otherwise
 */"
      end

      operation 155522 "operator=="
	const public explicit_return_type "bool"
	nparams 1
	  param in name "axe" explicit_type "Axe"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * \\brief Are two ${class} equals ?
 * \\param ${p0} the ${class} to compare with.
 * \\return The comparison of the two ${class}.
 */"
      end

      operation 155650 "asQuaternion"
	const public return_type class_ref 128770 // Quaternion
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * @brief Get the ${class} as a Quaternion.
 * @return The Quaternion corresponding to the ${class}.
 */"
      end

      operation 156034 "getDistance"
	const public explicit_return_type "double"
	nparams 1
	  param in name "axe" explicit_type "Axe"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Compute the distance between two Axes.
 * @param axe The Axe to compute the distance from. 
 * @return The distance between the two axes.
 */"
      end

      operation 156162 "printToStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief print the ${class} into a flux
 * \\param flux The stream to print into.
 */"
      end

      operation 156290 "toStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Save the ${class} into a stream.
 * \\param flux the stream to save the ${class} into.
 * \\return The stream with the ${class}.
 */"
      end

      operation 156418 "fromStream"
	public explicit_return_type "istream"
	nparams 1
	  param inout name "flux" explicit_type "istream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Restore a ${class} from a stream.
 * \\param flux The stream containing the ${class} to restore.
 * @todo call update_observers or not ?
 */"
      end
    end

    class 130818 "AxeList"
       stereotype "typedef"
       explicit_base_type "vector"
      cpp_decl "${description}typedef ${type}<Axe *> ${name};
"
      java_decl ""
      idl_decl "${comment}typedef ${type} ${name};
"
      explicit_switch_type ""
      
    end

    class 130690 "AxeMap"
       stereotype "typedef"
       base_type class_ref 130306 // MyMap
      cpp_decl "${description}typedef ${type}<Axe> ${name};
"
      java_decl ""
      idl_decl "${comment}typedef ${type} ${name};
"
      explicit_switch_type ""
      
    end

    class 128130 "constant"cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 128258 "math"
	visibility public
	cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 128386 "epsilon"
	  class_attribute package explicit_type "double"
	  init_value "= 1e-6"
	  cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  idl_decl ""
	end

	attribute 130306 "tiny"
	  class_attribute package explicit_type "double"
	  init_value "= 1e-7"
	  cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  idl_decl ""
	end

	attribute 129666 "precision"
	  class_attribute package explicit_type "int"
	  init_value "= 7"
	  cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  idl_decl ""
	end

	attribute 130050 "pi"
	  class_attribute package explicit_type "double"
	  init_value "= 3.14159265358979323846"
	  cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  idl_decl ""
	end

	attribute 129794 "degToRad"
	  class_attribute package explicit_type "double"
	  init_value "= 0.01745329251994330"
	  cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  idl_decl ""
	end

	attribute 129922 "radToDeg"
	  class_attribute package explicit_type "double"
	  init_value "= 57.2957795130823208"
	  cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  idl_decl ""
	end
      end

      class 128386 "physic"
	visibility public
	cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 130178 "tau"
	  class_attribute package explicit_type "double"
	  init_value "= 2 * 3.14159265358979323846"
	  cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  idl_decl ""
	end
      end
    end

    class 128310 "Error"cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 128211 "reason"
	public explicit_type "string"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 128339 "desc"
	public explicit_type "string"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 128467 "origin"
	public explicit_type "string"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 128595 "severity"
	public explicit_type "int"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      operation 128339 "Error"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} :
  reason (\"unknown\"),
  desc (\"unknown error\"),
  origin (\"unknown\"),
  severity (ERR)
{
  ${body}}
"
	
	
      end

      operation 128467 "Error"
	public explicit_return_type ""
	nparams 4
	  param in name "_reason" explicit_type "char"
	  param in name "_desc" explicit_type "char"
	  param in name "_origin" explicit_type "char"
	  param in name "_severity" explicit_type "int"
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} * ${p0}, const ${t1} * ${p1}, const ${t2} * ${p2}, ${t3} ${p3} = ERR${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} * ${p0}, const ${t1} * ${p1}, const ${t2} * ${p2}, ${t3} ${p3}${)}${volatile}${throw} :
  reason (_reason),
  desc (_desc),
  origin (_origin),
  severity (_severity)
{
  ${body}}
"
	
	
      end

      operation 128595 "Error"
	public explicit_return_type ""
	nparams 4
	  param in name "_reason" explicit_type "string"
	  param in name "_desc" explicit_type "string"
	  param in name "_origin" explicit_type "string"
	  param in name "_severity" explicit_type "int"
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, ${t3} ${p3} = ERR${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, ${t3} ${p3}${)}${volatile}${throw} : 
  reason (_reason),
  desc (_desc),
  origin (_origin),
  severity (_severity)
{
  ${body}}
"
	
	
      end

      operation 128723 "Error"
	public explicit_return_type ""
	nparams 1
	  param in name "error" type class_ref 128310 // Error
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} :
    reason (error.reason),
    desc (error.desc),
    origin (error.origin),
    severity (error.severity)
{
  ${body}}
"
	
	
      end

      operation 128851 "~Error"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} 
{
  ${body}}
"
	
	
      end

      operation 128979 "operator="
	public return_type class_ref 128310 // Error
	nparams 1
	  param in name "error" type class_ref 128310 // Error
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end
    end

    class 128211 "ErrorList"
       stereotype "typedef"
       explicit_base_type "vector<Error>"
      cpp_decl "${description}typedef ${type} ${name};
"
      java_decl ""
      idl_decl "${comment}typedef ${type} ${name};
"
      explicit_switch_type ""
      
    end

    class 128438 "ErrorSeverity"
       stereotype "enum"
      cpp_decl "${description}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${public}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      idl_decl "${comment}enum ${name} {
${items}};
"
      explicit_switch_type ""
      
      attribute 128054 "WARN"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	idl_decl ""
      end

      attribute 128182 "ERR"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	idl_decl ""
      end

      attribute 128310 "PANIC"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	idl_decl ""
      end
    end

    class 130178 "FitParameter"cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 130690 // <generalisation>
	relation 130434 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 130690 // <generalisation>
	  b parent class_ref 129922 // Parameter
      end

      operation 153346 "FitParameter"
	public explicit_return_type ""
	nparams 7
	  param in name "name" type class_ref 129026 // string
	  param in name "description" type class_ref 129026 // string
	  param in name "min" type class_ref 128060 // Value
	  param in name "current" type class_ref 128060 // Value
	  param in name "max" type class_ref 128060 // Value
	  param in name "toFit" explicit_type "bool"
	  param in name "precision" explicit_type "double"
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}, const ${t4} & ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}, const ${t4} & ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${volatile}${throw}  :
  Parameter(name, description, min, current, max),
  _flagFit(toFit),
  _precision(precision),
  _chi2(0)
{
  ${body}}
"
	
	
	comment "/**
 * @brief Constructor
 * @param ${p0] of the ${class}.
 * @param ${p1} The description of the ${class}.
 * @param ${p2} the minimum of the ${class}.
 * @param ${p3} the current value of the ${class}.
 * @param ${p4} the maximum of the ${class}.
 * @param ${p5} is a fit parameter or not
 * @param ${p6} to fullfill for the fit.
 */"
      end

      attribute 131458 "_flagFit"
	protected explicit_type "bool"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
	comment "/**
 * @brief This flag is true if this ${class} must be fit.
 */"
      end

      attribute 131586 "_precision"
	protected type class_ref 128060 // Value
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
	comment "/**
 * @brief The precision for the fit we expect on this ${class}.
 */"
      end

      attribute 131714 "_chi2"
	protected type class_ref 128060 // Value
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
	comment "/**
 * @brief The \\f$\\chi^2\\f$ obtained after the fit.
 */"
      end

      operation 153602 "get_flagFit"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the flag of the ${class} class.
 * @return The _flagFit bool member.
 */"
      end

      operation 153730 "get_precision"
	const public return_type class_ref 128060 // Value
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the precision of the ${class} class.
 * @return A constant Value ref on the _precision member.
 */"
      end

      operation 153858 "get_chi2"
	const public return_type class_ref 128060 // Value
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the _chi2 of the ${class} class.
 * @return A constant Value ref on the _chi2 member.
 */"
      end

      operation 153986 "set_flagFit"
	public explicit_return_type "void"
	nparams 1
	  param in name "flagFit" explicit_type "bool"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Set the _flagFit member of the ${class} class.
 * @param flagFit The bool to set. 
 */"
      end

      operation 154114 "set_precision"
	public explicit_return_type "void"
	nparams 1
	  param in name "precision" type class_ref 128060 // Value
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Set the _${p0} member of the ${class} class.
 * @param ${p0} The ${t0} to set. 
 */"
      end

      operation 154754 "set_chi2"
	public explicit_return_type "void"
	nparams 1
	  param in name "chi2" type class_ref 128060 // Value
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Set the _${p0} member of the ${class} class.
 * @param ${p0} The ${t0} to set. 
 */"
      end

      operation 154882 "operator=="
	const public explicit_return_type "bool"
	nparams 1
	  param in name "fitParameter" type class_ref 130178 // FitParameter
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * \\brief Are two ${class} equals ?
 * \\param ${p0} the ${class} to compare with.
 * \\return The comparison of the two ${class}.
 */"
      end

      operation 155010 "randomize"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief shuffle the ${class}.
 */"
      end

      operation 155138 "printToStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief print the ${class} into a flux
 * \\param flux The stream to print into.
 */"
      end

      operation 155266 "toStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Save the ${class} into a stream.
 * \\param flux the stream to save the ${class} into.
 * \\return The stream with the ${class}.
 */"
      end

      operation 155394 "fromStream"
	public explicit_return_type "istream"
	nparams 1
	  param inout name "flux" explicit_type "istream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Restore a ${class} from a stream.
 * \\param flux The stream containing the ${class} to restore.
 * @todo call update_observers or not ?
 */"
      end
    end

    class 131330 "FitParameterList"
      abstract 
      cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 132482 // _parameters (<directional aggregation>)
	relation 132098 o-->
	  stereotype "vector"
	  a role_name "_parameters" multiplicity "*" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type} *> ${name}${value};
"
	    classrelation_ref 132482 // _parameters (<directional aggregation>)
	  b parent class_ref 130178 // FitParameter
      end

      operation 213122 "~FitParameterList"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} 
{
  ${body}}
"
	
	
      end

      operation 160130 "size"
	const public explicit_return_type "uint"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the size of the ${class}.
 * @return the number of element in the ${class}.
 */"
      end

      operation 161410 "size_to_fit"
	const public explicit_return_type "uint"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the number of Parameter to fit in the ${class}.
 * @return The number of Parameter with the fitFlag set to true.
 */"
      end

      operation 160258 "operator[]"
	public return_type class_ref 130178 // FitParameter
	nparams 1
	  param in name "name" type class_ref 129026 // string
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} * ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @return the ${t0} * named
 * @param ${p0} The name of the ${t0} we are looking for in the ${class}.
 * @return A ${t0} pointer.
 * @throw HKLException if the ${t0} is not present n the ${class}.
 */"
      end

      operation 160386 "begin"
	public explicit_return_type "vector<FitParameter *>::iterator"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get an iterator on the first element of the ${class}.
 * @return The iterator.
 */"
      end

      operation 160514 "end"
	public explicit_return_type "vector<FitParameter *>::iterator"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get an iterator on the end of the ${class}.
 * @return The iterator.
 */"
      end

      operation 160642 "begin"
	const public explicit_return_type "vector<FitParameter *>::const_iterator"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get an const_iterator on the first element of the ${class}.
 * @return The const_iterator.
 */"
      end

      operation 160770 "end"
	const public explicit_return_type "vector<FitParameter *>::const_iterator"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get an const_iterator on the end of the ${class}.
 * @return The const_iterator.
 */"
      end

      operation 161538 "ready_to_fit"
	abstract const cpp_virtual public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	comment "/**
 * @brief check if their is enought data to compute an affinement.
 * @return true if computation is possible.
 */"
      end

      operation 161666 "randomize"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	comment "/**
 * @brief Randomize all the FitParameters in the ${class}.
 */"
      end

      operation 161794 "fitness"
	abstract cpp_virtual public explicit_return_type "double"
	nparams 0
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	comment "/**
 * @brief Calculation of the fitness.
 * @return the fitness calculated from the fitParameters.
 * @throw HKLException if their is not enought data to perform the fitness calculus.
 */"
      end

      operation 161922 "fitness"
	abstract cpp_virtual public explicit_return_type "bool"
	nparams 1
	  param inout name "fitness" explicit_type "double"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	comment "/**
 * @brief Calculation of the fitness.
 * @param fitness A double use to store the fitness calculation.
 * @return True if the calculation if valid, false otherwise.
 *
 * this method is use in the simplex Affinement method, and do not throw Exception if the compuation is not valid.
 */"
      end

      operation 162050 "update"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	comment "/**
 * @brief update the fitparameterList.
 *
 * The fitparameters can be changed from the fitParameterList but some
 * other members can depend of these Parameter. So after an update you
 * can be sure that the object is completly coherant.
 */"
      end

      operation 162178 "operator=="
	const public explicit_return_type "bool"
	nparams 1
	  param in name "fitParameterList" type class_ref 131330 // FitParameterList
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Are two ${class} equals ?
 * \\param ${p0} the ${t0} to compare with.
 */
"
      end

      operation 161026 "printToStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief print the ${class} into a flux
 * \\param flux The stream to print into.
 */"
      end

      operation 161154 "toStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Save the ${class} into a stream.
 * \\param flux the stream to save the ${class} into.
 * \\return The stream with the ${class}.
 */"
      end

      operation 161282 "fromStream"
	public explicit_return_type "istream"
	nparams 1
	  param inout name "flux" explicit_type "istream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Restore a ${class} from a stream.
 * \\param flux The stream containing the ${class} to restore.
 * @todo call update_observers or not ?
 */"
      end
    end

    class 131714 "Geometry"cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 132994 // <generalisation>
	relation 132610 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 132994 // <generalisation>
	  b parent class_ref 131202 // HKLObject
      end

      attribute 133506 "_source"
	protected type class_ref 131458 // Source
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
	get_oper operation_ref 167938 // get_source
      end

      attribute 133634 "_axes"
	protected type class_ref 130690 // AxeMap
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 133762 "_sample"
	protected type class_ref 130818 // AxeList
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
	get_oper operation_ref 168322 // get_samples
      end

      attribute 133890 "_detector"
	protected type class_ref 130818 // AxeList
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      operation 167426 "Geometry"
	public explicit_return_type ""
	nparams 2
	  param in name "name" type class_ref 129026 // string
	  param in name "description" type class_ref 129026 // string
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile}${throw} :
  HKLObject(name, description)
{
  ${body}}
"
	
	
	comment "/**
 * @brief Create a new ${class}. 
 * @param ${p0} The name of the ${class}.
 * @param ${p1} The description of the ${class}.
 */"
      end

      operation 213250 "~Geometry"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} 
{
  ${body}}
"
	
	
      end

      operation 167682 "Geometry"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "geometry" type class_ref 131714 // Geometry
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} :
   HKLObject(geometry),
   _source(geometry._source),
   _axes(geometry._axes)
{
  ${body}}
"
	
	
      end

      operation 167810 "operator="
	public return_type class_ref 131714 // Geometry
	nparams 1
	  param in name "geometry" type class_ref 131714 // Geometry
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Assignation of the ${class}.
 * \\param ${p0} The ${class} to assign.
 */"
      end

      operation 167938 "get_source"
	const cpp_inline public return_type class_ref 131458 // Source
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return _source;
}
"
	cpp_name_spec "get${name}"
	final 
	java_name_spec "get${name}"
	
	idl_name_spec "get${name}"
	get_of_attribute attribute_ref 133506 // _source
	comment "/**
 * @brief Get the Source store in the Diffractometer.
 * @return A constant reference on the Source.
 */"
      end

      operation 168066 "get_source"
	cpp_inline public return_type class_ref 131458 // Source
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return _source;
}
"
	final 
	
	comment "/**
 * @brief Get the Source store in the Diffractometer.
 * @return A reference on the Source.
 */"
      end

      operation 168194 "axes"
	public return_type class_ref 130690 // AxeMap
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the AxeMap store in the ${class}.
 * @return A reference on the AxeMap.
 */"
      end

      operation 168322 "get_samples"
	cpp_inline public return_type class_ref 130818 // AxeList
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return _sample;
}
"
	cpp_name_spec "get${name}s"
	final 
	java_name_spec "get${name}"
	
	idl_name_spec "get${name}"
	get_of_attribute attribute_ref 133762 // _sample
	comment "/**
 * @brief Get the samples vector.
 * @return The vector containing all the sample axes.
 */"
      end

      operation 168450 "get_detectors"
	cpp_inline public return_type class_ref 130818 // AxeList
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return _detector;
}
"
	final 
	
	comment "/**
 * @brief Get the samples vector.
 * @return The vector containing all the sample axes.
 */"
      end

      operation 168578 "get_axe"
	public explicit_return_type "Axe"
	nparams 1
	  param in name "name" type class_ref 129026 // string
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the Axe named.
 * @param name the name of the Axe we are looking for.
 * @return a reference on the axe with the right name.
 * @throw HKLException if the axe do not exist.
 */"
      end

      operation 168706 "get_axe"
	const public explicit_return_type "Axe"
	nparams 1
	  param in name "name" type class_ref 129026 // string
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the Axe named.
 * @param name the name of the Axe we are looking for.
 * @return a reference on the axe with the right name.
 * @throw HKLException if the axe do not exist.
 */"
      end

      operation 168834 "getAxesNames"
	const public explicit_return_type "vector<string>"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Return a vector of MyString with the name of all axes.
 * \\return A list of all axes
 */"
      end

      operation 168962 "addSampleAxe"
	public explicit_return_type "Axe"
	nparams 1
	  param in name "axe" explicit_type "Axe"
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} * ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief  Add a new Axe into the m_samples vector
 * \\param A the Axe
 * \\throw HKLException Axe already present in the sample list or the detector list.
 */"
      end

      operation 169090 "addDetectorAxe"
	public explicit_return_type "Axe"
	nparams 1
	  param in name "axe" explicit_type "Axe"
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} * ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief  Add a new Axe into the m_detectors vector
 * \\param A the Axe
 * \\throw HKLException Axe exist already in the detector list or in the sample list.
 */"
      end

      operation 169218 "getSampleQuaternion"
	const public return_type class_ref 128770 // Quaternion
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief return the Rotatio matrix of the sample
 * \\return the quaternion corresponding to the state of the sample.
 */"
      end

      operation 169346 "getSampleRotationMatrix"
	const public return_type class_ref 128514 // smatrix
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief return the Rotatio matrix of the sample.
 * \\return The rotation matrix
 *
 * This method compute the rotation matrix by applying each Axe transformation from the m_samples svector.
 * So we can describe every diffractometer if we put the Axe in the right position into this svector
 */"
      end

      operation 169474 "getQ"
	const public return_type class_ref 128002 // svector
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief return the diffraction vector calculated from the detectors angles
 * \\return the Q svector
 */"
      end

      operation 169602 "getKf"
	const public return_type class_ref 128002 // svector
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief return the diffraction vector calculated from the detectors angles
 * \\return the Q svector
 */"
      end

      operation 169858 "getDistance"
	public explicit_return_type "double"
	nparams 1
	  param in name "geometry" type class_ref 131714 // Geometry
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief compute the distance between two Geometry
 *\\param geometry The Geometry to compute the distance from.
 *\\return The distance between both Geometry 
 */"
      end

      operation 169986 "computeHKL"
	public explicit_return_type "void"
	nparams 4
	  param out name "h" explicit_type "double"
	  param out name "k" explicit_type "double"
	  param out name "l" explicit_type "double"
	  param in name "UB" type class_ref 128514 // smatrix
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}, const ${t3} & ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}, const ${t3} & ${p3}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Compute hkl for an UB matrix. 
 * @param[out] h return the h parameter.
 * @param[out] k return the k parameter.
 * @param[out] l return the l parameter.
 * @param UB The UB matrix of a crystal.
 */"
      end

      operation 170114 "setFromGeometry"
	cpp_virtual public explicit_return_type "void"
	nparams 2
	  param in name "geometry" type class_ref 131714 // Geometry
	  param in name "strict" explicit_type "bool"
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Set the geometry from an other one. 
 * @param geometry The Geometry to set from.
 * @param strict true or false if the geometry conversion is strict or not.
 * @throw HKLException dependig of the geometry. 
 * @todo voir comment rendre cette fonction purement virtuelle = 0.
 */"
      end

      operation 170242 "operator=="
	const public explicit_return_type "bool"
	nparams 1
	  param in name "geometry" type class_ref 131714 // Geometry
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * \\brief Are two ${class} equals ?
 * \\param ${p0} the ${t0} to compare with.
 * \\return true if both are equals flase otherwise.
 */"
      end

      operation 170370 "printToStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief print the ${class} into a flux
 * @param ${p0} The stream to print into.
 * @return The modified flux.
 */"
      end

      operation 170498 "toStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief print on a stream the content of the ${class}
 * @param flux the ostream to modify.
 * @return the modified ostream
 */"
      end

      operation 170626 "fromStream"
	public explicit_return_type "istream"
	nparams 1
	  param inout name "flux" explicit_type "istream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief restore the content of the ${class} from an istream
 * @param flux the istream.
 * @return the modified istream.
 * @todo problem of security here.
 */"
      end
    end

    class 128182 "HKLException"
       stereotype "exception"
      cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl "${comment}exception ${name} {
${members}};
"
      explicit_switch_type ""
      
      classrelation 128130 // errors (<directional aggregation by value>)
	relation 128130 *-->
	  a role_name "errors" multiplicity "1" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 128130 // errors (<directional aggregation by value>)
	  b parent class_ref 128211 // ErrorList
      end

      operation 129107 "HKLException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} :
  errors(0)
{
  ${body}}
"
	
	
      end

      operation 128386 "HKLException"
	public explicit_return_type ""
	nparams 4
	  param in name "_reason" explicit_type "char"
	  param in name "_desc" explicit_type "char"
	  param in name "_origin" explicit_type "char"
	  param in name "_severity" explicit_type "int"
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} * ${p0}, const ${t1} * ${p1}, const ${t2} * ${p2}, ${t3} ${p3} = ERR${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} * ${p0}, const ${t1} * ${p1}, const ${t2} * ${p2}, ${t3} ${p3}${)}${volatile}${throw} :
  errors(0) 
{
  ${body}}
"
	
	
      end

      operation 128514 "HKLException"
	public explicit_return_type ""
	nparams 4
	  param in name "_reason" explicit_type "string"
	  param in name "_desc" explicit_type "string"
	  param in name "_origin" explicit_type "string"
	  param in name "_severity" explicit_type "int"
	    defaultvalue "ERR"
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, ${t3} ${p3} = ERR${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, ${t3} ${p3}${)}${volatile}${throw} :
  errors(0)
{
  ${body}}
"
	
	
      end

      operation 128130 "HKLException"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "_src" type class_ref 128182 // HKLException
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} :
  errors(0)
{
  ${body}}
"
	
	
      end

      operation 128002 "~HKLException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} 
{
  ${body}}
"
	
	
      end

      operation 128258 "operator="
	public return_type class_ref 128182 // HKLException
	nparams 1
	  param in name "_src" type class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 128642 "push_error"
	public explicit_return_type "void"
	nparams 4
	  param in name "_reason" explicit_type "char"
	  param in name "_desc" explicit_type "char"
	  param in name "_origin" explicit_type "char"
	  param in name "_severity" explicit_type "int"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}, ${t1} * ${p1}, ${t2} * ${p2}, ${t3} ${p3} = ERR${)}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}, ${t2} * ${p2}, ${t3} ${p3}${)}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 128770 "push_error"
	public explicit_return_type "void"
	nparams 4
	  param in name "_reason" explicit_type "string"
	  param in name "_desc" explicit_type "string"
	  param in name "_origin" explicit_type "string"
	  param in name "_severity" explicit_type "int"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3} = ERR${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 128898 "push_error"
	public explicit_return_type "void"
	nparams 1
	  param in name "_error" type class_ref 128310 // Error
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end
    end

    class 131202 "HKLObject"cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 132098 // <generalisation>
	relation 131714 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 132098 // <generalisation>
	  b parent class_ref 129282 // ObjectReadOnly
      end

      classrelation 131970 // _parameters (<directional aggregation by value>)
	relation 131586 *-->
	  a role_name "_parameters" multiplicity "1" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 131970 // _parameters (<directional aggregation by value>)
	  b parent class_ref 131074 // ParameterList
      end

      operation 159234 "HKLObject"
	public explicit_return_type ""
	nparams 2
	  param in name "name" type class_ref 129026 // string
	  param in name "description" type class_ref 129026 // string
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile}${throw}:
  ObjectReadOnly(name, description)  
{
  ${body}}
"
	
	
	comment "/**
 * @brief The default constructor
 * @param ${p0} The name of the ${class}.
 * @param ${p1} The description of the ${class}.
 * @throw HKLException if the ${p0} and/or the ${p1} are wrong. 
 */"
      end

      operation 159362 "parameters"
	public return_type class_ref 131074 // ParameterList
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 159490 "operator=="
	const public explicit_return_type "bool"
	nparams 1
	  param in name "hklObject" type class_ref 131202 // HKLObject
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * \\brief Are two ${class} equals ?
 * \\param ${p0} the ${t0} to compare with.
 * \\return true if both are equals flase otherwise.
 */"
      end

      operation 159618 "printToStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief print the ${class} into a flux
 * @param ${p0} The stream to print into.
 * @return The modified flux.
 */"
      end

      operation 159746 "toStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief print on a stream the content of the ${class}
 * @param flux the ostream to modify.
 * @return the modified ostream
 */"
      end

      operation 159874 "fromStream"
	public explicit_return_type "istream"
	nparams 1
	  param inout name "flux" explicit_type "istream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief restore the content of the ${class} from an istream
 * @param flux the istream.
 * @return the modified istream.
 * @todo problem of security here.
 */"
      end
    end

    class 131586 "Lattice"cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 131842 "_a"
	protected type class_ref 130178 // FitParameter
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 131970 "_b"
	protected type class_ref 130178 // FitParameter
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 132098 "_c"
	protected type class_ref 130178 // FitParameter
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 132226 "_alpha"
	protected type class_ref 130178 // FitParameter
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 132354 "_beta"
	protected type class_ref 130178 // FitParameter
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 132482 "_gamma"
	protected type class_ref 130178 // FitParameter
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 132610 "_B"
	protected type class_ref 128514 // smatrix
	cpp_mutable cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 132738 "_old_a"
	private explicit_type "double"
	cpp_mutable cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 132866 "_old_b"
	private explicit_type "double"
	cpp_mutable cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 132994 "_old_c"
	private explicit_type "double"
	cpp_mutable cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 133122 "_old_alpha"
	private explicit_type "double"
	cpp_mutable cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 133250 "_old_beta"
	private explicit_type "double"
	cpp_mutable cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 133378 "_old_gamma"
	private explicit_type "double"
	cpp_mutable cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      operation 163970 "Lattice"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} 
{
  ${body}}
"
	
	
	comment "/**
 * @brief The default constructor.
 */"
      end

      operation 164098 "Lattice"
	public explicit_return_type ""
	nparams 6
	  param in name "a" type class_ref 128060 // Value
	  param in name "b" type class_ref 128060 // Value
	  param in name "c" type class_ref 128060 // Value
	  param in name "alpha" type class_ref 128060 // Value
	  param in name "beta" type class_ref 128060 // Value
	  param in name "gamma" type class_ref 128060 // Value
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}, const ${t4} & ${p4}, const ${t5} & ${p5}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}, const ${t4} & ${p4}, const ${t5} & ${p5}${)}${volatile}${throw} 
{
  ${body}}
"
	
	
	comment "/**
 * @brief Another constructor.
 * @param ${p0} the a parameter of the ${class}
 * @param ${p1} the b parameter of the ${class}
 * @param ${p2} the c parameter of the ${class}
 * @param ${p3} the alpha parameter of the ${class}
 * @param ${p4} the beta parameter of the ${class}
 * @param ${p5} the gamma parameter of the ${class}
 */"
      end

      operation 164482 "Lattice"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 131586 // Lattice
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} 
{
  ${body}}
"
	
	
	comment "/**
 * @brief The copy constructor.
 * @param ${p0} The ${class} to copy.
 */"
      end

      operation 164354 "~Lattice"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} 
{
  ${body}}
"
	
	
	comment "/**
 * @brief The default destructor.
 */"
      end

      operation 164610 "a"
	public return_type class_ref 130178 // FitParameter
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the a FitParameter of the ${class}.
 * @return A reference on the a FitParameter.
 * @todo return fitparameter * instead of fitParameter &.
 */"
      end

      operation 164738 "b"
	public return_type class_ref 130178 // FitParameter
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the b FitParameter of the ${class}.
 * @return A reference on the b FitParameter.
 * @todo return fitparameter * instead of fitParameter &.
 */"
      end

      operation 164866 "c"
	public return_type class_ref 130178 // FitParameter
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the c FitParameter of the ${class}.
 * @return A reference on the c FitParameter.
 * @todo return fitparameter * instead of fitParameter &.
 */"
      end

      operation 164994 "alpha"
	public return_type class_ref 130178 // FitParameter
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the alpha FitParameter of the ${class}.
 * @return A reference on the alpha FitParameter.
 * @todo return fitparameter * instead of fitParameter &.
 */"
      end

      operation 165122 "beta"
	public return_type class_ref 130178 // FitParameter
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the beta FitParameter of the ${class}.
 * @return A reference on the beta FitParameter.
 * @todo return fitparameter * instead of fitParameter &.
 */"
      end

      operation 165250 "gamma"
	public return_type class_ref 130178 // FitParameter
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the gamma FitParameter of the ${class}.
 * @return A reference on the gamma FitParameter.
 * @todo return fitparameter * instead of fitParameter &.
 */"
      end

      operation 165378 "a"
	const public return_type class_ref 130178 // FitParameter
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the a FitParameter of the ${class}.
 * @return A reference on the a FitParameter.
 * @todo return fitparameter * instead of fitParameter &.
 */"
      end

      operation 165506 "b"
	const public return_type class_ref 130178 // FitParameter
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the b FitParameter of the ${class}.
 * @return A reference on the b FitParameter.
 * @todo return fitparameter * instead of fitParameter &.
 */"
      end

      operation 165634 "c"
	const public return_type class_ref 130178 // FitParameter
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the c FitParameter of the ${class}.
 * @return A reference on the c FitParameter.
 * @todo return fitparameter * instead of fitParameter &.
 */"
      end

      operation 165762 "alpha"
	const public return_type class_ref 130178 // FitParameter
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the alpha FitParameter of the ${class}.
 * @return A reference on the alpha FitParameter.
 * @todo return fitparameter * instead of fitParameter &.
 */"
      end

      operation 165890 "beta"
	const public return_type class_ref 130178 // FitParameter
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the beta FitParameter of the ${class}.
 * @return A reference on the beta FitParameter.
 * @todo return fitparameter * instead of fitParameter &.
 */"
      end

      operation 166018 "gamma"
	const public return_type class_ref 130178 // FitParameter
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the gamma FitParameter of the ${class}.
 * @return A reference on the gamma FitParameter.
 * @todo return fitparameter * instead of fitParameter &.
 */"
      end

      operation 166146 "get_B"
	const public return_type class_ref 128514 // smatrix
	nparams 0
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 166274 "get_B"
	const public return_type class_ref 128514 // smatrix
	nparams 1
	  param inout name "status" explicit_type "bool"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 166402 "reciprocal"
	const public return_type class_ref 131586 // Lattice
	nparams 0
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Compute the reciprocal ${class}.
 * @return The reciprocal ${class}.
 * @throw HKLException if the reciprocal ${class} can not be compute.
 */"
      end

      operation 166530 "randomize"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Randomize the ${class}.
 */"
      end

      operation 166658 "operator=="
	const public explicit_return_type "bool"
	nparams 1
	  param in name "lattice" type class_ref 131586 // Lattice
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * \\brief Are two ${class} equals ?
 * \\param ${p0} the ${t0} to compare with.
 * \\return true if both are equals flase otherwise.
 */"
      end

      operation 166786 "printToStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief print the ${class} into a flux
 * @param ${p0} The stream to print into.
 * @return The modified flux.
 */"
      end

      operation 166914 "toStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief print on a stream the content of the ${class}
 * @param flux the ostream to modify.
 * @return the modified ostream
 */"
      end

      operation 167042 "fromStream"
	public explicit_return_type "istream"
	nparams 1
	  param inout name "flux" explicit_type "istream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief restore the content of the ${class} from an istream
 * @param flux the istream.
 * @return the modified istream.
 * @todo problem of security here.
 */"
      end

      operation 167170 "_computeB"
	const protected explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief compute the B matrix from the fitParameters.
 * @return true if the calculus is valid.
 */"
      end

      operation 167298 "_compute_reciprocal"
	const protected explicit_return_type "void"
	nparams 6
	  param out name "a_star" explicit_type "double"
	  param out name "b_star" explicit_type "double"
	  param out name "c_star" explicit_type "double"
	  param out name "alpha_star" explicit_type "double"
	  param out name "beta_star" explicit_type "double"
	  param out name "gamma_star" explicit_type "double"
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}, ${t3} & ${p3}, ${t4} & ${p4}, ${t5} & ${p5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}, ${t3} & ${p3}, ${t4} & ${p4}, ${t5} & ${p5}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief compute the reciprocal parameters of the ${class}.
 * @param[out] ${p0} the a_star value.
 * @param[out] ${p1} the b_star value.
 * @param[out] ${p2} the c_star value.
 * @param[out] ${p3} the alpha_star value.
 * @param[out] ${p4} the beta_star value.
 * @param[out] ${p5} the gamma_star value.
 * @throw HKLException if the reciprocal calculus is not possible.
 */"
      end
    end

    class 130306 "MyMap"nformals 1
      formal name "T" type "class" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 130562 // map
        rank 0 value class_ref 129026 // string
      actual class class_ref 130562 // map
        rank 1 explicit_value "T"
      cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 131074 // <generalisation>
	relation 130818 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 131074 // <generalisation>
	  b parent class_ref 130562 // map
      end

      operation 156674 "operator[]"
	public explicit_return_type "T"
	nparams 1
	  param in name "name" type class_ref 129026 // string
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Overload of the [] operator.
 * @param ${p0} The name of the element to return.
 * @throw HKLException the element named ${p0} is not in the ${class}.
 * @return The element named ${p0}.
 */"
      end

      operation 156802 "operator[]"
	const public explicit_return_type "T"
	nparams 1
	  param in name "name" type class_ref 129026 // string
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Overload of the [] operator.
 * @param ${p0} The name of the element to return.
 * @throw HKLException the element named ${p0} is not in the ${class}.
 * @return The element named ${p0}.
 */"
      end

      operation 156930 "add"
	public explicit_return_type "bool"
	nparams 1
	  param in name "object" explicit_type "T"
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Add a ${t0} to the ${class}.
 * @param ${p0} The ${t0} to add.
 * @throw HKLException The ${p0} is already in the ${class}.
 * @return True if ok false otherwise.
 */"
      end

      operation 157058 "remove"
	public explicit_return_type "bool"
	nparams 1
	  param in name "name" type class_ref 129026 // string
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief remove the ${t0} named ${p0} from the ${class}
 * @param ${p0} The name of the ${t0}.
 * @throw HKLException The object names ${p0} is no present in the ${class}.
 * @return True if object removed.
 */"
      end

      operation 157186 "getNames"
	const public explicit_return_type "vector<string>"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 157314 "printToStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief print the ${class} into a flux
 * \\param flux The stream to print into.
 */"
      end

      operation 157442 "toStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Save the ${class} into a stream.
 * \\param flux the stream to save the ${class} into.
 * \\return The stream with the ${class}.
 */"
      end

      operation 157570 "fromStream"
	public explicit_return_type "istream"
	nparams 1
	  param inout name "flux" explicit_type "istream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Restore a ${class} from a stream.
 * \\param flux The stream containing the ${class} to restore.
 * @todo call update_observers or not ?
 */"
      end
    end

    class 128898 "MyString"cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${public}interface ${name}${extends} {
${members}}
"
      idl_decl "${comment}${abstract}${local}interface ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      
      comment "/**
  * @brief the class use to store a double with an unit.
  */"
      operation 141442 "MyString"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} :
  string()
{
  ${body}}
"
	
	
	comment "/**
 * @brief The default constructor.
 */"
      end

      operation 141570 "MyString"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "char"
	cpp_decl "    ${description}${inline}${name}${(}${t0} const * ${p0}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${t0} const * ${p0}${)}${volatile}${throw} :
  string(s)
{
  ${body}}
"
	
	
	comment "/**
 * @brief A constructor from a double
 */"
      end

      operation 144002 "MyString"
	public explicit_return_type ""
	nparams 1
	  param in name "s" type class_ref 129026 // string
	cpp_decl "    ${description}${inline}${name}${(}${t0} const & ${p0}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${t0} const & ${p0}${)}${volatile}${throw} :
  string(s)
{
  ${body}}
"
	
	
	comment "/**
 * @brief A constructor from a double
 */"
      end

      operation 144130 "MyString"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "s" type class_ref 128898 // MyString
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} :
  string(s) 
{
  ${body}}
"
	
	
	comment "/**
 * @brief A constructor from a double
 */"
      end

      operation 143746 "toStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief print on a stream the content of the MyString
 * @param flux the ostream to modify.
 * @return the modified ostream
 */"
      end

      operation 143874 "fromStream"
	public explicit_return_type "istream"
	nparams 1
	  param inout name "flux" explicit_type "istream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief restore the content of the MyString from an istream
 * @param flux the istream.
 * @return the modified istream.
 * @todo problem of security here.
 */"
      end

      classrelation 128514 // <generalisation>
	relation 128514 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 128514 // <generalisation>
	  b parent class_ref 129026 // string
      end
    end

    class 129154 "ObjectBase"cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 128642 // _name (<directional aggregation by value>)
	relation 128642 *-->
	  a role_name "_name" multiplicity "1" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 128642 // _name (<directional aggregation by value>)
	  b parent class_ref 128898 // MyString
      end

      classrelation 128898 // _description (<directional aggregation by value>)
	relation 128770 *-->
	  a role_name "_description" multiplicity "1" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 128898 // _description (<directional aggregation by value>)
	  b parent class_ref 128898 // MyString
      end

      operation 144642 "ObjectBase"
	public explicit_return_type ""
	nparams 2
	  param in name "name" type class_ref 129026 // string
	  param in name "description" type class_ref 129026 // string
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile}${throw} 
{
  ${body}}
"
	
	
	comment "/**
 * @brief Another constructor
 * @param ${p0} The name of the Object
 * @param ${p1} The description of the Object
 * @throw HKLException if the name or the description is empty.
 */"
      end

      operation 144386 "ObjectBase"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 129154 // ObjectBase
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} :
  _name(source._name),
  _description(source._description) 
{
  ${body}}
"
	
	
	comment "/**
 * @brief Copy constructor
 * @param ${p0} the ${class} to copy.
 */"
      end

      operation 145282 "operator=="
	const public explicit_return_type "bool"
	nparams 1
	  param in name "object" type class_ref 129154 // ObjectBase
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * \\brief Are two Object equals ?
 * \\param ${p0} the Object to compare with.
 * \\return true if both are equals flase otherwise.
 */"
      end

      operation 147714 "_get_name"
	const protected return_type class_ref 129026 // string
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the name of the ${class}.
 * @return a string ref with the name of the ${class}.
 */"
      end

      operation 145410 "_set_name"
	protected explicit_return_type "void"
	nparams 1
	  param in name "name" type class_ref 129026 // string
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Set the name of the BaseObject.
 * @param name The new name of the BaseObject.
 */"
      end

      operation 147842 "_get_description"
	const protected return_type class_ref 129026 // string
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the description of the ${class}.
 * @return a string ref with the name of the ${class}.
 */"
      end

      operation 145538 "_set_description"
	protected explicit_return_type "void"
	nparams 1
	  param in name "description" type class_ref 129026 // string
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Set the description of the Object.
 * @param description The new BaseObject description.
 */"
      end

      operation 145922 "printToStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief print the ${class} into a flux
 * @param ${p0} The stream to print into.
 * @return The modified flux.
 */"
      end

      operation 145666 "toStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief print on a stream the content of the ${class}
 * @param flux the ostream to modify.
 * @return the modified ostream
 */"
      end

      operation 145794 "fromStream"
	public explicit_return_type "istream"
	nparams 1
	  param inout name "flux" explicit_type "istream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief restore the content of the ${class} from an istream
 * @param flux the istream.
 * @return the modified istream.
 * @todo problem of security here.
 */"
      end
    end

    class 129282 "ObjectReadOnly"cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 129154 // <generalisation>
	relation 128898 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 129154 // <generalisation>
	  b parent class_ref 129154 // ObjectBase
      end

      operation 146050 "ObjectReadOnly"
	public explicit_return_type ""
	nparams 2
	  param in name "name" type class_ref 129026 // string
	  param in name "description" type class_ref 129026 // string
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile}${throw} :
  ObjectBase(name, description) 
{
  ${body}}
"
	
	
	comment "/**
 * @brief The default constructor.
 * @param ${p0} The name of the Object
 * @param ${p1} The description of the Object
 * @throw HKLException if the name or the description is empty.
 */"
      end

      operation 146306 "ObjectReadOnly"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 129282 // ObjectReadOnly
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} :
  ObjectBase(source) 
{
  ${body}}
"
	
	
	comment "/**
 * @brief Copy constructor
 * @param ${p0} the ${class} to copy.
 */"
      end

      operation 146434 "get_name"
	const public return_type class_ref 129026 // string
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the name of the ${class}.
 * @return a string reference with the name of the ${class}.
 */"
      end

      operation 146562 "get_description"
	const public return_type class_ref 129026 // string
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the description of the ${class}.
 * @return a string reference with the description of the ${class}.
 */"
      end
    end

    class 129410 "Object"cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 129538 // <generalisation>
	relation 129282 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 129538 // <generalisation>
	  b parent class_ref 129282 // ObjectReadOnly
      end

      operation 147330 "Object"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} :
  ObjectReadOnly(\"unknown\", \"unknown\") 
{
  ${body}}
"
	
	
	comment "/**
 * @brief The default constructor.
 */"
      end

      operation 146690 "Object"
	public explicit_return_type ""
	nparams 2
	  param in name "name" type class_ref 129026 // string
	  param in name "description" type class_ref 129026 // string
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile}${throw} :
  ObjectReadOnly(name, description) 
{
  ${body}}
"
	
	
	comment "/**
 * @brief The default constructor.
 * @param ${p0} The name of the ${class}
 * @param ${p1} The description of the ${class}
 * @throw HKLException if the name or the description is empty.
 */"
      end

      operation 146946 "Object"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 129410 // Object
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} :
  ObjectReadOnly(source) 
{
  ${body}}
"
	
	
	comment "/**
 * @brief Copy constructor
 * @param ${p0} the ${class} to copy.
 */"
      end

      operation 147074 "set_name"
	public explicit_return_type "void"
	nparams 1
	  param in name "name" type class_ref 129026 // string
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Set the name of the ${class}.
 * @param ${p0}
 */"
      end

      operation 147458 "set_description"
	public explicit_return_type "void"
	nparams 1
	  param in name "description" type class_ref 129026 // string
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Set the name of the ${class}.
 * @param ${p0}
 */"
      end
    end

    class 129666 "Observable"cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 131074 "_changed"
	protected explicit_type "bool"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      classrelation 129666 // _observers (<directional aggregation>)
	relation 129410 o-->
	  stereotype "vector"
	  a role_name "_observers" multiplicity "*" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type} *> ${name}${value};
"
	    classrelation_ref 129666 // _observers (<directional aggregation>)
	  b parent class_ref 129538 // Observer
      end

      operation 148866 "Observable"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} :
  _changed(false)
{
  ${body}}
"
	
	
	comment "/**
 * @brief The default constructor.
 */"
      end

      operation 148994 "add_observer"
	public explicit_return_type "void"
	nparams 1
	  param in name "observer" type class_ref 129538 // Observer
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Add an ${t0} to the ${class}.
 * @param ${p0} The ${t0} pointer to add.
 */"
      end

      operation 149122 "del_observer"
	public explicit_return_type "void"
	nparams 1
	  param in name "observer" type class_ref 129538 // Observer
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Delete an ${t0} from the ${class}.
 * @param ${p0} The ${t0} pointer to remove.
 */"
      end

      operation 149250 "update_observers"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Update all the Observer looking for this ${class}.
 */"
      end

      operation 149378 "set_changed"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Set the changed state of the ${class}.
 *
 * If the changed state is not on, no Observer update is possible.
 */"
      end
    end

    class 129538 "Observer"
      abstract 
      cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 130946 "_connected"
	protected explicit_type "bool"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      operation 148354 "Observer"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} :
  _connected(false)
{
  ${body}}
"
	
	
      end

      operation 212994 "~Observer"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} 
{
  ${body}}
"
	
	
      end

      operation 148226 "update"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
      end

      operation 148610 "connect"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 148738 "unconnect"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end
    end

    class 129922 "Parameter"cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 130434 // <generalisation>
	relation 130178 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 130434 // <generalisation>
	  b parent class_ref 129282 // ObjectReadOnly
      end

      classrelation 141826 // <generalisation>
	relation 141442 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 141826 // <generalisation>
	  b parent class_ref 129794 // Range
      end

      operation 152322 "Parameter"
	public explicit_return_type ""
	nparams 5
	  param in name "name" type class_ref 129026 // string
	  param in name "description" type class_ref 129026 // string
	  param in name "min" type class_ref 128060 // Value
	  param in name "current" type class_ref 128060 // Value
	  param in name "max" type class_ref 128060 // Value
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}, const ${t4} & ${p4}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}, const ${t4} & ${p4}${)}${volatile}${throw} :
   ObjectReadOnly(name, description),
  Range(min, current, max)
{
  ${body}}
"
	
	
	comment "/**
 * @brief The default constructor
 * @param ${p0} The name ${t0} of the Parameter.
 * @param ${p1} The description ${t1} of the Parameter.
 * @param ${p2} the minimum ${t2} of the Parameter.
 * @param ${p3} The current ${t3} of the Parameter.
 * @param ${p4} The maximum ${t4} of the Parameter.
 * @throw HKLException if the min <= current <= max is not verify.
 */"
      end

      operation 152706 "operator=="
	const public explicit_return_type "bool"
	nparams 1
	  param in name "parameter" type class_ref 129922 // Parameter
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Are two ${class} equals ?
 * \\param ${p0} the ${t0} to compare with.
 */
"
      end

      operation 152834 "printToStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief print the ${class} into a flux
 * \\param flux The stream to print into.
 */"
      end

      operation 152962 "toStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Save the ${class} into a stream.
 * \\param flux the stream to save the ${class} into.
 * \\return The stream with the ${class}.
 */"
      end

      operation 153090 "fromStream"
	public explicit_return_type "istream"
	nparams 1
	  param inout name "flux" explicit_type "istream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Restore a ${class} from a stream.
 * \\param flux The stream containing the ${class} to restore.
 * @todo call update_observers or not ?
 */"
      end
    end

    class 131074 "ParameterList"cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 131714 // _parameters (<directional aggregation>)
	relation 131458 o-->
	  stereotype "vector"
	  a role_name "_parameters" multiplicity "*" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type} *> ${name}${value};
"
	    classrelation_ref 131714 // _parameters (<directional aggregation>)
	  b parent class_ref 129922 // Parameter
      end

      operation 158338 "add"
	public explicit_return_type "bool"
	nparams 1
	  param in name "parameter" type class_ref 129922 // Parameter
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Add a ${t0} to the ${class}.
 * @param ${p0} The ${t0} to add.
 */"
      end

      operation 158466 "size"
	const public explicit_return_type "uint"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the size of the ${class}.
 * @return the number of element in the ${class}.
 */"
      end

      operation 158594 "operator[]"
	public return_type class_ref 129922 // Parameter
	nparams 1
	  param in name "name" type class_ref 129026 // string
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} * ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @return the ${t0} * named
 * @param ${p0} The name of the ${t0} we are looking for in the ${class}.
 * @return A ${t0} pointer.
 * @throw HKLException if the ${t0} is not present n the ${class}.
 */"
      end

      operation 158722 "begin"
	public explicit_return_type "vector<Parameter *>::iterator"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get an iterator on the first element of the ${class}.
 * @return The iterator.
 */"
      end

      operation 158850 "end"
	public explicit_return_type "vector<Parameter *>::iterator"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get an iterator on the end of the ${class}.
 * @return The iterator.
 */"
      end

      operation 158978 "begin"
	const public explicit_return_type "vector<Parameter *>::const_iterator"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get an const_iterator on the first element of the ${class}.
 * @return The const_iterator.
 */"
      end

      operation 159106 "end"
	const public explicit_return_type "vector<Parameter *>::const_iterator"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get an const_iterator on the end of the ${class}.
 * @return The const_iterator.
 */"
      end

      operation 157826 "operator=="
	const public explicit_return_type "bool"
	nparams 1
	  param in name "parameterList" type class_ref 131074 // ParameterList
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Are two ${class} equals ?
 * \\param ${p0} the ${t0} to compare with.
 */
"
      end

      operation 157954 "printToStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief print the ${class} into a flux
 * \\param flux The stream to print into.
 */"
      end

      operation 158082 "toStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Save the ${class} into a stream.
 * \\param flux the stream to save the ${class} into.
 * \\return The stream with the ${class}.
 */"
      end

      operation 158210 "fromStream"
	public explicit_return_type "istream"
	nparams 1
	  param inout name "flux" explicit_type "istream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Restore a ${class} from a stream.
 * \\param flux The stream containing the ${class} to restore.
 * @todo call update_observers or not ?
 */"
      end
    end

    class 134786 "PseudoAxe"cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 136322 // <generalisation>
	relation 135938 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 136322 // <generalisation>
	  b parent class_ref 129282 // ObjectReadOnly
      end

      attribute 140034 "_read"
	const_attribute protected explicit_type "Range"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 140162 "_write"
	protected explicit_type "Range"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      classrelation 136450 // _engine (<directional aggregation>)
	relation 136066 o-->
	  a role_name "_engine" multiplicity "1" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 136450 // _engine (<directional aggregation>)
	  b parent class_ref 134914 // PseudoAxeEngine
      end

      attribute 140290 "_parameters"
	protected type class_ref 131074 // ParameterList
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      operation 195330 "PseudoAxe"
	public explicit_return_type ""
	nparams 5
	  param in name "name" type class_ref 129026 // string
	  param inout name "description" type class_ref 129026 // string
	  param inout name "read" explicit_type "Range"
	  param inout name "write" explicit_type "Range"
	  param inout name "engine" type class_ref 134914 // PseudoAxeEngine
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, ${t3} & ${p3}, ${t4} * ${p4}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, ${t3} & ${p3}, ${t4} * ${p4}${)}${volatile}${throw} :
  ObjectReadOnly(name, description),
  _read(read),
  _write(write),
  _engine(engine),
  _parameters(engine->parameters())
{
  ${body}}
"
	
	
	comment "/**
 * @brief The default constructor.
 * @param name The name of the PseudoAxeTemp.
 * @param description The description of the PseudoAxeTemp.
 * @param read The read part of the PseudoAxe.
 * @param write The write part of the PseudoAxe.
 * @param engine The engine use to compute the pseudoAxes value.
 * @todo be sure to be consistant with ModeTemp.
 */"
      end

      operation 195458 "initialize"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Initialize the pseudoAxe.
 * This method must be call before using a pseudoAxe.
 */"
      end

      operation 195586 "uninitialize"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief uninitialize the PseudoAxe.
 * Uninitialize a PseudoAxe if you do not whant to use it.
 */"
      end

      operation 195714 "is_initialized"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the initialized state of the PseudoAxe.
 * @return A bool fill with the initialized state of the PseudoAxe.
 */"
      end

      operation 195842 "is_readable"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the readabled state of the PseudoAxe.
 * @return A bool fill with the readable state of the PseudoAxe.
 */"
      end

      operation 195970 "is_writable"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the writable state of the PseudoAxe.
 * @return A bool fill with the writable state of the PseudoAxe.
 */"
      end

      operation 196098 "get_min"
	const public return_type class_ref 128060 // Value
	nparams 0
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the min Value of the PseudoAxe.
 * @return A Value fill with the minimum value of the PseudoAxe.
 * @throw HKLException if the PseudoAxe is not readable.
 */"
      end

      operation 196226 "get_current"
	const public return_type class_ref 128060 // Value
	nparams 0
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the current Value of the PseudoAxe.
 * @return A Value fill with the current value of the PseudoAxe.
 * @throw HKLException if the PseudoAxe is not readable.
 */"
      end

      operation 196354 "get_max"
	const public return_type class_ref 128060 // Value
	nparams 0
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the maximum Value of the PseudoAxe.
 * @return A Value fill with the maximum Value of the PseudoAxe.
 * @throw HKLException if the PseudoAxe is not readable.
 */"
      end

      operation 196482 "set_current"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" type class_ref 128060 // Value
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Set the current value of the PseudoAxe.
 * @param value The Value to set. 
 * @throw HKLException If the PseudoAxe is not writable. 
 * 
 * This method set the write part of the pseudoAxe and compute
 * the corresponding geometry using the engine. 
 */"
      end

      operation 196610 "set_engine"
	public explicit_return_type "void"
	nparams 1
	  param inout name "engine" type class_ref 134914 // PseudoAxeEngine
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Set the engine use by the PseudoAxe.
 * @param engine The engine to set.
 *
 * This method is only use by the DerivedPseudoAxeEngine to modify
 * the engine part of the PseudoAxe.
 */"
      end

      operation 196738 "parameters"
	public return_type class_ref 131074 // ParameterList
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 196866 "operator=="
	const public explicit_return_type "bool"
	nparams 1
	  param in name "pseudoAxe" type class_ref 134786 // PseudoAxe
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * \\brief Are two ${class} equals ?
 * \\param ${p0} the ${t0} to compare with.
 * \\return true if both are equals flase otherwise.
 */"
      end

      operation 196994 "printToStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief print the ${class} into a flux
 * @param ${p0} The stream to print into.
 * @return The modified flux.
 */"
      end
    end

    class 134914 "PseudoAxeEngine"
      abstract 
      cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 135682 // <generalisation>
	relation 135298 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 135682 // <generalisation>
	  b parent class_ref 131202 // HKLObject
      end

      operation 197122 "PseudoAxeEngine"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} :
  HKLObject(\"engine\", \"engine\") 
{
  ${body}}
"
	
	
      end

      operation 197250 "~PseudoAxeEngine"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} 
{
  ${body}}
"
	
	
	comment "/**
 * @brief The default destructor.
 */"
      end

      operation 197378 "relatedAxes"
	abstract cpp_virtual public return_type class_ref 130818 // AxeList
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	comment "/**
 * @brief Get the related axes of the PseudoAxeEngine.
 * @return The related axes of the PseudoAxeEngine.
 */"
      end

      operation 197506 "pseudoAxes"
	abstract cpp_virtual public return_type class_ref 135042 // PseudoAxeList
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	comment "/**
 * @brief Get the PseudoAxeList axes of the PseudoAxeEngine.
 * @return The PseudoAxeList axes of the PseudoAxeEngine.
 */"
      end

      operation 197634 "is_initialized"
	abstract const cpp_virtual public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	comment "/**
 * @brief Get the initialization state of the pseudoAxe.
 */"
      end

      operation 197762 "is_readable"
	abstract const cpp_virtual public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	comment "/**
 * @brief Get the readable state of the pseudoAxe
 * During the get_value and set_value method, the peusoAxe can be set unreadable.
 */"
      end

      operation 197890 "is_writable"
	abstract const cpp_virtual public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	comment "/**
 * @brief Get the writable state of the pseudoAxe.
 * During the get_value and set_value method, the peusoAxe can be set unwritable.
 */"
      end

      operation 198018 "initialize"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	comment "/**
 * @brief Initialize the pseudoAxe.
 *
 * This method must be call before using a pseudoAxe.
 */"
      end

      operation 198146 "uninitialize"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	comment "/**
 * @brief Un-Initialize the pseudoAxe.
 * This method must be call to un-initialize a pseudoAxe.
 */"
      end

      operation 198274 "set"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	comment "/**
 * @brief set the current value of the PseudoAxe.
 * @throw HKLException if the pseudoAxe is not ready to be set.
 */"
      end
    end

    class 135426 "PseudoAxeEngineList"cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 137346 // _pseudoAxeEngines (<directional aggregation>)
	relation 136962 o-->
	  stereotype "vector"
	  a role_name "_pseudoAxeEngines" multiplicity "*" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type} *> ${name}${value};
"
	    classrelation_ref 137346 // _pseudoAxeEngines (<directional aggregation>)
	  b parent class_ref 134914 // PseudoAxeEngine
      end

      classrelation 137218 // _pseudoAxes (<directional aggregation by value>)
	relation 136834 *-->
	  a role_name "_pseudoAxes" multiplicity "1" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 137218 // _pseudoAxes (<directional aggregation by value>)
	  b parent class_ref 135042 // PseudoAxeList
      end

      operation 203010 "pseudoAxes"
	public return_type class_ref 135042 // PseudoAxeList
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 203138 "push_back"
	public explicit_return_type "void"
	nparams 1
	  param in name "pseudoAxeEngine" type class_ref 134914 // PseudoAxeEngine
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 203394 "clear"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 202370 "operator=="
	const public explicit_return_type "bool"
	nparams 1
	  param in name "pseudoAxeEngineList" type class_ref 135426 // PseudoAxeEngineList
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * \\brief Are two ${class} equals ?
 * \\param ${p0} the ${t0} to compare with.
 * \\return true if both are equals flase otherwise.
 */"
      end

      operation 202498 "printToStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief print the ${class} into a flux
 * @param ${p0} The stream to print into.
 * @return The modified flux.
 */"
      end

      operation 202626 "toStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief print on a stream the content of the ${class}
 * @param flux the ostream to modify.
 * @return the modified ostream
 */"
      end

      operation 202754 "fromStream"
	public explicit_return_type "istream"
	nparams 1
	  param inout name "flux" explicit_type "istream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief restore the content of the ${class} from an istream
 * @param flux the istream.
 * @return the modified istream.
 * @todo problem of security here.
 */"
      end
    end

    class 135170 "PseudoAxeEngineTemp"nformals 1
      formal name "T" type "class" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 135810 // <generalisation>
	relation 135426 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 135810 // <generalisation>
	  b parent class_ref 134914 // PseudoAxeEngine
      end

      classrelation 135938 // <generalisation>
	relation 135554 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 135938 // <generalisation>
	  b parent class_ref 129538 // Observer
      end

      attribute 139522 "_geometry"
	protected explicit_type "T"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 139650 "_initialized"
	protected explicit_type "bool"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 139778 "_readable"
	protected explicit_type "bool"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 139906 "_writable"
	protected explicit_type "bool"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      classrelation 136066 // _relatedAxes (<directional aggregation>)
	relation 135682 o-->
	  a role_name "_relatedAxes" multiplicity "1" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 136066 // _relatedAxes (<directional aggregation>)
	  b parent class_ref 130818 // AxeList
      end

      classrelation 136194 // _pseudoAxes (<directional aggregation by value>)
	relation 135810 *-->
	  a role_name "_pseudoAxes" multiplicity "1" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 136194 // _pseudoAxes (<directional aggregation by value>)
	  b parent class_ref 135042 // PseudoAxeList
      end

      class 135298 "value_type"
	visibility public stereotype "typedef"
	 explicit_base_type "T"
	cpp_decl "${description}typedef ${type} ${name};
"
	java_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      operation 198402 "PseudoAxeEngineTemp"
	protected explicit_return_type ""
	nparams 4
	  param inout name "geometry" explicit_type "T"
	  param in name "initialized" explicit_type "bool"
	  param in name "readable" explicit_type "bool"
	  param in name "writable" explicit_type "bool"
	cpp_decl "    ${description}${inline}${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${volatile}${throw} :
  PseudoAxeEngine(),
  Observer(),
  _geometry(geometry),
  _initialized(initialized),
  _readable(readable),
  _writable(writable)
{
  ${body}}
"
	
	
	comment "/**
 * @brief The default constructor.
 * @param geometry The Geometry use to compute the pseudoAxes values.
 * @param initialized the initial state of the PseudoAxeEngine.
 * @param readable The initial readable state of the PseudoAxeEngine.
 * @param writable The initial writable state of the PseudoAxeEngine.
 * @todo be sure to be consistant with ModeTemp.
 */"
      end

      operation 198530 "~PseudoAxeEngineTemp"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} 
{
  ${body}}
"
	
	
      end

      operation 198658 "is_initialized"
	const cpp_virtual public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the initialization state of the pseudoAxe.
 */"
      end

      operation 198914 "is_readable"
	const cpp_virtual public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the readable state of the pseudoAxe
 * During the get_value and set_value method, the peusoAxe can be set unreadable.
 */"
      end

      operation 199042 "is_writable"
	const cpp_virtual public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the writable state of the pseudoAxe.
 * During the get_value and set_value method, the peusoAxe can be set unwritable.
 */"
      end

      operation 202882 "pseudoAxes"
	cpp_virtual public return_type class_ref 135042 // PseudoAxeList
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the PseudoAxeList axes of the PseudoAxeEngine.
 * @return The PseudoAxeList axes of the PseudoAxeEngine.
 */"
      end

      operation 199170 "relatedAxes"
	cpp_virtual public return_type class_ref 130818 // AxeList
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the related axes of the PseudoAxeEngine.
 * @return The related axes of the PseudoAxeEngine.
 */"
      end

      operation 199426 "uninitialize"
	cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Un-Initialize the pseudoAxe.
 * This method must be call to un-initialize a pseudoAxe.
 */"
      end

      operation 199554 "operator=="
	const public explicit_return_type "bool"
	nparams 1
	  param in name "pseudoAxeEngineTemp" type class_ref 135170 // PseudoAxeEngineTemp
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * \\brief Are two ${class} equals ?
 * \\param ${p0} the ${t0} to compare with.
 * \\return true if both are equals flase otherwise.
 */"
      end

      operation 199682 "printToStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief print the ${class} into a flux
 * @param ${p0} The stream to print into.
 * @return The modified flux.
 */"
      end

      operation 199810 "toStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief print on a stream the content of the ${class}
 * @param flux the ostream to modify.
 * @return the modified ostream
 */"
      end

      operation 199938 "fromStream"
	public explicit_return_type "istream"
	nparams 1
	  param inout name "flux" explicit_type "istream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief restore the content of the ${class} from an istream
 * @param flux the istream.
 * @return the modified istream.
 * @todo problem of security here.
 */"
      end
    end

    class 135042 "PseudoAxeList"cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl "${comment}typedef ${type} ${name};
"
      explicit_switch_type ""
      
      classrelation 137474 // _pseudoAxes (<directional aggregation>)
	relation 137090 o-->
	  stereotype "vector"
	  a role_name "_pseudoAxes" multiplicity "*" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type} *> ${name}${value};
"
	    classrelation_ref 137474 // _pseudoAxes (<directional aggregation>)
	  b parent class_ref 134786 // PseudoAxe
      end

      class 135938 "iterator"
	visibility public stereotype "typedef"
	 base_type class_ref 134786 // PseudoAxe
	cpp_decl "${description}typedef vector<${type}*>::iterator ${name};
"
	java_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      class 136066 "const_iterator"
	visibility public stereotype "typedef"
	 base_type class_ref 134786 // PseudoAxe
	cpp_decl "${description}typedef vector<${type}*>::const_iterator ${name};
"
	java_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      operation 203522 "push_back"
	public explicit_return_type "void"
	nparams 1
	  param inout name "pseudoAxe" type class_ref 134786 // PseudoAxe
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 203650 "begin"
	public explicit_return_type "PseudoAxeList::iterator"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 203778 "end"
	public explicit_return_type "PseudoAxeList::iterator"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 203906 "begin"
	const public explicit_return_type "PseudoAxeList::const_iterator"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 204034 "end"
	const public explicit_return_type "PseudoAxeList::const_iterator"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 211202 "get_names"
	const public explicit_return_type "vector<string>"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get all the names of the PseudoAxes in the ${class}
 */"
      end

      operation 211074 "operator[]"
	public return_type class_ref 134786 // PseudoAxe
	nparams 1
	  param in name "name" type class_ref 129026 // string
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} * ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get an element of the ${class}.
 * @param ${p0} The name of the PseudoAxe to find.
 * @return A pointer on the PseudoAxe or NULL if the pseudoAxe is not present in the ${class}
 */"
      end

      operation 204162 "clear"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end
    end

    class 128770 "Quaternion"cpp_decl "${description}${template}class ${name}${inherit} {
  friend class smatrix;
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 130434 "_a"
	protected explicit_type "double"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 130562 "_b"
	protected explicit_type "double"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 130690 "_c"
	protected explicit_type "double"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 130818 "_d"
	protected explicit_type "double"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      operation 135682 "Quaternion"
	stereotype "constructor"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} :
  _a(1),
  _b(0),
  _c(0),
  _d(0)
{
  ${body}}
"
	
	
	comment " /*!
  * \\brief Default constructor
  * 
  * Create a new quaternion and set all its components to 0.0
  */"
      end

      operation 135810 "Quaternion"
	stereotype "constructor"
	public explicit_return_type ""
	nparams 4
	  param in name "a" explicit_type "double"
	  param in name "b" explicit_type "double"
	  param in name "c" explicit_type "double"
	  param in name "d" explicit_type "double"
	cpp_decl "    ${description}${inline}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${volatile}${throw} :
  _a(a),
  _b(b),
  _c(c),
  _d(d) 
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief This constructor creates a quaternion and populates it
 * \\param a
 * \\param b
 * \\param c
 * \\param d
 * 
 * Create a new quaternion with a, b, c and d as coordinates.
 */"
      end

      operation 140034 "Quaternion"
	stereotype "constructor"
	public explicit_return_type ""
	nparams 1
	  param in name "v" type class_ref 128002 // svector
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} 
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief This constructor creates a quaternion and populates it
 * \\param v
 * 
 * Create a new quaternion from a svector.
 */"
      end

      operation 140162 "Quaternion"
	stereotype "constructor"
	public explicit_return_type ""
	nparams 2
	  param in name "angle" explicit_type "double"
	  param in name "v" type class_ref 128002 // svector
	cpp_decl "    ${description}${inline}${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${volatile}${throw} 
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief This constructor creates a quaternion from an angle and a vector
 * \\param angle the rotation angle.
 * \\param v the axe of the rotation.
 */"
      end

      operation 135938 "Quaternion"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 128770 // Quaternion
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} :
  _a(source._a),
  _b(source._b),
  _c(source._c),
  _d(source._d)
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Copy constructor.
 * \\param q The Quaternion to copy from.
 */"
      end

      operation 136322 "a"
	public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 136450 "b"
	public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 136578 "c"
	public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 140290 "d"
	public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 136706 "a"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} const & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} const & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 136834 "b"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} const & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} const & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 136962 "c"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} const & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} const & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 140418 "d"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} const & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} const & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 137090 "operator=="
	const public explicit_return_type "bool"
	nparams 1
	  param in name "q" type class_ref 128770 // Quaternion
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 141186 "operator+="
	public return_type class_ref 128770 // Quaternion
	nparams 1
	  param in name "q" type class_ref 128770 // Quaternion
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Add a Quaternion to another one.
 * \\param q The Quaternion to add.
 * \\return A reference to the Quaternion which was added.
 */"
      end

      operation 141314 "operator-="
	public return_type class_ref 128770 // Quaternion
	nparams 1
	  param in name "q" type class_ref 128770 // Quaternion
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Substract a Quaternion to another one.
 * \\param q The Quaternion to substract.
 * \\return A reference to the Quaternion which was substracted.
 */"
      end

      operation 137218 "operator*="
	public return_type class_ref 128770 // Quaternion
	nparams 1
	  param in name "q" type class_ref 128770 // Quaternion
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Multiply a Quaternion to another one.
 * \\param q The Quaternion to multiply.
 * \\return A reference to the Quaternion which was multiplyed.
 */"
      end

      operation 137602 "operator/="
	public return_type class_ref 128770 // Quaternion
	nparams 1
	  param in name "d" explicit_type "double"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Divide a Quaternion by a double.
 * \\param d The double to divide by.
 * \\return A reference to the Quaternion which was modified.
 */"
      end

      operation 138626 "norm2"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Compute de norm of the Quaternion.
 * \\return The norme of the Quaternion.
 */"
      end

      operation 140546 "conjugate"
	const public return_type class_ref 128770 // Quaternion
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Compute the conjugated Quaternion.
 * \\return The conjugate Quaternion.
 */"
      end

      operation 140674 "dotProduct"
	const public explicit_return_type "double"
	nparams 1
	  param in name "q" type class_ref 128770 // Quaternion
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Compute the dot product of a Quaternion.
 * \\param q The Quaternion.
 * \\return The dot Product.
 */"
      end

      operation 140802 "invert"
	const public return_type class_ref 128770 // Quaternion
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Compute the invert Quaternion.
 * \\return The invert Quaternion.
 */"
      end

      operation 140930 "asMatrix"
	const public return_type class_ref 128514 // smatrix
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Compute the rotation matrix of a Quaternion.
 * \\return The rotation matrix of a Quaternion.
 *
 * to convert a quaternion to a Matrix:
 * \\f$ q = a + b \\cdot i + c \\cdot j + d \\cdot k \\f$
 * 
 * \\f$
 * \\left(
 *   \\begin{array}{ccc}
 *     a^2+b^2-c^2-d^2 & 2bc-2ad         & 2ac+2bd\\\\
 *     2ad+2bc         & a^2-b^2+c^2-d^2 & 2cd-2ab\\\\
 *     2bd-2ac         & 2ab+2cd         & a^2-b^2-c^2+d^2
 *   \\end{array}
 * \\right)
 * \\f$
 */"
      end

      operation 137858 "getAngleAndAxe"
	const public explicit_return_type "void"
	nparams 2
	  param inout name "angle" explicit_type "double"
	  param inout name "axe" type class_ref 128002 // svector
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Decompose a Quaternion into a rotation angle and an Axe of rotation.
 * \\param[out] angle The angle of the rotation will be strore in this variable.
 * \\param[out] axe The axe of rotation will be store in this variable.
 */"
      end

      operation 141058 "getAxe"
	const public return_type class_ref 128002 // svector
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the rotating axe of the Quaternion.
 * @return The rotating axe of the Quaternion.
 */"
      end

      operation 139522 "printToStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 139650 "toStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 139778 "fromStream"
	public explicit_return_type "istream"
	nparams 1
	  param inout name "flux" explicit_type "istream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Restore a ${class} from a stream.
 * \\param flux The stream containing the ${class} to restore.
 */"
      end
    end

    class 129794 "Range"cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 130178 // <generalisation>
	relation 129922 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 130178 // <generalisation>
	  b parent class_ref 129666 // Observable
      end

      classrelation 129794 // _min (<directional aggregation by value>)
	relation 129538 *-->
	  a role_name "_min" multiplicity "1" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 129794 // _min (<directional aggregation by value>)
	  b parent class_ref 128060 // Value
	get_oper operation_ref 150402 // get_min
      end

      classrelation 129922 // _current (<directional aggregation by value>)
	relation 129666 *-->
	  a role_name "_current" multiplicity "1" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 129922 // _current (<directional aggregation by value>)
	  b parent class_ref 128060 // Value
      end

      classrelation 130050 // _max (<directional aggregation by value>)
	relation 129794 *-->
	  a role_name "_max" multiplicity "1" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 130050 // _max (<directional aggregation by value>)
	  b parent class_ref 128060 // Value
      end

      operation 149506 "Range"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} :
  Observable(),
  _min(Value()),
  _current(Value()),
  _max(Value())
{
  ${body}}
"
	
	
	comment "/**
 * @brief The default constructor.
 */"
      end

      operation 150018 "Range"
	public explicit_return_type ""
	nparams 3
	  param in name "min" type class_ref 128060 // Value
	  param in name "current" type class_ref 128060 // Value
	  param in name "max" type class_ref 128060 // Value
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${volatile}${throw} :
  Observable()
{
  ${body}}
"
	
	
	comment "/**
 * @brief constructor of the ${class} class.
 * 
 * @param ${p0} The minimum value of the ${class}.
 * @param ${p1} The current value of the ${class}.
 * @param ${p2} The maximum value of the ${class}.
 * @throw HKLException if not min < current < max; 
 */"
      end

      operation 149762 "Range"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" explicit_type "Range"
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} :
  Observable(source),
  _min(source._min),
  _current(source._current),
  _max(source._max) 
{
  ${body}}
"
	
	
      end

      operation 150402 "get_min"
	const cpp_inline public return_type class_ref 128060 // Value
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return _min;
}
"
	cpp_name_spec "get${name}"
	final 
	java_name_spec "get_${name}"
	
	idl_name_spec "get_${name}"
	get_of_relation classrelation_ref 129794 // _min (<directional aggregation by value>)
	comment "/*!
 * \\brief Get the _min Value of the ${class} class.
 * \\return The minimum Value.
 */"
      end

      operation 150530 "get_current"
	const cpp_inline public return_type class_ref 128060 // Value
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return _current;
}
"
	final 
	
	comment "/*!
 * \\brief Get the _current Value of the ${class} class.
 * \\return The current Value.
 */"
      end

      operation 150658 "get_max"
	const cpp_inline public return_type class_ref 128060 // Value
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return _max;
}
"
	final 
	
	comment "/*!
 * \\brief Get the _max Value of the ${class} class.
 * \\return The maximum Value.
 */"
      end

      operation 150274 "set_current"
	public explicit_return_type "void"
	nparams 1
	  param in name "current" type class_ref 128060 // Value
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Set the _current ${t0} of the ${class} class.
 * @param ${p0} The ${t0} to set.
 * @throw An HKLException if the current ${t0} in not between min and max.
 */"
      end

      operation 150786 "set_current"
	public explicit_return_type "void"
	nparams 1
	  param in name "current" explicit_type "double"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Set the _current ${t0} of the ${class} class.
 * @param ${p0} The ${t0} to set.
 *
 * This method do not check for the validity of the ${class}. This method
 * is requiered by the simplex affinement.
 */"
      end

      operation 150914 "set_range"
	public explicit_return_type "void"
	nparams 2
	  param in name "min" type class_ref 128060 // Value
	  param in name "max" type class_ref 128060 // Value
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Set the minimum and the maximum of the ${class} class.
 * @param ${p0} The minimum ${t0} to set.
 * @param ${p1} The maximum ${t1} to set.
 * @throw HKLException if the new ${class} is not valid.
 *
 * this method check that the new minimun is not bigger than the current
 * value of the ${class} and greater than the maximum.
 */"
      end

      operation 151042 "set"
	public explicit_return_type "void"
	nparams 3
	  param in name "min" explicit_type "double"
	  param in name "current" explicit_type "double"
	  param in name "max" explicit_type "double"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Set the minimum and the maximum of the ${class} class.
 * @param ${p0} The minimum ${t0} to set.
 * @param ${p1} The current ${t1} to set.
 * @param ${p2} The maximum ${t2} to set.
 * @throw HKLException if the new ${class} is not valid.
 *
 * this method do not check that the new minimun is not bigger than the current
 * value of the range and greater than the maximum.
 */"
      end

      operation 151170 "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "range" explicit_type "Range"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Set a ${class} from another one.
 * @param ${p0} The ${t0} to set.
 *
 * this method set only the _min, _current, _max Value of the ${class}.
 */"
      end

      operation 151298 "operator*="
	public explicit_return_type "Range"
	nparams 1
	  param in name "range" explicit_type "Range"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Multiply a ${class} by another one.
 * @param ${p0} The ${class} to multiply by.
 * @return A ${class} ref on the ${class} after the multiplication.
 *
 * This method modify min, current and max to reflect the multiplication.
 */
"
      end

      operation 151426 "operator*="
	public explicit_return_type "Range"
	nparams 1
	  param in name "d" explicit_type "double"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Multiply a ${class} by a ${t0} value.
 * @param ${p0} The ${t0} value.
 * @return The ${class} after the multiplication.
 *
 * This method modify min, current and max to reflect the multiplication.
 */
"
      end

      operation 151554 "contain_zero"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief check if the ${class} contain zero.
 * @return true if zero is include in between min, max.
 */
"
      end

      operation 151682 "operator=="
	const public explicit_return_type "bool"
	nparams 1
	  param in name "range" explicit_type "Range"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Are two ${class} equals ?
 * \\param ${p0} the ${t0} to compare with.
 */
"
      end

      operation 151810 "printToStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief print the ${class} into a flux
 * \\param flux The stream to print into.
 */"
      end

      operation 151938 "toStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Save the ${class} into a stream.
 * \\param flux the stream to save the ${class} into.
 * \\return The stream with the ${class}.
 */"
      end

      operation 152066 "fromStream"
	public explicit_return_type "istream"
	nparams 1
	  param inout name "flux" explicit_type "istream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Restore a ${class} from a stream.
 * \\param flux The stream containing the ${class} to restore.
 * @todo call update_observers or not ?
 */"
      end
    end

    class 133122 "Reflection"
      abstract 
      cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 137218 "_geometry"
	protected type class_ref 131714 // Geometry
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
	get_oper operation_ref 183810 // get_geometry
      end

      attribute 137346 "_hkl"
	protected type class_ref 128002 // svector
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
	get_oper operation_ref 184066 // get_hkl
	set_oper operation_ref 184194 // set_hkl
      end

      attribute 137474 "_flag"
	protected explicit_type "bool"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 137602 "_hkl_phi"
	protected type class_ref 128002 // svector
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
	get_oper operation_ref 183938 // get_hkl_phi
      end

      operation 183554 "Reflection"
	protected explicit_return_type ""
	nparams 3
	  param in name "geometry" type class_ref 131714 // Geometry
	  param in name "hkl" type class_ref 128002 // svector
	  param in name "flag" explicit_type "bool"
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${volatile}${throw} :
  _geometry(geometry),
  _hkl(hkl),
  _flag(flag) 
{
  ${body}}
"
	
	
	comment "/**
 * @brief Create a Reflection.
 * 
 * @param ${p0} The ${t0} of the reflection
 * @param ${p1} The hkl scattering vactor.
 * @param ${p2} if the reflection must be use during calculation.
 * @throw HKLException if the geometry is not valid.
 */
"
      end

      operation 214146 "~Reflection"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} 
{
  ${body}}
"
	
	
      end

      operation 183682 "clone"
	abstract const cpp_virtual public return_type class_ref 133122 // Reflection
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	comment "/**
 * @brief Create a clone of the current Reflection
 * @return A pointer on the newly created Reflection.
 *
 * do not forget to release the memory at the end with delete.
 */
"
      end

      operation 183810 "get_geometry"
	const cpp_inline public return_type class_ref 131714 // Geometry
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return _geometry;
}
"
	cpp_name_spec "get${name}"
	final 
	java_name_spec "get${name}"
	
	idl_name_spec "get${name}"
	get_of_attribute attribute_ref 137218 // _geometry
	comment "/**
 * @brief Get a constant reference on the geometry part of the Reflection.
 * @return the geometry part of the Reflecion.
 */
"
      end

      operation 184066 "get_hkl"
	const cpp_inline public return_type class_ref 128002 // svector
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return _hkl;
}
"
	cpp_name_spec "get${name}"
	final 
	java_name_spec "get${name}"
	
	idl_name_spec "get${name}"
	get_of_attribute attribute_ref 137346 // _hkl
	comment "/**
 * @brief Get a constant reference on the hkl scattering vector store in the Reflection.
 * @return The hkl coordinates in the crystal coordinates.
 */
"
      end

      operation 184194 "set_hkl"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" type class_ref 128002 // svector
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  _hkl = ${p0};
}
"
	cpp_name_spec "set${name}"
	
	java_name_spec "set${name}"
	
	idl_name_spec "set${name}"
	set_of_attribute attribute_ref 137346 // _hkl
	comment "/**
 * @brief Set the hkl scattering vector store in the Reflection.
 * @param hkl The scattering vector in the crystal coordinates to store in the Reflection.
 */
"
      end

      operation 183938 "get_hkl_phi"
	const cpp_inline public return_type class_ref 128002 // svector
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return _hkl_phi;
}
"
	cpp_name_spec "get${name}"
	final 
	java_name_spec "get${name}"
	
	idl_name_spec "get${name}"
	get_of_attribute attribute_ref 137602 // _hkl_phi
	comment "/**
 * @brief Get a constant reference on the hkl scattering vector store to fasten the affinement calculation.
 * @return The hkl coordinates in the last Axe coordinates.
 */
"
      end

      operation 184322 "flag"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get a constant reference on the flag store in the Reflection.
 * @return The flag of the Reflection.
 *
 * the flag is true when we use the reflection in the affinement, false otherwise.
 */
"
      end

      operation 184450 "flag"
	public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get a constant reference on the flag store in the Reflection.
 * @return The flag of the Reflection.
 *
 * the flag is true when we use the reflection in the affinement, false otherwise.
 */
"
      end

      operation 184578 "computeAngle"
	const public return_type class_ref 128060 // Value
	nparams 1
	  param in name "hkl" type class_ref 128002 // svector
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief compute the theoretical angle beetween two hkl vectors.
 * @param hkl The second scattering vector to compare with the Reflection internal hkl.
 * @return the angle between the two hkl.
 * @todo Maybe move this in the Sample and add a computeAngle(Reflection const & reflection)
 * @todo add the mathematical formula.
 */
"
      end

      operation 184706 "isColinear"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "reflection" type class_ref 133122 // Reflection
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Check if two reflections are colinear.
 * @param reflection The reflection to compare with.
 * @return true if the reflections are colinear, false otherwise.
 * @todo Add the mathematical formula.
 */
"
      end

      operation 184834 "operator=="
	const public explicit_return_type "bool"
	nparams 1
	  param in name "reflection" type class_ref 133122 // Reflection
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * \\brief Are two ${class} equals ?
 * \\param ${p0} the ${t0} to compare with.
 * \\return true if both are equals flase otherwise.
 */"
      end

      operation 184962 "printToStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief print the ${class} into a flux
 * @param ${p0} The stream to print into.
 * @return The modified flux.
 */"
      end

      operation 185090 "toStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief print on a stream the content of the ${class}
 * @param flux the ostream to modify.
 * @return the modified ostream
 */"
      end

      operation 185218 "fromStream"
	public explicit_return_type "istream"
	nparams 1
	  param inout name "flux" explicit_type "istream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief restore the content of the ${class} from an istream
 * @param flux the istream.
 * @return the modified istream.
 * @todo problem of security here.
 */"
      end
    end

    class 133506 "ReflectionFactory"cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 138114 "_geometry"
	protected type class_ref 131714 // Geometry
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 138242 "_type"
	protected type class_ref 133250 // ReflectionType
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      operation 185730 "ReflectionFactory"
	public explicit_return_type ""
	nparams 2
	  param inout name "geometry" type class_ref 131714 // Geometry
	  param in name "type" type class_ref 133250 // ReflectionType
	cpp_decl "    ${description}${inline}${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${volatile}${throw}  :
  _geometry(geometry),
  _type(type)
{
  ${body}}
"
	
	
	comment "/**
 * @brief The default constructor.
 * @param geometry the Geometry use to fill the Reflection._geometry.
 * @param type the type of the Reflection.
 */
"
      end

      operation 185858 "create"
	const public return_type class_ref 133122 // Reflection
	nparams 0
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Create a new reflection.
 * @return The created Reflection.
 */
"
      end
    end

    class 133634 "ReflectionList"cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 138370 "_geometry"
	protected type class_ref 131714 // Geometry
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      classrelation 134402 // _reflectionFactory (<directional aggregation>)
	relation 134018 o-->
	  a role_name "_reflectionFactory" multiplicity "1" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 134402 // _reflectionFactory (<directional aggregation>)
	  b parent class_ref 133506 // ReflectionFactory
      end

      classrelation 134530 // _reflections (<directional aggregation>)
	relation 134146 o-->
	  stereotype "vector"
	  a role_name "_reflections" multiplicity "*" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type} *> ${name}${value};
"
	    classrelation_ref 134530 // _reflections (<directional aggregation>)
	  b parent class_ref 133122 // Reflection
      end

      class 133762 "iterator"
	visibility public stereotype "typedef"
	 explicit_base_type "vector<Reflection *>::iterator"
	cpp_decl "${description}typedef ${type} ${name};
"
	java_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      operation 185986 "ReflectionList"
	public explicit_return_type ""
	nparams 2
	  param in name "geometry" type class_ref 131714 // Geometry
	  param in name "type" type class_ref 133250 // ReflectionType
	cpp_decl "    ${description}${inline}${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${volatile}${throw} :
  _geometry(geometry) 
{
  ${body}}
"
	
	
	comment "/**
 * @brief Default constructor
 * @param geometry The Geometry related to the Reflection 
 * @param type The type of the Reflection in the ReflectionList.
 */
"
      end

      operation 186114 "~ReflectionList"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} 
{
  ${body}}
"
	
	
	comment "/**
 * @brief The default destructor.
 */
"
      end

      operation 186242 "ReflectionList"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 133634 // ReflectionList
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} :
  _geometry(source._geometry)
{
  ${body}}
"
	
	
	comment "/**
 * @brief The copy constructor.
 * @param factory The factory to copy from.
 */
"
      end

      operation 186370 "clone"
	const cpp_virtual public return_type class_ref 133634 // ReflectionList
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Make a deep copy of a ReflectionList.
 * 
 * @return A pointer on the copied ReflectionList.
 */
"
      end

      operation 186498 "add"
	public return_type class_ref 133122 // Reflection
	nparams 1
	  param in name "hkl" type class_ref 128002 // svector
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Add a reflection to the ReflectionList.
 * @param hkl The scattering vector of the added reflection.
 * @return A reference on the added reflection.
 */
"
      end

      operation 186626 "del"
	public explicit_return_type "void"
	nparams 1
	  param in name "index" explicit_type "uint"
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Delete the ith reflection
 * @param index of the reflection to delete.
 * @throw HKLException if index is out of range.
 */
"
      end

      operation 186754 "size"
	const public explicit_return_type "uint"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Return the number of reflection in the ReflectionList.
 * @return The number of reflection in the ReflectionList.
 */
"
      end

      operation 186882 "size_indep"
	const public explicit_return_type "uint"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Return the number of undependant Reflection in the ReflectionList.
 * 
 * @return The number of non-colinear Reflection in the ReflectionList.
 */
"
      end

      operation 187010 "operator[]"
	public return_type class_ref 133122 // Reflection
	nparams 1
	  param in name "index" explicit_type "uint"
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} * ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Return a reference on the ReflectionList ith Reflection.
 * 
 * @param index of the returned Reflection. 
 * @throw HKLException if index is out of range. 
 * 
 * @return The ith Reflection.
 */
"
      end

      operation 187138 "begin"
	public explicit_return_type "ReflectionList::iterator"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get an iterator on the first element of ReflectionList.
 * @return The iterator.
 */
"
      end

      operation 187266 "end"
	public explicit_return_type "ReflectionList::iterator"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get an iterator on the end of ReflectionList.
 * @return The iterator.
 */
"
      end

      operation 187394 "operator=="
	const public explicit_return_type "bool"
	nparams 1
	  param in name "reflectionList" type class_ref 133634 // ReflectionList
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * \\brief Are two ${class} equals ?
 * \\param ${p0} the ${t0} to compare with.
 * \\return true if both are equals flase otherwise.
 */"
      end

      operation 187522 "printToStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief print the ${class} into a flux
 * @param ${p0} The stream to print into.
 * @return The modified flux.
 */"
      end

      operation 187650 "toStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief print on a stream the content of the ${class}
 * @param flux the ostream to modify.
 * @return the modified ostream
 */"
      end

      operation 187778 "fromStream"
	public explicit_return_type "istream"
	nparams 1
	  param inout name "flux" explicit_type "istream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief restore the content of the ${class} from an istream
 * @param flux the istream.
 * @return the modified istream.
 * @todo problem of security here.
 */"
      end
    end

    class 133250 "ReflectionType"
       stereotype "enum"
      cpp_decl "${description}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${public}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      idl_decl "${comment}enum ${name} {
${items}};
"
      explicit_switch_type ""
      
      attribute 137730 "REFLECTION_MONOCRYSTAL"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	idl_decl ""
      end
    end

    class 128514 "smatrix"cpp_decl "${description}${template}class ${name}${inherit} {
  friend class svector;
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 128514 "_m11"
	protected explicit_type "double"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 128642 "_m12"
	protected explicit_type "double"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 128770 "_m13"
	protected explicit_type "double"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 128898 "_m21"
	protected explicit_type "double"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 129026 "_m22"
	protected explicit_type "double"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 129154 "_m23"
	protected explicit_type "double"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 129282 "_m31"
	protected explicit_type "double"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 129410 "_m32"
	protected explicit_type "double"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 129538 "_m33"
	protected explicit_type "double"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      operation 130690 "smatrix"
	stereotype "constructor"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} :
  _m11(0), _m12(0), _m13(0),
  _m21(0), _m22(0), _m23(0),
  _m31(0), _m32(0), _m33(0)
{
  ${body}}
"
	
	
      end

      operation 134402 "smatrix"
	stereotype "constructor"
	public explicit_return_type ""
	nparams 9
	  param in name "m11" explicit_type "double"
	  param in name "m12" explicit_type "double"
	  param in name "m13" explicit_type "double"
	  param in name "m21" explicit_type "double"
	  param in name "m22" explicit_type "double"
	  param in name "m23" explicit_type "double"
	  param in name "m31" explicit_type "double"
	  param in name "m32" explicit_type "double"
	  param in name "m33" explicit_type "double"
	cpp_decl "    ${description}${inline}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${volatile}${throw} :
  _m11(m11), _m12(m12), _m13(m13),
  _m21(m21), _m22(m22), _m23(m23),
  _m31(m31), _m32(m32), _m33(m33)
{
  ${body}}
"
	
	
      end

      operation 134530 "smatrix"
	stereotype "constructor"
	public explicit_return_type ""
	nparams 3
	  param in name "euler_x" explicit_type "double"
	  param in name "euler_y" explicit_type "double"
	  param in name "euler_z" explicit_type "double"
	cpp_decl "    ${description}${inline}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${volatile}${throw} 
{
  ${body}}
"
	
	
      end

      operation 130946 "smatrix"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 128514 // smatrix
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} :
  _m11(source._m11), _m12(source._m12), _m13(source._m13),
  _m21(source._m21), _m22(source._m22), _m23(source._m23),
  _m31(source._m31), _m32(source._m32), _m33(source._m33)
{
  ${body}}
"
	
	
      end

      operation 134658 "operator=="
	const public explicit_return_type "bool"
	nparams 1
	  param in name "M" type class_ref 128514 // smatrix
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 134786 "operator*="
	public return_type class_ref 128514 // smatrix
	nparams 1
	  param in name "M" type class_ref 128514 // smatrix
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 133250 "set"
	public explicit_return_type "void"
	nparams 9
	  param in name "m11" explicit_type "double"
	  param in name "m12" explicit_type "double"
	  param in name "m13" explicit_type "double"
	  param in name "m21" explicit_type "double"
	  param in name "m22" explicit_type "double"
	  param in name "m23" explicit_type "double"
	  param in name "m31" explicit_type "double"
	  param in name "m32" explicit_type "double"
	  param in name "m33" explicit_type "double"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 135426 "set"
	public explicit_return_type "void"
	nparams 3
	  param in name "euler_x" explicit_type "double"
	  param in name "euler_y" explicit_type "double"
	  param in name "euler_z" explicit_type "double"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 134274 "get"
	const public explicit_return_type "double"
	nparams 2
	  param in name "i" explicit_type "uint"
	  param in name "j" explicit_type "uint"
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 133890 "printToStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 134018 "toStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 134146 "fromStream"
	public explicit_return_type "istream"
	nparams 1
	  param inout name "flux" explicit_type "istream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Restore a ${class} from a stream.
 * \\param flux The stream containing the ${class} to restore.
 */"
      end

      operation 134914 "operator*"
	const public return_type class_ref 128514 // smatrix
	nparams 1
	  param in name "M" type class_ref 128514 // smatrix
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 135042 "operator*"
	const public return_type class_ref 128002 // svector
	nparams 1
	  param in name "v" type class_ref 128002 // svector
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 135170 "asEulerian"
	const public return_type class_ref 128002 // svector
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 135298 "transpose"
	public return_type class_ref 128514 // smatrix
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end
    end

    class 131458 "Source"cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 132610 // _waveLength (<directional aggregation by value>)
	relation 132226 *-->
	  a role_name "_waveLength" multiplicity "1" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 132610 // _waveLength (<directional aggregation by value>)
	  b parent class_ref 128060 // Value
	get_oper operation_ref 162562 // get_waveLength
      end

      classrelation 132738 // _direction (<directional aggregation by value>)
	relation 132354 *-->
	  a role_name "_direction" multiplicity "" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 132738 // _direction (<directional aggregation by value>)
	  b parent class_ref 128002 // svector
	get_oper operation_ref 162690 // get_direction
      end

      classrelation 132866 // _qi (<directional aggregation by value>)
	relation 132482 *-->
	  a role_name "_qi" multiplicity "" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 132866 // _qi (<directional aggregation by value>)
	  b parent class_ref 128770 // Quaternion
	get_oper operation_ref 162818 // get_qi
      end

      operation 162306 "Source"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} :
  _waveLength(1.54),
  _direction(svector(1,0,0)) 
{
  ${body}}
"
	
	
	comment "/**
 * @brief Default Constructor.
 *
 * Create a new ${class} with all is privates parameters set to zero.
 * After this you must set the waveLength before using it, with the
 * setWaveLength method.
 */"
      end

      operation 162434 "Source"
	public explicit_return_type ""
	nparams 2
	  param in name "waveLength" type class_ref 128060 // Value
	  param in name "direction" type class_ref 128002 // svector
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile}${throw} 
{
  ${body}}
"
	
	
	comment "/**
 * @brief Constructor from parameters
 * @param ${p0} the wavelength of the beam.
 * @param ${p1} the X-rays beam direction. This parameter is normalize.
 *
 * Create a new ${class} from the parameters.
 * <b>_waveLength unit must be consistent with the crystal length units</b>.
 */"
      end

      operation 162562 "get_waveLength"
	const cpp_inline public return_type class_ref 128060 // Value
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return _waveLength;
}
"
	cpp_name_spec "get${name}"
	final 
	java_name_spec "get${name}"
	
	idl_name_spec "get${name}"
	get_of_relation classrelation_ref 132610 // _waveLength (<directional aggregation by value>)
      end

      operation 162690 "get_direction"
	const cpp_inline public return_type class_ref 128002 // svector
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return _direction;
}
"
	cpp_name_spec "get${name}"
	final 
	java_name_spec "get${name}"
	
	idl_name_spec "get${name}"
	get_of_relation classrelation_ref 132738 // _direction (<directional aggregation by value>)
      end

      operation 162818 "get_qi"
	const cpp_inline public return_type class_ref 128770 // Quaternion
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return _qi;
}
"
	cpp_name_spec "get${name}"
	final 
	java_name_spec "get${name}"
	
	idl_name_spec "get${name}"
	get_of_relation classrelation_ref 132866 // _qi (<directional aggregation by value>)
      end

      operation 162946 "setWaveLength"
	public explicit_return_type "void"
	nparams 1
	  param in name "waveLength" type class_ref 128060 // Value
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief set the wavelength
 * @param ${p0} the wavelength to set.
 * @exception HKLException if ${p0} == 0.
 *
 * Set the _p{0} of the source
 * <b>wl unit must be consistent with the crystal length units</b>.
 */"
      end

      operation 163074 "setDirection"
	public explicit_return_type "void"
	nparams 1
	  param in name "direction" type class_ref 128002 // svector
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Set the _{p0} of the ${class}.
 * @param ${p0} to set
 *
 * The ${p0} is normalize.
 */"
      end

      operation 163202 "getKi"
	const public return_type class_ref 128002 // svector
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the ki vector
 */"
      end

      operation 163330 "setKi"
	public explicit_return_type "void"
	nparams 1
	  param in name "ki" type class_ref 128002 // svector
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief set the ki vector
 */"
      end

      operation 163458 "operator=="
	const public explicit_return_type "bool"
	nparams 1
	  param in name "source" type class_ref 131458 // Source
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * \\brief Are two ${class} equals ?
 * \\param ${p0} the ${t0} to compare with.
 * \\return true if both are equals flase otherwise.
 */"
      end

      operation 163586 "printToStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief print the ${class} into a flux
 * @param ${p0} The stream to print into.
 * @return The modified flux.
 */"
      end

      operation 163714 "toStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief print on a stream the content of the ${class}
 * @param flux the ostream to modify.
 * @return the modified ostream
 */"
      end

      operation 163842 "fromStream"
	public explicit_return_type "istream"
	nparams 1
	  param inout name "flux" explicit_type "istream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief restore the content of the ${class} from an istream
 * @param flux the istream.
 * @return the modified istream.
 * @todo problem of security here.
 */"
      end
    end

    class 128002 "svector"cpp_decl "${description}${template}class ${name}${inherit} {
  friend class smatrix;
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 128002 "_x"
	protected explicit_type "double"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 128130 "_y"
	protected explicit_type "double"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 128258 "_z"
	protected explicit_type "double"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      operation 129026 "svector"
	stereotype "constructor"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} :
  _x(0),
  _y(0),
  _z(0)
{
  ${body}}
"
	
	
      end

      operation 129538 "svector"
	stereotype "constructor"
	public explicit_return_type ""
	nparams 3
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "z" explicit_type "double"
	cpp_decl "    ${description}${inline}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${volatile}${throw} :
  _x(x),
  _y(y),
  _z(z)
{
  ${body}}
"
	
	
      end

      operation 129282 "svector"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 128002 // svector
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} :
  _x(source._x),
  _y(source._y),
  _z(source._z)
{
  ${body}}
"
	
	
      end

      operation 129666 "x"
	public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 129794 "y"
	public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 129922 "z"
	public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 130050 "x"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} const & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} const & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 130178 "y"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} const & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} const & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 130306 "z"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} const & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} const & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 130434 "operator=="
	const public explicit_return_type "bool"
	nparams 1
	  param in name "v" type class_ref 128002 // svector
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 130562 "operator*="
	public return_type class_ref 128002 // svector
	nparams 1
	  param in name "v" type class_ref 128002 // svector
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 131202 "operator*="
	public return_type class_ref 128002 // svector
	nparams 1
	  param in name "M" type class_ref 128514 // smatrix
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 131330 "operator*="
	public return_type class_ref 128002 // svector
	nparams 1
	  param in name "d" explicit_type "double"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 131458 "operator/="
	public return_type class_ref 128002 // svector
	nparams 1
	  param in name "d" explicit_type "double"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 131586 "operator-="
	public return_type class_ref 128002 // svector
	nparams 1
	  param in name "v" type class_ref 128002 // svector
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 131714 "sum"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 131842 "set"
	public explicit_return_type "void"
	nparams 3
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "z" explicit_type "double"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 131970 "scalar"
	const public explicit_return_type "double"
	nparams 1
	  param in name "v" type class_ref 128002 // svector
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 132098 "vectorialProduct"
	const public return_type class_ref 128002 // svector
	nparams 1
	  param in name "v" type class_ref 128002 // svector
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 132226 "angle"
	const public explicit_return_type "double"
	nparams 1
	  param in name "v" type class_ref 128002 // svector
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 132354 "axisSystem"
	const public return_type class_ref 128514 // smatrix
	nparams 1
	  param in name "v" type class_ref 128002 // svector
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 132482 "norm2"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 132610 "normalize"
	const public return_type class_ref 128002 // svector
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 132738 "isColinear"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "v" type class_ref 128002 // svector
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 132866 "randomize"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 132994 "randomize"
	public return_type class_ref 128002 // svector
	nparams 1
	  param in name "v" type class_ref 128002 // svector
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 133122 "randomize"
	public return_type class_ref 128002 // svector
	nparams 2
	  param in name "v1" type class_ref 128002 // svector
	  param in name "v2" type class_ref 128002 // svector
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 133378 "rotatedAroundVector"
	const public return_type class_ref 128002 // svector
	nparams 2
	  param in name "axe" type class_ref 128002 // svector
	  param in name "angle" explicit_type "double"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * \\brief rotate a vector around another one with an angle.
 * \\param axe The svector corresponding to the rotation axe.
 * \\param angle the angle of rotation.
 * \\return The new vector.
 */"
      end

      operation 133506 "printToStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 133634 "toStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 133762 "fromStream"
	public explicit_return_type "istream"
	nparams 1
	  param inout name "flux" explicit_type "istream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Restore a ${class} from a stream.
 * \\param flux The stream containing the ${class} to restore.
 */"
      end

      operation 135554 "norminf"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end
    end

    class 128060 "Value"cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${public}interface ${name}${extends} {
${members}}
"
      idl_decl "${comment}${abstract}${local}interface ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      
      comment "/**
  * @brief the class use to store a double with an unit.
  */"
      attribute 128060 "_value"
	protected explicit_type "double"
	init_value "0."
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
	get_oper operation_ref 128107 // get_value
	set_oper operation_ref 128235 // set_value
      end

      operation 128188 "Value"
	stereotype "constructor"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} :
  _value(0)
{
  ${body}}
"
	
	
	comment "/**
 * @brief The default constructor.
 */"
      end

      operation 128054 "Value"
	stereotype "constructor"
	public explicit_return_type ""
	nparams 1
	  param in name "value" explicit_type "double"
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} :
  _value(value)
{
  ${body}}
"
	
	
	comment "/**
 * @brief A constructor from a double
 */"
      end

      operation 147970 "Value"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 128060 // Value
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} :
 _value(source._value) 
{
  ${body}}
"
	
	
      end

      operation 128107 "get_value"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw};
"
	cpp_def "${description}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return _value;
}
"
	cpp_name_spec "get${name}"
	final 
	java_name_spec "get_${name}"
	
	idl_name_spec "get_${name}"
	get_of_attribute attribute_ref 128060 // _value
	comment "/**
 *  @brief The get accessor.
 */"
      end

      operation 128235 "set_value"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "double"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  _value = ${p0};
}
"
	cpp_name_spec "set${name}"
	
	java_name_spec "set_${name}"
	
	idl_name_spec "set_${name}"
	set_of_attribute attribute_ref 128060 // _value
	comment "/**
 *  @brief The set accessor
 *  @param ${p0} the ${class} to set.
 */"
      end

      operation 128363 "operator=="
	const public explicit_return_type "bool"
	nparams 1
	  param in name "value" type class_ref 128060 // Value
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 128004 "operator<="
	const public explicit_return_type "bool"
	nparams 1
	  param in name "value" type class_ref 128060 // Value
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 152194 "operator>="
	const public explicit_return_type "bool"
	nparams 1
	  param in name "value" type class_ref 128060 // Value
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 128260 "operator<"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "value" type class_ref 128060 // Value
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 128388 "operator>"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "value" type class_ref 128060 // Value
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 128516 "operator+="
	public return_type class_ref 128060 // Value
	nparams 1
	  param in name "value" type class_ref 128060 // Value
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 128644 "operator-="
	public return_type class_ref 128060 // Value
	nparams 1
	  param in name "value" type class_ref 128060 // Value
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 128772 "operator*="
	public return_type class_ref 128060 // Value
	nparams 1
	  param in name "value" type class_ref 128060 // Value
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 128900 "operator/="
	public return_type class_ref 128060 // Value
	nparams 1
	  param in name "value" type class_ref 128060 // Value
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 129028 "operator+"
	const public return_type class_ref 128060 // Value
	nparams 1
	  param in name "value" type class_ref 128060 // Value
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 129156 "operator-"
	const public return_type class_ref 128060 // Value
	nparams 1
	  param in name "value" type class_ref 128060 // Value
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 129284 "operator*"
	const public return_type class_ref 128060 // Value
	nparams 1
	  param in name "value" type class_ref 128060 // Value
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 129412 "operator/"
	const public return_type class_ref 128060 // Value
	nparams 1
	  param in name "value" type class_ref 128060 // Value
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 129540 "printToStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief print the ${class} into a flux
 * \\param flux The stream to print into.
 */"
      end

      operation 128182 "toStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Save the ${class} into a stream.
 * \\param flux the stream to save the ${class} into.
 * \\return The stream with the ${class}.
 */"
      end

      operation 128310 "fromStream"
	public explicit_return_type "istream"
	nparams 1
	  param inout name "flux" explicit_type "istream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/*!
 * \\brief Restore a ${class} from a stream.
 * \\param flux The stream containing the ${class} to restore.
 */"
      end
    end

    class 130562 "map"nformals 2
      formal name "C" type "class" explicit_default_value ""
        explicit_extends ""
      formal name "T" type "class" explicit_default_value ""
        explicit_extends ""
      cpp_external cpp_decl "${name}
#include <${name}>
"
      java_decl "${comment}${@}${public}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      
    end

    class 129026 "string"cpp_external cpp_decl "${name}
#include <${name}>
using namespace std;
"
      java_decl "${comment}${@}${public}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      idl_decl "${comment}${abstract}${custom}valuetype ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      
    end

    class 133378 "Sample"
      abstract 
      cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 134146 // <generalisation>
	relation 133762 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 134146 // <generalisation>
	  b parent class_ref 131330 // FitParameterList
      end

      classrelation 134274 // <generalisation>
	relation 133890 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 134274 // <generalisation>
	  b parent class_ref 129410 // Object
      end

      attribute 137858 "_geometry"
	protected type class_ref 131714 // Geometry
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      attribute 137986 "_lattice"
	protected type class_ref 131586 // Lattice
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      classrelation 134786 // _reflections (<directional aggregation>)
	relation 134402 o-->
	  a role_name "_reflections" multiplicity "1" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 134786 // _reflections (<directional aggregation>)
	  b parent class_ref 133634 // ReflectionList
      end

      operation 185346 "Sample"
	protected explicit_return_type ""
	nparams 2
	  param inout name "geometry" type class_ref 131714 // Geometry
	  param in name "name" type class_ref 129026 // string
	cpp_decl "    ${description}${inline}${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile}${throw} :
  FitParameterList(),
  Object(name, \"no description\"),
  _geometry(geometry)
{
  ${body}}
"
	
	
	comment "/**
 * @brief The default constructor
 * @param geometry The geometry use to create the Reflections.
 * @param name The name of the Reflections.
 */
"
      end

      operation 191874 "~Sample"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} 
{
  ${body}}
"
	
	
      end

      operation 185474 "Sample"
	stereotype "copy"
	protected explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 133378 // Sample
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} :
  FitParameterList(),
  Object(source),
  _geometry(source._geometry),
  _lattice(source._lattice)
{
  ${body}}
"
	
	
      end

      operation 188290 "clone"
	abstract const cpp_virtual public return_type class_ref 133378 // Sample
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	comment "/**
 * @brief Clone the current Sample.
 * @return A pointer on the cloned sample.
 */
"
      end

      operation 188418 "get_UB"
	abstract cpp_virtual public return_type class_ref 128514 // smatrix
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	comment "/**
 * @brief Get the UB matrix of the Sample.
 * @return The UB matrix.
 */
"
      end

      operation 188546 "get_type"
	abstract cpp_virtual public return_type class_ref 134018 // SampleType
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	comment "/**
 * @brief Get the type of the Sample.
 * 
 * @return The Sample type.
 *
 * this method is use during the toStream and fromStream process.
 */
"
      end

      operation 188674 "lattice"
	public return_type class_ref 131586 // Lattice
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the Lattice of the Sample.
 * 
 * @return A reference on the Lattice.
 */
"
      end

      operation 188802 "reflections"
	public return_type class_ref 133634 // ReflectionList
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the reflections associated with the Sample.
 * 
 * @return A reference on thoses reflections.
 */
"
      end

      operation 188930 "operator=="
	const public explicit_return_type "bool"
	nparams 1
	  param in name "sample" type class_ref 133378 // Sample
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * \\brief Are two ${class} equals ?
 * \\param ${p0} the ${t0} to compare with.
 * \\return true if both are equals flase otherwise.
 */"
      end

      operation 189058 "printToStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief print the ${class} into a flux
 * @param ${p0} The stream to print into.
 * @return The modified flux.
 */"
      end

      operation 189186 "toStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief print on a stream the content of the ${class}
 * @param flux the ostream to modify.
 * @return the modified ostream
 */"
      end

      operation 189314 "fromStream"
	public explicit_return_type "istream"
	nparams 1
	  param inout name "flux" explicit_type "istream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief restore the content of the ${class} from an istream
 * @param flux the istream.
 * @return the modified istream.
 * @todo problem of security here.
 */"
      end
    end

    class 134274 "SampleFactory"cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 139138 "_geometry"
	protected type class_ref 131714 // Geometry
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      operation 192002 "SampleFactory"
	public explicit_return_type ""
	nparams 1
	  param inout name "geometry" type class_ref 131714 // Geometry
	cpp_decl "    ${description}${inline}${name}${(}${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${t0} & ${p0}${)}${volatile}${throw} :
  _geometry(geometry) 
{
  ${body}}
"
	
	
	comment "/**
 * @brief The default constructor.
 * @param geometry the Geometry use to fill the Reflection._geometry.
 */
"
      end

      operation 192258 "types"
	const public explicit_return_type "vector<SampleType>"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 192130 "create"
	const public return_type class_ref 133378 // Sample
	nparams 2
	  param in name "name" type class_ref 129026 // string
	  param in name "type" type class_ref 134018 // SampleType
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} * ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Create a new reflection.
 * @return The created Reflection.
 */
"
      end
    end

    class 134402 "SampleList"cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 139394 "_geometry"
	protected type class_ref 131714 // Geometry
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      classrelation 135298 // _current (<directional aggregation>)
	relation 134914 o-->
	  a role_name "_current" multiplicity "1" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 135298 // _current (<directional aggregation>)
	  b parent class_ref 133378 // Sample
      end

      classrelation 135426 // _samplefactory (<directional aggregation>)
	relation 135042 o-->
	  a role_name "_samplefactory" multiplicity "1" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 135426 // _samplefactory (<directional aggregation>)
	  b parent class_ref 134274 // SampleFactory
      end

      classrelation 135554 // _samples (<directional aggregation>)
	relation 135170 o-->
	  stereotype "vector"
	  a role_name "_samples" multiplicity "*" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type} *> ${name}${value};
"
	    classrelation_ref 135554 // _samples (<directional aggregation>)
	  b parent class_ref 133378 // Sample
      end

      class 134530 "iterator"
	visibility public stereotype "typedef"
	 explicit_base_type "vector<Sample *>::iterator"
	cpp_decl "${description}typedef ${type} ${name};
"
	java_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      class 134658 "const_iterator"
	visibility public stereotype "typedef"
	 explicit_base_type "vector<Sample *>::const_iterator"
	cpp_decl "${description}typedef ${type} ${name};
"
	java_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      operation 192386 "SampleList"
	public explicit_return_type ""
	nparams 1
	  param inout name "geometry" type class_ref 131714 // Geometry
	cpp_decl "    ${description}${inline}${name}${(}${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${t0} & ${p0}${)}${volatile}${throw} :
  _geometry(geometry),
  _current(NULL) 
{
  ${body}}
"
	
	
	comment "/**
 * @brief Default constructor
 * @param geometry The Geometry related to the Reflection.
 */
"
      end

      operation 192514 "~SampleList"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} 
{
  ${body}}
"
	
	
	comment "/**
 * @brief The default destructor.
 */
"
      end

      operation 192642 "SampleList"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 134402 // SampleList
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} :
  _geometry(source._geometry) 
{
  ${body}}
"
	
	
	comment "/**
 * @brief The copy constructor.
 * @param ${p0} The ${t0} to copy from.
 */
"
      end

      operation 194306 "types"
	const public explicit_return_type "vector<SampleType>"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get a list of all Sample type available.
 * @return A vector fill with all available sample type.
 */"
      end

      operation 192898 "add"
	public return_type class_ref 133378 // Sample
	nparams 2
	  param in name "name" type class_ref 129026 // string
	  param in name "type" type class_ref 134018 // SampleType
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} * ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Add a Sample to the SampleList.
 * @param name The name of the Sample
 * @param type The type of the Sample to add
 * @throw HKLException if a sample with the same name is already present in the list. 
 */"
      end

      operation 194434 "add_copy"
	public return_type class_ref 133378 // Sample
	nparams 1
	  param inout name "pos" explicit_type "SampleList::iterator"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} * ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief add a copy of a sample
 * @param pos An iterator on the Sample to copy.
 */"
      end

      operation 194562 "erase"
	public explicit_return_type "void"
	nparams 1
	  param inout name "pos" explicit_type "SampleList::iterator"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Remove a sample from the SampleList.
 * @param pos the position of the Sample.
 * @throw HKLException If the sample is not present. 
 */"
      end

      operation 194690 "clear"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Remove all sample from the SampleList.
 */"
      end

      operation 192770 "set_current"
	public return_type class_ref 133378 // Sample
	nparams 1
	  param in name "name" type class_ref 129026 // string
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} * ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Set the nth sample as the current sample.
 * @param name The name of the sample to set as current.
 * @throw HKLException if the index is out of range.
 */"
      end

      operation 195202 "get_current"
	const public return_type class_ref 133378 // Sample
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the current sample
 * @return A pointer on the current sample.
 */"
      end

      operation 193026 "current"
	public return_type class_ref 133378 // Sample
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the current sample
 * @return A pointer on the current sample.
 */"
      end

      operation 193154 "get_names"
	const public explicit_return_type "vector<string>"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Return the names of all samples.
 */
"
      end

      operation 194818 "size"
	const public explicit_return_type "uint"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 193410 "operator[]"
	public return_type class_ref 133378 // Sample
	nparams 1
	  param in name "name" type class_ref 129026 // string
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} * ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 193538 "begin"
	public explicit_return_type "SampleList::iterator"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get an iterator on the first element of ReflectionList.
 * @return The iterator.
 */
"
      end

      operation 193666 "end"
	public explicit_return_type "SampleList::iterator"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get an iterator on the end of ReflectionList.
 * @return The iterator.
 */
"
      end

      operation 194946 "begin"
	const public explicit_return_type "SampleList::const_iterator"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get an iterator on the first element of ReflectionList.
 * @return The iterator.
 */
"
      end

      operation 195074 "end"
	const public explicit_return_type "SampleList::const_iterator"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get an iterator on the end of ReflectionList.
 * @return The iterator.
 */
"
      end

      operation 193794 "operator=="
	const public explicit_return_type "bool"
	nparams 1
	  param in name "sampleList" type class_ref 134402 // SampleList
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * \\brief Are two ${class} equals ?
 * \\param ${p0} the ${t0} to compare with.
 * \\return true if both are equals flase otherwise.
 */"
      end

      operation 193922 "printToStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief print the ${class} into a flux
 * @param ${p0} The stream to print into.
 * @return The modified flux.
 */"
      end

      operation 194050 "toStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief print on a stream the content of the ${class}
 * @param flux the ostream to modify.
 * @return the modified ostream
 */"
      end

      operation 194178 "fromStream"
	public explicit_return_type "istream"
	nparams 1
	  param inout name "flux" explicit_type "istream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief restore the content of the ${class} from an istream
 * @param flux the istream.
 * @return the modified istream.
 * @todo problem of security here.
 */"
      end
    end

    class 134018 "SampleType"
       stereotype "enum"
      cpp_decl "${description}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${public}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      idl_decl "${comment}enum ${name} {
${items}};
"
      explicit_switch_type ""
      
      attribute 138498 "SAMPLE_MONOCRYSTAL"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	idl_decl ""
      end
    end

    class 138754 "Mode"
      abstract 
      cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 147330 // <generalisation>
	relation 146946 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 147330 // <generalisation>
	  b parent class_ref 131202 // HKLObject
      end

      operation 214402 "Mode"
	protected explicit_return_type ""
	nparams 2
	  param in name "name" type class_ref 129026 // string
	  param in name "description" type class_ref 129026 // string
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile}${throw} :
  HKLObject(name, description)
{
  ${body}}
"
	
	
	comment "/**
 * @brief The default constructor of the ${class} class.
 * @param ${p0} the name of the ${class}.
 * @param ${p1} the description of the ${class}.
 */
"
      end

      operation 214530 "~Mode"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} 
{
  ${body}}
"
	
	
      end

      operation 214658 "computeAngles"
	abstract const cpp_virtual public explicit_return_type "void"
	nparams 4
	  param in name "h" type class_ref 128060 // Value
	  param in name "k" type class_ref 128060 // Value
	  param in name "l" type class_ref 128060 // Value
	  param in name "UB" type class_ref 128514 // smatrix
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}${)}${const}${volatile}${throw}${abstract};
"
	
	
	comment "/**
 * @brief The main function to get a sample of angles from (h,k,l).
 * @param ${p0} The scaterring vector first coordinate.
 * @param ${p1} The scaterring vector second coordinate.
 * @param ${p2} The scaterring vector third coordinate.
 * @param ${p3} The product of the orientation matrix U by the crystal matrix B.
 */
"
      end
    end

    class 139138 "ModeList"cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 147970 // _current (<directional aggregation>)
	relation 147586 o-->
	  a role_name "_current" multiplicity "1" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 147970 // _current (<directional aggregation>)
	  b parent class_ref 138754 // Mode
      end

      classrelation 148098 // _modes (<directional aggregation>)
	relation 147714 o-->
	  stereotype "vector"
	  a role_name "_modes" multiplicity "*" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type} *> ${name}${value};
"
	    classrelation_ref 148098 // _modes (<directional aggregation>)
	  b parent class_ref 138754 // Mode
      end

      class 139266 "iterator"
	visibility public stereotype "typedef"
	 explicit_base_type "vector<Mode *>::iterator"
	cpp_decl "${description}typedef ${type} ${name};
"
	java_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      class 139394 "const_iterator"
	visibility public stereotype "typedef"
	 explicit_base_type "vector<Mode *>::const_iterator"
	cpp_decl "${description}typedef ${type} ${name};
"
	java_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      operation 215298 "ModeList"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} 
{
  ${body}}
"
	
	
	comment "/**
 * @brief Default constructor of the ${class} class.
 */
"
      end

      operation 215426 "~ModeList"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} 
{
  ${body}}
"
	
	
	comment "/**
 * @brief The default destructor.
 */
"
      end

      operation 215810 "add"
	public return_type class_ref 138754 // Mode
	nparams 1
	  param in name "mode" type class_ref 138754 // Mode
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} * ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Add a mode to the ${class}.
 * @param ${p0} The ${t0} to add.
 * @return NULL if the ${t0} can not be add or a Pointer on the added ${t0}
 */"
      end

      operation 216066 "erase"
	public explicit_return_type "ModeList::iterator"
	nparams 1
	  param inout name "pos" explicit_type "ModeList::iterator"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Remove a Mode from the ${class}.
 * @param ${p0} The ${t0} position of the Sample.
 * @throw HKLException If the sample is not present. 
 */"
      end

      operation 216194 "clear"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Remove all sample from the SampleList.
 */"
      end

      operation 216322 "set_current"
	public return_type class_ref 138754 // Mode
	nparams 1
	  param in name "name" type class_ref 129026 // string
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} * ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Set the nth Mode as the current Mode.
 * @param ${p0} The name of the Mode to set as current.
 * @return NULL if the mode is not present in the list but do not change the _current.
 */"
      end

      operation 216450 "get_current"
	const public return_type class_ref 138754 // Mode
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the current Mode
 * @return A pointer on the current Mode.
 */"
      end

      operation 216578 "current"
	public return_type class_ref 138754 // Mode
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get the current sample
 * @return A pointer on the current sample.
 */"
      end

      operation 216706 "get_names"
	const public explicit_return_type "vector<string>"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Return the names of all samples.
 */
"
      end

      operation 216834 "size"
	const public explicit_return_type "uint"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
      end

      operation 216962 "operator[]"
	public return_type class_ref 138754 // Mode
	nparams 1
	  param in name "name" type class_ref 129026 // string
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} * ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @return the Mode * named
 * @param ${p0} The name of the Mode we are looking for in the ${class}.
 * @return The mode or NULL if the mode is not present in the ${class}.
 */"
      end

      operation 217090 "begin"
	public explicit_return_type "ModeList::iterator"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get an iterator on the first element of ReflectionList.
 * @return The iterator.
 */
"
      end

      operation 217218 "end"
	public explicit_return_type "ModeList::iterator"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get an iterator on the end of ReflectionList.
 * @return The iterator.
 */
"
      end

      operation 217346 "begin"
	const public explicit_return_type "ModeList::const_iterator"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get an iterator on the first element of ReflectionList.
 * @return The iterator.
 */
"
      end

      operation 217474 "end"
	const public explicit_return_type "ModeList::const_iterator"
	nparams 0
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Get an iterator on the end of ReflectionList.
 * @return The iterator.
 */
"
      end

      operation 217602 "operator=="
	const public explicit_return_type "bool"
	nparams 1
	  param in name "modeList" type class_ref 139138 // ModeList
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * \\brief Are two ${class} equals ?
 * \\param ${p0} the ${t0} to compare with.
 * \\return true if both are equals flase otherwise.
 */"
      end

      operation 217730 "printToStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief print the ${class} into a flux
 * @param ${p0} The stream to print into.
 * @return The modified flux.
 */"
      end

      operation 217858 "toStream"
	const public explicit_return_type "ostream"
	nparams 1
	  param inout name "flux" explicit_type "ostream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief print on a stream the content of the ${class}
 * @param flux the ostream to modify.
 * @return the modified ostream
 */"
      end

      operation 217986 "fromStream"
	public explicit_return_type "istream"
	nparams 1
	  param inout name "flux" explicit_type "istream"
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief restore the content of the ${class} from an istream
 * @param flux the istream.
 * @return the modified istream.
 * @todo problem of security here.
 */"
      end
    end

    class 138882 "ModeTemp"nformals 1
      formal name "T" type "class" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${description}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 147458 // <generalisation>
	relation 147074 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 147458 // <generalisation>
	  b parent class_ref 138754 // Mode
      end

      operation 214786 "ModeTemp"
	protected explicit_return_type ""
	nparams 3
	  param in name "name" type class_ref 129026 // string
	  param in name "description" type class_ref 129026 // string
	  param inout name "geometry" explicit_type "T"
	cpp_decl "    ${description}${inline}${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} & ${p2}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} & ${p2}${)}${volatile}${throw} :
  Mode(name, description),
  _geometry(geometry) 
{
  ${body}}
"
	
	
	comment "/**
 * @brief Default constructor - protected to make sure this class is abstract.
 * @param ${p0} The name of the ModeTemp.
 * @param ${p1} The description of the ModeTemp.
 * @param ${p2} the Geometry use to do calculation.
 */
"
      end

      operation 214914 "~ModeTemp"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${description}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${description}${inline}${class}::${name}${(}${)}${volatile}${throw} 
{
  ${body}}
"
	
	
      end

      attribute 142338 "_geometry"
	protected explicit_type "T"
	cpp_decl "    ${description}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	java_decl ""
	idl_decl ""
      end

      class 139010 "value_type"
	visibility public stereotype "typedef"
	 explicit_base_type "T"
	cpp_decl "${description}typedef ${type} ${name};
"
	java_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      operation 215042 "_parametersAreOk"
	const protected explicit_return_type "bool"
	nparams 4
	  param in name "h" type class_ref 128060 // Value
	  param in name "k" type class_ref 128060 // Value
	  param in name "l" type class_ref 128060 // Value
	  param in name "UB" type class_ref 128514 // smatrix
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Check if the parameter are ok to compute the geometry configuration.
 * 
 * @param ${p0} 
 * @param ${p1} 
 * @param ${p2} 
 * @param ${p3} 
 * @throw HKLException if one of the parameters is wrong.
 * @return true if parameters are ok, false otherwise.
 */
"
      end

      operation 215170 "_computeThetaAndHphi"
	const protected explicit_return_type "void"
	nparams 6
	  param in name "h" type class_ref 128060 // Value
	  param in name "k" type class_ref 128060 // Value
	  param in name "l" type class_ref 128060 // Value
	  param in name "UB" type class_ref 128514 // smatrix
	  param out name "theta" explicit_type "double"
	  param out name "hphi" type class_ref 128002 // svector
	nexceptions 1
	  exception class_ref 128182 // HKLException
	cpp_decl "    ${description}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}, ${t4} & ${p4}, ${t5} & ${p5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${description}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}, ${t4} & ${p4}, ${t5} & ${p5}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}}
"
	
	
	comment "/**
 * @brief Compute theta correspondig to thoses parameters.
 * 
 * @param ${p0} The first coordinate of the hkl vector.
 * @param ${p1} the second coordinate of the hkl vector.
 * @param ${p2} the third coordinate of the hkl vector.
 * @param ${p3} The UB matrix.
 * @param[out] ${p4} the scattering reflection angle. 
 * @param[out] ${p5} the hkl vector in the sample holder coordinates.
 * @throw HKLException if the reflection is unreachable
 */
"
      end
    end
  end

  deploymentview 128060 "Deployment hkl"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default
    artifact 129410 "axe"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}

/**
 * \\brief Overload of the << operator for the Axe class
 */
inline ostream &
operator<<(ostream & flux, hkl::Axe const & axe)
{
  return axe.printToStream(flux);
}
#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}"
      idl_src "#ifndef _${NAME}_H
#define _${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_classes
	class_ref 130050 // Axe
	class_ref 130818 // AxeList
	class_ref 130690 // AxeMap
      end
    end

    artifact 128258 "constant"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 128130 // constant
      end
    end

    artifact 128642 "convenience"
      stereotype "source"
      cpp_h "#ifndef _CONVENIENCE_H
#define _CONVENIENCE_H

#include <HKLException.h>

namespace hkl
  {
  namespace convenience
    {

    /**
     * @brief return the right angle in between[_pi,pi]
     * @param angle The angle to normalize.
     * @return The angle.
     */
    double normalizeAngle(double angle);

    /*!
     * \\brief Compute the atan2 function.
     * \\param s The y coordinate of the point P in the xOy plan.
     * \\param c The x coordinate of the point P in the xOy plan.
     * \\return the angle between Ox and OP.
     */
    double atan2(double s, double c);

    /*!
     * Compute the asin function.
     * \\param s The sinus of the angle.
     * \\throw HKLException if \\f$ /abs(s) > 1\\f$.
     * \\return The asinus of the angle.
     */
    double asin(double s) throw (HKLException);

  } // namespace convenience
} // namespace hkl

#endif //_CONVENIENCE_H
"
      cpp_src "#include \"portability.h\"

#include <cmath>

#include \"constant.h\"
#include \"convenience.h\"

namespace hkl
  {
  namespace convenience
    {

    double
    normalizeAngle(double angle)
    {
      double res = ::atan2(::sin(angle), ::cos(angle));
      if (fabs(res - constant::math::pi) < constant::math::epsilon
          && angle < 0)
        res = -res;

      return res;
    }

    double
    atan2(double s, double c)
    {
      double angle;

      if (fabs(s) < constant::math::epsilon) s = 0.;
      if (fabs(c) < constant::math::epsilon) c = 0.;
      angle = ::atan2(s, c);
      if (fabs(angle) < constant::math::epsilon) angle = 0.;
      return angle;
    }

    double
    asin(double s) throw (HKLException)
    {
      double angle;
      if (fabs(s) - 1. > constant::math::epsilon)
        HKLEXCEPTION(\"sinus bigger than 1.\", \"\");
      else
        angle = ::asin(s);

      if (fabs(angle) < constant::math::epsilon) angle = 0.;

      return angle;
    }

  } // namespace convenience
} // namespace hkl
"
      associated_classes
      end
    end

    artifact 129538 "fitparameter"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}

/*!
 * \\brief Overload of the << operator for the FitParameter class
 * \\param flux
 * \\param fitParameter
 * \\return The flux modified.
 */
inline ostream &
operator<<(ostream & flux, hkl::FitParameter const & fitParameter)
{
  return fitParameter.printToStream(flux);
}

#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 130178 // FitParameter
      end
    end

    artifact 130050 "fitparameterlist"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
#include \"fitparameter.h\"
${declarations}
${namespace_start}
${definition}
${namespace_end}
/*!
 * @brief Overload of the << operator for the %FitParameterList class
 * @param flux
 * @param fitParameterList
 * @return the modified flux.
 */
ostream & operator<<(ostream & flux, hkl::FitParameterList const & fitParameterList);
#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 131330 // FitParameterList
      end
    end

    artifact 130434 "geometry"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}

/*!
 * \\brief Surcharge de l'operateur << pour la class Geometry
 * \\param flux 
 * \\param geometry
 *
 * This function use the printToStream virtual function to print on screen
 * or in an ostream. Because the operator<< can not be declare as virtual
 * we need to use this hake to virtualize not the operator<< but the function
 * called by it printToStream
 */
ostream & operator<<(ostream & flux, hkl::Geometry const & geometry);
#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}

/*!
 * \\brief Surcharge de l'operateur << pour la class Geometry
 * \\param flux 
 * \\param geometry
 *
 * This function use the printToStream virtual function to print on screen
 * or in an ostream. Because the operator<< can not be declare as virtual
 * we need to use this hake to virtualize not the operator<< but the function
 * called by it printToStream
 */
ostream & operator<<(ostream & flux, hkl::Geometry const & geometry)
{
  return geometry.printToStream(flux);
}
"
      associated_classes
	class_ref 131714 // Geometry
      end
    end

    artifact 128182 "HKLException"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
#include <sstream>

#define HKLEXCEPTION(a,b)  do {\\
    std::ostringstream location;\\
    location << __FILE__ << \" line : \" << __LINE__;\\
    throw HKLException((a),(b),location.str());\\
} while(0)

${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}"
      idl_src "#ifndef _${NAME}_H
#define _${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_classes
	class_ref 128438 // ErrorSeverity
	class_ref 128310 // Error
	class_ref 128211 // ErrorList
	class_ref 128182 // HKLException
      end
    end

    artifact 129922 "hklobject"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
/*!
 * @brief Overload of the << operator for the HKLObject class
 * @param flux
 * @param hklObject
 * @return the modified flux.
 */
inline ostream &
operator << (ostream & flux, hkl::HKLObject const & hklObject)
{
  return hklObject.printToStream(flux);
}

#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 131202 // HKLObject
      end
    end

    artifact 130306 "lattice"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
#include \"fitparameter.h\"
#include \"value.h\"
${declarations}
${namespace_start}
${definition}
${namespace_end}
/**
 * @brief Surcharge de l'operateur << pour la class Lattice
 * @param flux The ostream to print into.
 * @param lattice The Lattice to print 
 * @return 
 */
inline ostream &
operator << (ostream & flux, hkl::Lattice const & lattice)
{
  return lattice.printToStream(flux);
}
#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 131586 // Lattice
      end
    end

    artifact 129666 "mymap"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      associated_classes
	class_ref 130306 // MyMap
      end
    end

    artifact 128770 "mystring"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      idl_src "#ifndef _${NAME}_H
#define _${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_classes
	class_ref 128898 // MyString
      end
    end

    artifact 128898 "object"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
/**
 * \\brief Surcharge de l'operateur << pour la class BaseObject
 * @param flux 
 * @param m 
 * @return 
 */
inline std::ostream & operator << (std::ostream & flux, hkl::ObjectBase const & object)
{
  return object.printToStream(flux);
}
#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 129154 // ObjectBase
	class_ref 129282 // ObjectReadOnly
	class_ref 129410 // Object
      end
    end

    artifact 129026 "observer"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 129538 // Observer
	class_ref 129666 // Observable
      end
    end

    artifact 129282 "parameter"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}

/*!
 * \\brief Overload of the << operator for the Parameter class
 * \\param flux The ostream to modify.
 * \\param parameter The Parameter to print.
 * \\return the modified ostream 
 */
inline ostream &
operator<<(ostream & flux, hkl::Parameter const & parameter)
{
  return parameter.printToStream(flux);
}
#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 129922 // Parameter
      end
    end

    artifact 129794 "parameterlist"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
#include \"parameter.h\"
${declarations}
${namespace_start}
${definition}
${namespace_end}
/*!
 * @brief Overload of the << operator for the %ParameterList class
 * @param flux
 * @param parameterList
 * @return the modified flux.
 */
inline ostream &
operator<<(ostream & flux, hkl::ParameterList const & parameterList)
{
  return parameterList.printToStream(flux);
}

#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 131074 // ParameterList
      end
    end

    artifact 130562 "portability"
      stereotype "source"
      cpp_h "#define HKL_MAJOR 2
#define HKL_MINOR 3
#define HKL_PATCH 0

#define HKL_VERSION (HKL_MAJOR * 10000 + HKL_MINOR * 100 + HKL_PATCH)
"
      associated_classes
      end
    end

    artifact 132610 "pseudoaxe"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
/*!
 * \\brief Overload of the << operator for the PseudoAxe class
 */
inline ostream &
operator<<(ostream & flux, hkl::PseudoAxe const & pseudoAxe)
{
  return pseudoAxe.printToStream(flux);
}
#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 134786 // PseudoAxe
      end
    end

    artifact 132738 "pseudoaxeengine"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
/*!
 * \\brief Overload of the << operator for the PseudoAxe class
 */
template<typename T>
inline ostream &
operator<<(ostream & flux, hkl::PseudoAxeEngineTemp<T> const & pseudoAxeEngine)
{
  return pseudoAxeEngine.printToStream(flux);
}

#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 134914 // PseudoAxeEngine
	class_ref 135170 // PseudoAxeEngineTemp
      end
    end

    artifact 132866 "pseudoaxeenginelist"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}

inline std::ostream &
operator <<(std::ostream & flux, hkl::PseudoAxeEngineList const & pseudoAxeEngineList)
{
  return pseudoAxeEngineList.printToStream(flux);
}

#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 135426 // PseudoAxeEngineList
      end
    end

    artifact 132994 "pseudoaxelist"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}"
      idl_src "#ifndef _${NAME}_H
#define _${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_classes
	class_ref 135042 // PseudoAxeList
      end
    end

    artifact 128386 "quaternion"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
#include \"convenience.h\"
${declarations}
${namespace_start}
${definition}
${namespace_end}

/**
 * \\brief Surcharge de l'operateur << pour la class Quaternion
 * @param flux 
 * @param m 
 * @return 
 */
inline std::ostream & operator << (std::ostream & flux, hkl::Quaternion const & q)
{
  return q.printToStream(flux);
}
#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 128770 // Quaternion
      end
    end

    artifact 129154 "range"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}

/*!
 * \\brief Overload of the << operator for the Range clas
 * \\param flux The ostream to modify.
 * \\param range The range to print.
 * 
 * \\return the modified ostream 
 */
inline ostream &
operator<<(ostream & flux, hkl::Range const & range)
{
  return range.printToStream(flux);
}

inline hkl::Range cos(hkl::Range const & range)
{
  hkl::Range res;

  double min = range.get_min().get_value();
  double current = range.get_current().get_value();
  double max = range.get_max().get_value();

  if (max - min >= 2 * hkl::constant::math::pi)
    res.set(-1, cos(current), 1);
  else
    {
      int quad_min = (int)floor(2 * min / hkl::constant::math::pi) % 4;
      if (quad_min < 0)
        quad_min += 4;

      int quad_max = (int)floor(2 * max / hkl::constant::math::pi) % 4;
      if (quad_max < 0)
        quad_max += 4;

      //cout << \"quadrant : \" << quad_min << \", \" << quad_max << endl;
      switch (quad_max)
        {
        case 0:
          switch (quad_min)
            {
            case 0:
              res.set(cos(max), cos(current), cos(min));
              break;
            case 1:
              res.set(-1, cos(current), 1);
              break;
            case 2:
              res.set(cos(min), cos(current), 1);
              break;
            case 3:
              if (cos(min) < cos(max))
                res.set(cos(min), cos(current), 1);
              else
                res.set(cos(max), cos(current), 1);
              break;
            }
          break;
        case 1:
          switch (quad_min)
            {
            case 0:
            case 1:
              res.set(cos(max), cos(current), cos(min));
              break;
            case 2:
              if (cos(min) < cos(max))
                res.set(cos(min), cos(current), 1);
              else
                res.set(cos(max), cos(current), 1);
              break;
            case 3:
              res.set(cos(max), cos(current), 1);
              break;
            }
          break;
        case 2:
          switch (quad_min)
            {
            case 0:
              res.set(-1, cos(current), cos(min));
              break;
            case 1:
              if (cos(min) < cos(max))
                res.set(-1, cos(current), cos(max));
              else
                res.set(-1, cos(current), cos(min));
              break;
            case 2:
              res.set(cos(min), cos(current), cos(max));
              break;
            case 3:
              res.set(-1, cos(current), 1);
              break;
            }
          break;
        case 3:
          switch (quad_min)
            {
            case 0:
              if (cos(min) < cos(max))
                res.set(-1, cos(current), cos(max));
              else
                res.set(-1, cos(current), cos(min));
              break;
            case 1:
              res.set(-1, cos(current), cos(max));
              break;
            case 2:
            case 3:
              res.set(cos(min), cos(current), cos(max));
              break;
            }
          break;
        }
    }
  //cout << \"cos   : \" << res << endl;
  return res;
}

inline hkl::Range acos(hkl::Range const & range)
{
  double min = acos(range.get_max().get_value());
  double current = acos(range.get_current().get_value());
  double max = acos(range.get_min().get_value());

  return hkl::Range(min, current, max);
}
#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 129794 // Range
      end
    end

    artifact 131586 "reflection"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
/**
 * @brief Surcharge de l'operateur << pour la class reflection
 * @param flux The flux to print into
 * @param reflection The Reflection to print.
 */
inline std::ostream &
operator << (std::ostream & flux, hkl::Reflection const & reflection)
{
  return reflection.printToStream(flux);
}
#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 133250 // ReflectionType
	class_ref 133122 // Reflection
      end
    end

    artifact 131714 "reflectionfactory"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${description}
${includes}
#include \"reflection_monocrystal.h\"
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 133506 // ReflectionFactory
      end
    end

    artifact 131842 "reflectionlist"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}

inline std::ostream &
operator<<(std::ostream & flux, hkl::ReflectionList const & factory)
{
  return factory.printToStream(flux);
}

#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 133634 // ReflectionList
      end
    end

    artifact 128130 "svector"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
#include <math.h>
#include <cstdlib>
#include <iomanip>
#include \"HKLException.h\"
#include \"constant.h\"

${declarations}
${namespace_start}

//forward declaration
class smatrix;

${definition}
${namespace_end}

/**
 * \\brief Surcharge de l'operateur << pour la class svector
 * @param flux 
 * @param m 
 * @return 
 */
std::ostream & operator << (std::ostream & flux, hkl::svector const & v);

/**
 * \\brief Surcharge de l'operateur << pour la class smatrix
 * @param flux 
 * @param m 
 * @return 
 */
std::ostream & operator << (std::ostream & flux, hkl::smatrix const & m);

#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}

/**
 * \\brief Surcharge de l'operateur << pour la class svector
 * @param flux 
 * @param m 
 * @return 
 */
std::ostream & operator << (std::ostream & flux, hkl::svector const & v)
{
  return v.printToStream(flux);
}

/**
 * \\brief Surcharge de l'operateur << pour la class smatrix
 * @param flux 
 * @param m 
 * @return 
 */
std::ostream & operator << (std::ostream & flux, hkl::smatrix const & m)
{
  return m.printToStream(flux);
}

"
      associated_classes
	class_ref 128002 // svector
	class_ref 128514 // smatrix
      end
    end

    artifact 128060 "value"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
#include <cmath>
#include <iomanip>
#include \"constant.h\"
${declarations}
${namespace_start}
${definition}
${namespace_end}

/**
 * \\brief Surcharge de l'operateur << pour la class Value
 * @param flux 
 * @param m 
 * @return 
 */
inline std::ostream & operator << (std::ostream & flux, hkl::Value const & value)
{
  return value.printToStream(flux);
}

inline hkl::Value
fabs(hkl::Value const & value)
{
  hkl::Value res(fabs(value.get_value()));
  return res;
}

inline hkl::Value
cos(hkl::Value const & value)
{
  hkl::Value res(cos(value.get_value()));
  return res;
}

inline double
operator/(double d, hkl::Value const & value)
{
  return d / value.get_value();
}

inline double
operator*(double d, hkl::Value const & value)
{
  return d * value.get_value();
}
#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      idl_src "#ifndef _${NAME}_H
#define _${NAME}_H

${comment}
${includes}
${module_start}
${definition}
${module_end}
#endif
"
      associated_classes
	class_ref 128060 // Value
      end
    end

    artifact 130178 "source"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
#include \"value.h\"
#include \"svector.h\"
#include \"quaternion.h\"
${declarations}
${namespace_start}
${definition}
${namespace_end}
/**
 * @brief Surcharge de l'operateur << pour la class Source
 * @param flux The ostream to print into.
 * @param source The Source to print. 
 * @return the modified flux.
 */
inline ostream &
operator << (ostream & flux, hkl::Source const & source)
{
  return source.printToStream(flux);
}
#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 131458 // Source
      end
    end

    artifact 132098 "sample"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
#include \"reflectionlist.h\"
${declarations}
${namespace_start}
${definition}
${namespace_end}
/**
 * @brief Surcharge de l'operateur << pour la class cristal
 * @param flux The ostream to print into.
 * @param sample The Sample to print 
 * @return 
 */
inline std::ostream &
operator << (std::ostream & flux, hkl::Sample const & sample)
{
  return sample.printToStream(flux);
}

#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 134018 // SampleType
	class_ref 133378 // Sample
      end
    end

    artifact 132354 "samplefactory"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${description}
${includes}
#include \"sample_monocrystal.h\"
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 134274 // SampleFactory
      end
    end

    artifact 132482 "samplelist"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}

inline std::ostream &
operator <<(std::ostream & flux, hkl::SampleList const & sampleList)
{
  return sampleList.printToStream(flux);
}
#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 134402 // SampleList
      end
    end

    artifact 133890 "mode"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
#include \"convenience.h\"
${declarations}
${namespace_start}
${definition}
${namespace_end}

/*!
 * \\brief Surcharge de l'operateur << for the Mode class
 * \\param flux The flux to modifie 
 * \\param mode The mode to stream.
 * \\return The modified flux.
 */
template<typename T>
std::ostream &
operator << (std::ostream & flux, hkl::ModeTemp<T> const & mode)
{
  return mode.printToStream(flux);
};

#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 138754 // Mode
	class_ref 138882 // ModeTemp
      end
    end

    artifact 134018 "modelist"
      stereotype "source"
      cpp_h "#ifndef _${NAME}_H
#define _${NAME}_H

${description}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
inline std::ostream &
operator <<(std::ostream & flux, hkl::ModeList const & modeList)
{
  return modeList.printToStream(flux);
}

#endif
"
      cpp_src "${description}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 139138 // ModeList
      end
    end
  end

  package_ref 128002 // geometry

  package_ref 128514 // reflection

  package_ref 128642 // sample

  package_ref 128770 // pseudoAxeEngine

  package_ref 129922 // mode
end
