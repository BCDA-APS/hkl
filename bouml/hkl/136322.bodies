class Q2th
!!!205186.cpp!!!	Q2th(inout geometry : Geometry)

    // add all the PseudoAxes
    _q2th = new PseudoAxe( "q2th", "domega = 1/2 * d2theta.", this);
    _pseudoAxes.push_back(_q2th);

    // add observer to observable
    _omega->add_observer(this);
    _tth->add_observer(this);

    //fill the relatedAxes
    _relatedAxes.push_back(_omega);
    _relatedAxes.push_back(_tth);

    this->connect();
    Q2th::update();
!!!205314.cpp!!!	~Q2th()
      delete _q2th;
!!!205442.cpp!!!	initialize() : void
      _omega0 = _omega->get_current().get_value();
      _tth0 = _tth->get_current().get_value();
      _initialized = true;
      Q2th::update();
!!!205570.cpp!!!	update() : void
      if (_connected)
        {
          double lambda = _geometry.get_source().get_waveLength().get_value();

          // now compute the [min, max] range of the PseudoAxe.
          double omega_min = _omega->get_min().get_value();
          double omega_max = _omega->get_max().get_value();

          double min = _tth->get_min().get_value();
          if ((_omega0 - omega_min) < (_tth0 - min) / 2.)
              min = _tth0 + (omega_min - _omega0) * 2.;
          min = 2 * constant::physic::tau * sin(min/2.) / lambda;

          double max = _tth->get_max().get_value();
          if ((omega_max - _omega0) < (max - _tth0) / 2.)
              max = _tth0 + (omega_max - _omega0) * 2.;
          max = 2 * constant::physic::tau * sin(max/2.) / lambda;

          // compute the new current value
          double const & theta = _tth->get_current().get_value() / 2.;
          double const & theta_c = _tth->get_consign().get_value() / 2.;
          double current = 2 * constant::physic::tau * sin(theta) / lambda;
          double consign = 2 * constant::physic::tau * sin(theta_c) / lambda;
          this->set_pseudoAxe(_q2th, min, current, consign, max);

          // update the writability
          double const & omega_c = _omega->get_consign().get_value();
          if (_initialized && fabs(omega_c - _omega0 - (theta_c - _tth0 / 2.)) < constant::math::epsilon)
              _writable = true;
          else
              _writable = false;
        }
!!!205698.cpp!!!	set() : void
    double lambda = _geometry.get_source().get_waveLength().get_value();

    double tth = 2 * asin(_q2th->get_consign().get_value() * lambda / (2 * constant::physic::tau));
    double omega = _omega0 + (tth - _tth0) / 2.;

    Q2th::unconnect();
    _omega->set_consign(omega);
    _tth->set_consign(tth);
    Q2th::connect();
    Q2th::update();
!!!205826.cpp!!!	toStream(inout flux : ostream) : ostream
      PseudoAxeEngineTemp<hkl::twoC::vertical::Geometry>::toStream(flux);
      flux << " " << _omega0;
      flux << " " << _tth0;
      
      return flux;
!!!205954.cpp!!!	fromStream(inout flux : istream) : istream
      PseudoAxeEngineTemp<hkl::twoC::vertical::Geometry>::fromStream(flux);
      flux >> _omega0 >> _tth0;
      
      return flux;
