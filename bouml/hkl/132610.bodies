class Geometry
!!!175234.cpp!!!	Geometry()
      _source.setDirection(svector(1,0,0));
      
      _komega = addSampleAxe(Axe("komega", "1st sample axe", -constant::math::pi, 0, constant::math::pi, svector(0., 1., 0.), -1));
      _kappa = addSampleAxe(Axe("kappa", "2nd sample axe", -constant::math::pi, 0, constant::math::pi, svector(0., cos(_alpha), sin(_alpha)), -1));
      _kphi = addSampleAxe(Axe("kphi", "3rd sample axe", -constant::math::pi, 0, constant::math::pi, svector(0., 1., 0.), -1));
      _tth = addDetectorAxe(Axe("2theta", "1st detector axe", -constant::math::pi, 0, constant::math::pi, svector(0., 1., 0.), -1));
!!!175362.cpp!!!	Geometry(in komega : double, in kappa : double, in kphi : double, in tth : double)
      _source.setDirection(svector(1,0,0));
      
      _komega = addSampleAxe(Axe("komega", "1st sample axe", -constant::math::pi, komega, constant::math::pi, svector(0., 1., 0.), -1));
      _kappa = addSampleAxe(Axe("kappa", "2nd sample axe", -constant::math::pi, kappa, constant::math::pi, svector(0., cos(_alpha), sin(_alpha)), -1));
      _kphi = addSampleAxe(Axe("kphi", "3rd sample axe", -constant::math::pi, kphi, constant::math::pi, svector(0., 1., 0.), -1));
      _tth = addDetectorAxe(Axe("2theta", "1st detector axe", -constant::math::pi, tth, constant::math::pi, svector(0., 1., 0.), -1));
!!!175490.cpp!!!	Geometry(in geometry : Geometry)
      _komega = &(_axes["komega"]);
      _kappa = &(_axes["kappa"]);
      _kphi = &(_axes["kphi"]);
      _tth = &(_axes["2theta"]);
!!!175746.cpp!!!	komega() : Rotation
      return _komega;
!!!175874.cpp!!!	kappa() : Rotation
      return _kappa;
!!!176002.cpp!!!	kphi() : Rotation
      return _kphi;
!!!176130.cpp!!!	tth() : Rotation
      return _tth;
!!!176258.cpp!!!	komega() : Rotation
      return _komega;
!!!176386.cpp!!!	kappa() : Rotation
      return _kappa;
!!!176514.cpp!!!	kphi() : Rotation
      return _kphi;
!!!176642.cpp!!!	tth() : Rotation
      return _tth;
!!!176770.cpp!!!	setAngles(in komega : double, in kappa : double, in kphi : double, in tth : double) : void
      _komega->set_current(komega);
      _kappa->set_current(kappa);
      _kphi->set_current(kphi);
      _tth->set_current(tth);
!!!176898.cpp!!!	setFromGeometry(in geometry : Geometry, in strict : bool) : void
      // update the source
      _source = geometry.get_source();
      
      if (strict)
        {
          _kappa->set_current(0);
          _kphi->set_current(0);
        }
      _komega->set_current(geometry.omega()->get_current().get_value());
      _tth->set_current(geometry.tth()->get_current().get_value());
!!!177026.cpp!!!	setFromGeometry(in geometry : Geometry, in strict : bool) : void
      // update the source
      _source = geometry.get_source();
      
      double const & chi = geometry.chi()->get_current().get_value();
      if (fabs(chi) <= 2 * _alpha)
        {
          double const & omega = geometry.omega()->get_current().get_value();
          double const & phi = geometry.phi()->get_current().get_value();
          double p = asin(tan(chi/2.)/tan(_alpha));
      
          _komega->set_current(omega + p - constant::math::pi/2.);
          _kappa->set_current(-2 * asin(sin(chi/2.)/sin(_alpha)));
          _kphi->set_current(phi + p + constant::math::pi/2.);
          _tth->set_current(geometry.tth()->get_current());
        }
      else
        {
          ostringstream description;
          description << "The current E4CV \"chi\" axe (" << chi * constant::math::radToDeg << "°) must be lower than 2*alpha (" << 2*_alpha*constant::math::radToDeg << "°)";
          HKLEXCEPTION("Can not convert geometry E4CV -> K4CV",
                       description.str());
        }
!!!177154.cpp!!!	setFromGeometry(in geometry : Geometry, in strict : bool) : void
      // update the source
      _source = geometry.get_source();
      
      double const & mu = geometry.mu()->get_current().get_value();
      double const & gamma = geometry.gamma()->get_current().get_value();
      if ((!mu && !gamma) || !strict)
        {
          double const & chi = geometry.chi()->get_current().get_value();
          if (fabs(chi) <= 2 * _alpha)
            {
              double const & omega = geometry.omega()->get_current().get_value();
              double const & phi = geometry.phi()->get_current().get_value();
              double p = asin(tan(chi/2.)/tan(_alpha));
      
              _komega->set_current(omega + p - constant::math::pi/2.);
              _kappa->set_current(-2 * asin(sin(chi/2.)/sin(_alpha)));
              _kphi->set_current(phi + p + constant::math::pi/2.);
              _tth->set_current(geometry.delta()->get_current());
            }
          else
            {
              ostringstream description;
              description << "The current E6C \"chi\" axe (" << chi * constant::math::radToDeg << "°) must be lower than 2*alpha (" << 2*_alpha*constant::math::radToDeg << "°)";
              HKLEXCEPTION("Can not convert geometry E6C -> K4CV",
                           description.str());
            }
        }
      else
        {
          ostringstream description;
          if (mu && gamma)
            {
              description << "the current E6C \"mu\" (" << mu * constant::math::radToDeg << "°) and \"gamma\" (" << gamma * constant::math::radToDeg << "°) axes must be set to zero";
            }
          else if (mu)
            {
              description << "the current E6C \"mu\" (" << mu * constant::math::radToDeg << "°) must be set to zero";
            }
          else if (gamma)
            {
              description << "the current E6C \"gamma\" (" << gamma * constant::math::radToDeg << "°) must be set to zero";
            }
          HKLEXCEPTION("Can not convert geometry E6C -> K4CV",
                       description.str());
        }
!!!177282.cpp!!!	setFromGeometry(in geometry : Geometry, in strict : bool) : void
      // update the source
      _source = geometry.get_source();
      
      double const & mu = geometry.mu()->get_current().get_value();
      double const & gamma = geometry.gamma()->get_current().get_value();
      if ((!mu && !gamma) || !strict)
        {
          _komega->set_current(geometry.komega()->get_current().get_value());
          _kappa->set_current(geometry.kappa()->get_current().get_value());
          _kphi->set_current(geometry.kphi()->get_current().get_value());
          _tth->set_current(geometry.delta()->get_current().get_value());
        }
      else
        {
          ostringstream description;
          if (mu && gamma)
            {
              description << "the current K6C \"mu\" (" << mu * constant::math::radToDeg << "°) and \"gamma\" (" << gamma * constant::math::radToDeg << "°) axes must be set to zero";
            }
          else if (mu)
            {
              description << "the current K6C \"mu\" (" << mu * constant::math::radToDeg << "°) must be set to zero";
            }
          else if (gamma)
            {
              description << "the current K6C \"gamma\" (" << gamma * constant::math::radToDeg << "°) must be set to zero";
            }
          HKLEXCEPTION("Can not convert geometry K6C -> K4CV",
                       description.str());
        }
