class Geometry
!!!175234.cpp!!!	Geometry(in alpha : double)
    _source.setDirection(svector(1,0,0));

    // add the sample holder
    hkl::Holder * holder = _holders.add();
    _komega = holder->add_rotation("komega", svector(0., -1., 0.));
    _kappa = holder->add_rotation("kappa", svector(0., -cos(_alpha), -sin(_alpha)));
    _kphi = holder->add_rotation("kphi", svector(0., -1., 0.));

    // add the detector holder
    holder = _holders.add();
    _tth = holder->add_rotation("tth", svector(0., -1., 0.));
!!!175362.cpp!!!	Geometry(in alpha : double, in komega : double, in kappa : double, in kphi : double, in tth : double)
    _source.setDirection(svector(1,0,0));

    // add the sample holder
    hkl::Holder * holder = _holders.add();
    _komega = holder->add_rotation("komega", svector(0., -1., 0.));
    _kappa = holder->add_rotation("kappa", svector(0., -cos(_alpha), -sin(_alpha)));
    _kphi = holder->add_rotation("kphi", svector(0., -1., 0.));

    // add the detector holder
    holder = _holders.add();
    _tth = holder->add_rotation("tth", svector(0., -1., 0.));

    _komega->set_current(komega);
    _kappa->set_current(kappa);
    _kphi->set_current(kphi);
    _tth->set_current(tth);
!!!175490.cpp!!!	Geometry(in geometry : Geometry)
    _komega = static_cast<hkl::axe::Rotation *>(_holders.axes()["komega"]);
    _kappa = static_cast<hkl::axe::Rotation *>(_holders.axes()["kappa"]);
    _kphi = static_cast<hkl::axe::Rotation *>(_holders.axes()["kphi"]);
    _tth = static_cast<hkl::axe::Rotation *>(_holders.axes()["tth"]);
!!!175746.cpp!!!	komega() : Rotation
      return _komega;
!!!175874.cpp!!!	kappa() : Rotation
      return _kappa;
!!!176002.cpp!!!	kphi() : Rotation
      return _kphi;
!!!176130.cpp!!!	tth() : Rotation
      return _tth;
!!!176258.cpp!!!	komega() : Rotation
      return _komega;
!!!176386.cpp!!!	kappa() : Rotation
      return _kappa;
!!!176514.cpp!!!	kphi() : Rotation
      return _kphi;
!!!176642.cpp!!!	tth() : Rotation
      return _tth;
!!!176770.cpp!!!	setAngles(in komega : double, in kappa : double, in kphi : double, in tth : double) : void
      _komega->set_current(komega);
      _kappa->set_current(kappa);
      _kphi->set_current(kphi);
      _tth->set_current(tth);
!!!176898.cpp!!!	setFromGeometry(in geometry : Geometry, in strict : bool) : void
      // update the source
      _source = geometry.get_source();
      
      if (strict)
        {
          _kappa->set_current(0);
          _kphi->set_current(0);
        }
      _komega->set_current(geometry.omega()->get_current().get_value());
      _tth->set_current(geometry.tth()->get_current().get_value());
!!!177026.cpp!!!	setFromGeometry(in geometry : Geometry, in strict : bool) : void
  // update the source
    _source = geometry.get_source();

    double const & omega = geometry.omega()->get_current().get_value();
    double const & chi = geometry.chi()->get_current().get_value();
    double const & phi = geometry.phi()->get_current().get_value();
    double komega, kappa, kphi;
    hkl::eulerian_to_kappa(omega, chi, phi, _alpha, komega, kappa, kphi);

    _komega->set_current(komega);
    _kappa->set_current(kappa);
    _kphi->set_current(kphi);
    _tth->set_current(geometry.tth()->get_current());
!!!177154.cpp!!!	setFromGeometry(in geometry : Geometry, in strict : bool) : void
      // update the source
      _source = geometry.get_source();
      
      double const & mu = geometry.mu()->get_current().get_value();
      double const & gamma = geometry.gamma()->get_current().get_value();
      if ((!mu && !gamma) || !strict)
        {
          double const & omega = geometry.omega()->get_current().get_value();
          double const & chi = geometry.chi()->get_current().get_value();
          double const & phi = geometry.phi()->get_current().get_value();
          double komega, kappa, kphi;
          hkl::eulerian_to_kappa(omega, chi, phi, _alpha, komega, kappa, kphi);

          _komega->set_current(komega);
          _kappa->set_current(kappa);
          _kphi->set_current(kphi);
          _tth->set_current(geometry.delta()->get_current());
        }
      else
        {
          ostringstream description;
          if (mu && gamma)
            {
              description << "the current E6C \"mu\" (" << mu * constant::math::radToDeg << "°) and \"gamma\" (" << gamma * constant::math::radToDeg << "°) axes must be set to zero";
            }
          else if (mu)
            {
              description << "the current E6C \"mu\" (" << mu * constant::math::radToDeg << "°) must be set to zero";
            }
          else if (gamma)
            {
              description << "the current E6C \"gamma\" (" << gamma * constant::math::radToDeg << "°) must be set to zero";
            }
          HKLEXCEPTION("Can not convert geometry E6C -> K4CV",
                       description.str());
        }
!!!177282.cpp!!!	setFromGeometry(in geometry : Geometry, in strict : bool) : void
      // update the source
      _source = geometry.get_source();
      
      double const & mu = geometry.mu()->get_current().get_value();
      double const & gamma = geometry.gamma()->get_current().get_value();
      if ((!mu && !gamma) || !strict)
        {
          _komega->set_current(geometry.komega()->get_current().get_value());
          _kappa->set_current(geometry.kappa()->get_current().get_value());
          _kphi->set_current(geometry.kphi()->get_current().get_value());
          _tth->set_current(geometry.delta()->get_current().get_value());
        }
      else
        {
          ostringstream description;
          if (mu && gamma)
            {
              description << "the current K6C \"mu\" (" << mu * constant::math::radToDeg << "°) and \"gamma\" (" << gamma * constant::math::radToDeg << "°) axes must be set to zero";
            }
          else if (mu)
            {
              description << "the current K6C \"mu\" (" << mu * constant::math::radToDeg << "°) must be set to zero";
            }
          else if (gamma)
            {
              description << "the current K6C \"gamma\" (" << gamma * constant::math::radToDeg << "°) must be set to zero";
            }
          HKLEXCEPTION("Can not convert geometry K6C -> K4CV",
                       description.str());
        }
