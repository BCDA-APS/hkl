import os

Import('env')

sources = Split("""
                svecmat_test.cpp
                quaternion_test.cpp
                mystring_test.cpp
                object_test.cpp
                value_test.cpp
                range_test.cpp
                parameter_test.cpp
                fitparameter_test.cpp
                axe_test.cpp
                hklobject_test.cpp
                source_test.cpp
                lattice_test.cpp
                geometry_test.cpp
                geometry_eulerian4C_test.cpp
                reflection_test.cpp
                reflectionlist_test.cpp
                main.cpp
                """)

"""
                sample_test.cpp
                crystallist_test.cpp
                geometry_twoC_test.cpp
                geometry_eulerian6C_test.cpp
                geometry_kappa4C_test.cpp
                geometry_kappa6C_test.cpp
                affinement_simplex_test.cpp
                pseudoaxe_twoC_test.cpp
                pseudoaxe_eulerian4C_test.cpp
                pseudoaxe_kappa4C_test.cpp
                pseudoaxe_eulerian6C_test.cpp
                pseudoaxe_kappa6C_test.cpp
                mode_twoC_test.cpp
                mode_eulerian4C_test.cpp
                mode_kappa4C_test.cpp
                mode_kappa6C_test.cpp
                diffractometer_twoC_test.cpp
                diffractometer_eulerian4C_test.cpp
                diffractometer_kappa4C_test.cpp
                diffractometer_kappa6C_test.cpp
                """

includes = ['#include/hkl']

libpath = ['../src']

libs = ['hkl', 'cppunit']

if env.has_key('test') and env['test']:
  lenv = env.Copy()
  lenv.AppendUnique(CPPPATH = includes)
  lenv.AppendUnique(LIBS = libs)
  lenv.AppendUnique(LIBPATH = libpath)
  if lenv.has_key('cppunit_lib_path') and lenv['cppunit_lib_path']:
    lenv.AppendUnique(LIBPATH = lenv['cppunit_lib_path'])
  if lenv.has_key('cppunit_inc_path') and lenv['cppunit_inc_path']:
    lenv.AppendUnique(CPPPATH = lenv['cppunit_inc_path'])

  test = lenv.Program(target = 'test', source = sources)
  lenv.Test("test.passed", test)
  Default(lenv.Alias("check", "test.passed"))
