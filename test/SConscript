# vi:filetype=python:expandtab:tabstop=2:shiftwidth=2
import os

Import('env')

sources = Split("""
                hkl-test.c
                hkl-test-vector.c
                hkl-test-matrix.c
                hkl-test-quaternion.c
                hkl-test-interval.c
                hkl-test-source.c
                hkl-test-holder.c
                hkl-test-geometry.c
                hkl-test-parameter.c
                hkl-test-list.c
                hkl-test-lattice.c
                main.c
                """)

"""

                object_test.cpp
                value_test.cpp
                range_test.cpp
                hklobject_test.cpp
                fitparameter_test.cpp

                geometry_test.cpp
                twoC_vertical_geometry_test.cpp
                twoC_vertical_mode_test.cpp
                twoC_vertical_pseudoaxeengine_test.cpp
                twoC_vertical_diffractometer_test.cpp

                geometry_eulerian4C_test.cpp
                geometry_eulerian6C_test.cpp
                geometry_kappa4C_test.cpp
                geometry_kappa6C_test.cpp
                reflection_test.cpp
                reflectionlist_test.cpp
                sample_test.cpp
                samplelist_test.cpp
                affinement_simplex_test.cpp
                mode_eulerian4C_test.cpp
                mode_kappa4C_test.cpp
                mode_kappa6C_test.cpp
                pseudoaxe_eulerian4C_test.cpp
                pseudoaxe_kappa4C_test.cpp
                pseudoaxe_eulerian6C_test.cpp
                pseudoaxe_kappa6C_test.cpp
                diffractometer_eulerian4C_test.cpp
                diffractometer_kappa4C_test.cpp
                diffractometer_kappa6C_test.cpp


                """

includes = ['#include']

libpath = ['../src']

libs = ['hkl']
if os.name == 'posix':
  libs += ['m']

lenv = env.Copy()
if lenv['profile']:
  lenv.AppendUnique(CPPDEFINES='PROFILE')

lenv.AppendUnique(CPPPATH = includes)
lenv.AppendUnique(LIBS = libs)
lenv.AppendUnique(LIBPATH = libpath)

test = lenv.Program(target = 'test', source = sources)
lenv.Test("test.passed", test)
Default(lenv.Alias("check", "test.passed"))
