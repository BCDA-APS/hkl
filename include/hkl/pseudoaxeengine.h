#ifndef _PSEUDOAXEENGINE_H_
#define _PSEUDOAXEENGINE_H_

#include "hklobject.h"
#include "pseudomultiaxe.h"
#include "axe.h"

using namespace std;

namespace hkl
  {

  class PseudoAxeEngine : public HKLObject
    {
    public:

      virtual AxeList * relatedAxes(void) = 0;

      virtual vector<PseudoMultiAxe *> pseudoAxes(void) = 0;

      /**
       * @brief Get the initialization state of the pseudoAxe.
       */
      virtual bool const get_initialized(void) const = 0;

      /**
       * @brief Get the readable state of the pseudoAxe.
       *
       * During the get_value and set_value method, the peusoAxe can be set unreadable.
       */
      virtual bool const get_readable(void) const = 0;

      /**
       * @brief Get the writable state of the pseudoAxe.
       * During the get_value and set_value method, the peusoAxe can be set unwritable.
       */
      virtual bool const get_writable(void) const = 0;

      /**
       * @brief Initialize the pseudoAxe.
       *
       * This method must be call before using a pseudoAxe.
       */
      virtual void initialize(void) throw (HKLException) = 0;

      /**
       * @brief Un-Initialize the pseudoAxe.
       *
       * This method must be call to un-initialize a pseudoAxe.
       */
      virtual void uninitialize(void) = 0;

      /**
       * @brief set the current value of the PseudoAxe.
       * @throw HKLException if the pseudoAxe is not ready to be set.
       */
      virtual void set(void) throw (HKLException) = 0;

    protected:
      PseudoAxeEngine(void);
    };

  /**
   * \brief A class design to describe a pseudoaxe from a geometry type
   */
  template<typename T>
  class PseudoAxeEngineTemp : public PseudoAxeEngine, public Observer
    {
    public:

      /**
       * @brief The default destructor.
       */
      virtual ~PseudoAxeEngineTemp(void)
      {}

      bool const get_initialized(void) const
        {
          return _initialized;
        }

      bool const get_readable(void) const
        {
          return _readable;
        }

      bool const get_writable(void) const
        {
          return _writable;
        }

      vector<PseudoMultiAxe *> pseudoAxes(void)
      {
        return _pseudoAxes;
      }

      AxeList * relatedAxes(void)
      {
        return _relatedAxes;
      }

      void uninitialize(void)
      {
        _initialized = false;
      }

      /**
       * @brief Print a PseudoAxeTemp in a stream.
       * @param flux the stream to print into.
       * @return the modified stream.
       */
      ostream & printToStream(ostream & flux) const
        {
          PseudoAxeEngine::printToStream(flux);
          flux << " initialized : " << _initialized << endl;
          flux << " readable : " << _readable << endl;
          flux << " writable : " << _writable << endl;
          return flux;
        }

      /**
       * @brief Store a PseudoAxeTemp in a stream.
       * @param flux the stream use to store the PseudoAxeTemp.
       * @return the modified stream.
       */
      ostream & toStream(ostream & flux) const
        {
          PseudoAxeEngine::toStream(flux);
          flux << " " << _initialized;
          flux << " " << _readable;
          flux << " " << _writable << endl;
          return flux;
        }

      /**
       * @brief Restore a PseudoAxeTemp from a stream.
       * @param flux The stream to restore from.
       * @return the modified stream.
       */
      istream & fromStream(istream & flux)
      {
        PseudoAxeEngine::fromStream(flux);
        flux >> _initialized >> _readable >> _writable;
        return flux;
      }

    protected:
      T & _geometry; //!< geometry connected to the pseudoAxe.
      bool _initialized; //!< the initialized state of the Engine.
      bool _readable; //!< The readable state of the Engine.
      bool _writable; //!< The writable state of the Engine.
      AxeList * _relatedAxes; //!< The axes related to the pseudoAxe.
      vector<Range *> _reads;
      vector<Range *> _writes;
      vector<PseudoMultiAxe *> _pseudoAxes; //!< The pseudoAxes generated by this Engine.

      /**
       * @brief The default constructor.
       * @param geometry The Geometry use to compute the pseudoAxes values.
       * @param name The name of this PseudoAxeEngine. @todo useless.
       * @param description The description of the PseudoAxeEngine.
       * @param names The name of the PseudoMultiAxes.
       * @param initialized the initial state of the PseudoAxeEngine.
       * @param readable The initial readable state of the PseudoAxeEngine.
       * @param writable The initial writable state of the PseudoAxeEngine.
       * @todo be sure to be consistant with ModeTemp.
       */
      PseudoAxeEngineTemp(T & geometry, bool initialized, bool readable, bool writable) :
          PseudoAxeEngine(),
          Observer(),
          _geometry(geometry),
          _initialized(initialized),
          _readable(readable),
          _writable(writable)
      {}

    public:
      typedef T value_type; //!< The type of the geometry use in this PseudoAxe.
    };

} // namespace hkl

/*!
 * \brief Overload of the << operator for the PseudoAxe class
 */
template<typename T>
inline ostream &
operator<<(ostream & flux, hkl::PseudoAxeEngineTemp<T> const & pseudoAxeEngine)
{
  return pseudoAxeEngine.printToStream(flux);
}

#endif // _PSEUDOAXE_H_
