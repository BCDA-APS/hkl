/* hkl.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Hkl", gir_namespace = "Hkl", gir_version = "4.0", lower_case_cprefix = "hkl_")]
namespace Hkl {
	[CCode (cheader_filename = "hkl.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "hkl_axis_get_type ()")]
	[Compact]
	public class Axis {
	}
	[CCode (cheader_filename = "hkl.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "hkl_detector_get_type ()")]
	[Compact]
	public class Detector {
		[CCode (cname = "hkl_detector_factory_new", has_construct_function = false)]
		public Detector.factory_new (Hkl.DetectorType type);
		public void idx_set (int idx);
	}
	[CCode (cheader_filename = "hkl.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "hkl_engine_get_type ()")]
	[Compact]
	public class Engine {
		public unowned Hkl.EngineList engines ();
		public unowned Hkl.Mode mode ();
		public GLib.SList<weak Hkl.Mode> modes_as_gslist ();
		public unowned string name ();
		public unowned Hkl.ParameterList pseudo_axes ();
		public void select_mode (Hkl.Mode mode);
		public void select_mode_by_name (string name);
		public bool set_values_unit ([CCode (array_length_cname = "len", array_length_pos = 1.1, array_length_type = "guint")] double[] values) throws GLib.Error;
	}
	[CCode (cheader_filename = "hkl.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "hkl_engine_list_get_type ()")]
	[Compact]
	public class EngineList {
		public GLib.SList<weak Hkl.Engine> engines_as_gslist ();
		public unowned Hkl.GeometryList geometries ();
		public void geometry_set (Hkl.Geometry geometry);
		public int @get ();
		public unowned Hkl.Engine get_by_name (string name);
		public unowned Hkl.Parameter get_pseudo_axis_by_name (string name);
		public void init (Hkl.Geometry geometry, Hkl.Detector detector, Hkl.Sample sample);
		public void select_solution (uint idx);
	}
	[CCode (cheader_filename = "hkl.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "hkl_error_get_type ()")]
	[Compact]
	public class Error {
		public unowned string message_get ();
	}
	[CCode (cheader_filename = "hkl.h")]
	[Compact]
	public class Factory {
		public Hkl.EngineList create_new_engine_list ();
		public Hkl.Geometry create_new_geometry ();
		public unowned string name ();
	}
	[CCode (cheader_filename = "hkl.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "hkl_geometry_get_type ()")]
	[Compact]
	public class Geometry {
		public GLib.SList<weak Hkl.Parameter> axes ();
		public void axis_set (Hkl.Parameter axis);
		[CCode (array_length_pos = 0.1, array_length_type = "guint")]
		public double[] get_axes_values_unit ();
		public unowned string name_get ();
		public void @set (Hkl.Geometry src);
		public void set_axes_values_unit ([CCode (array_length_cname = "len", array_length_pos = 1.1, array_length_type = "guint")] double[] values);
		public double wavelength_get ();
		public void wavelength_set (double wavelength);
	}
	[CCode (cheader_filename = "hkl.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "hkl_geometry_list_get_type ()")]
	[Compact]
	public class GeometryList {
		public GLib.SList<weak Hkl.GeometryListItem> items ();
	}
	[CCode (cheader_filename = "hkl.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "hkl_geometry_list_item_get_type ()")]
	[Compact]
	public class GeometryListItem {
		public unowned Hkl.Geometry geometry ();
	}
	[CCode (cheader_filename = "hkl.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "hkl_lattice_get_type ()")]
	[Compact]
	public class Lattice {
		[CCode (has_construct_function = false)]
		public Lattice (double a, double b, double c, double alpha, double beta, double gamma);
		public void @get (out double a, out double b, out double c, out double alpha, out double beta, out double gamma);
		public int reciprocal (Hkl.Lattice reciprocal);
		public int @set (double a, double b, double c, double alpha, double beta, double gamma);
	}
	[CCode (cheader_filename = "hkl.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "hkl_matrix_get_type ()")]
	[Compact]
	public class Matrix {
		public int cmp (Hkl.Matrix m);
		[CCode (has_construct_function = false)]
		public Matrix.euler (double euler_x, double euler_y, double euler_z);
		public double @get (uint i, uint j);
		public void init (double m11, double m12, double m13, double m21, double m22, double m23, double m31, double m32, double m33);
		public void times_matrix (Hkl.Matrix m);
	}
	[CCode (cheader_filename = "hkl.h")]
	[Compact]
	public class Mode {
		public unowned string name ();
		public unowned Hkl.ParameterList parameters ();
	}
	[CCode (cheader_filename = "hkl.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "hkl_parameter_get_type ()")]
	[Compact]
	public class Parameter {
		public int fit_get ();
		public void fit_set (int fit);
		public void min_max_unit_set (double min, double max);
		public unowned string name_get ();
		public double value_get ();
		public double value_unit_get ();
		public int value_unit_set (double value, Hkl.Error? error);
	}
	[CCode (cheader_filename = "hkl.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "hkl_parameter_list_get_type ()")]
	[Compact]
	public class ParameterList {
		public ulong alloc;
		public weak Hkl.Parameter item;
		public ulong size;
		public GLib.SList<weak Hkl.Parameter> parameters ();
		public uint values_set ([CCode (array_length_cname = "len", array_length_pos = 1.5, array_length_type = "guint")] double[] values, Hkl.Error error);
		[CCode (array_length_pos = 0.1, array_length_type = "guint")]
		public double[] values_unit_get ();
		public bool values_unit_set_binding ([CCode (array_length_cname = "len", array_length_pos = 1.1, array_length_type = "guint")] double[] values) throws GLib.Error;
	}
	[CCode (cheader_filename = "hkl.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "hkl_pseudo_axis_get_type ()")]
	[Compact]
	public class PseudoAxis {
	}
	[CCode (cheader_filename = "hkl.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "hkl_sample_get_type ()")]
	[Compact]
	public class Sample {
		[CCode (has_construct_function = false)]
		public Sample (string name);
		public unowned Hkl.Matrix UB_get ();
		public double UB_set (Hkl.Matrix UB);
		public unowned Hkl.Matrix U_get ();
		public void U_set (Hkl.Matrix U);
		public Hkl.SampleReflection add_reflection_binding (Hkl.Geometry geometry, Hkl.Detector detector, double h, double k, double l);
		public double affine ();
		public int compute_UB_busing_levy (Hkl.SampleReflection r1, Hkl.SampleReflection r2);
		public void del_reflection (Hkl.SampleReflection reflection);
		public double get_reflection_mesured_angle (Hkl.SampleReflection r1, Hkl.SampleReflection r2);
		public double get_reflection_theoretical_angle (Hkl.SampleReflection r1, Hkl.SampleReflection r2);
		public unowned Hkl.Lattice lattice_get ();
		public void lattice_set (Hkl.Lattice lattice);
		public unowned string name_get ();
		public void name_set (string name);
		public GLib.SList<weak Hkl.SampleReflection> reflections_get ();
		public unowned Hkl.Parameter ux_get ();
		public void ux_set (Hkl.Parameter ux);
		public unowned Hkl.Parameter uy_get ();
		public void uy_set (Hkl.Parameter uy);
		public unowned Hkl.Parameter uz_get ();
		public void uz_set (Hkl.Parameter uz);
	}
	[CCode (cheader_filename = "hkl.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "hkl_sample_reflection_get_type ()")]
	[Compact]
	public class SampleReflection {
		[CCode (has_construct_function = false)]
		public SampleReflection (Hkl.Geometry geometry, Hkl.Detector detector, double h, double k, double l);
		public void hkl_get (out double h, out double k, out double l);
		public void hkl_set (double h, double k, double l);
	}
	[CCode (cheader_filename = "hkl.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "hkl_unit_get_type ()")]
	[Compact]
	public class Unit {
	}
	[CCode (cheader_filename = "hkl.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "hkl_vector_get_type ()")]
	[Compact]
	public class Vector {
	}
	[CCode (cheader_filename = "hkl.h", cprefix = "HKL_DETECTOR_TYPE_", type_id = "hkl_detector_type_get_type ()")]
	public enum DetectorType {
		@0D
	}
	[CCode (cheader_filename = "hkl.h", cname = "HKL_DEGTORAD")]
	public const int DEGTORAD;
	[CCode (cheader_filename = "hkl.h", cname = "HKL_EPSILON")]
	public const double EPSILON;
	[CCode (cheader_filename = "hkl.h", cname = "HKL_FALSE")]
	public const int FALSE;
	[CCode (cheader_filename = "hkl.h", cname = "HKL_RADTODEG")]
	public const int RADTODEG;
	[CCode (cheader_filename = "hkl.h", cname = "HKL_TAU")]
	public const int TAU;
	[CCode (cheader_filename = "hkl.h", cname = "HKL_TINY")]
	public const double TINY;
	[CCode (cheader_filename = "hkl.h", cname = "HKL_TRUE")]
	public const int TRUE;
	[CCode (cheader_filename = "hkl.h")]
	public static GLib.HashTable<weak string,weak Hkl.Factory> factories ();
}
